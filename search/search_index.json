{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to MkDocs\n\n\nFor full documentation visit \nmkdocs.org\n.\n\n\nCommands\n\n\n\n\nmkdocs new [dir-name]\n - Create a new project.\n\n\nmkdocs serve\n - Start the live-reloading docs server.\n\n\nmkdocs build\n - Build the documentation site.\n\n\nmkdocs help\n - Print this help message.\n\n\n\n\nProject layout\n\n\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "Welcome to MkDocs"
        }, 
        {
            "location": "/#welcome-to-mkdocs", 
            "text": "For full documentation visit  mkdocs.org .", 
            "title": "Welcome to MkDocs"
        }, 
        {
            "location": "/#commands", 
            "text": "mkdocs new [dir-name]  - Create a new project.  mkdocs serve  - Start the live-reloading docs server.  mkdocs build  - Build the documentation site.  mkdocs help  - Print this help message.", 
            "title": "Commands"
        }, 
        {
            "location": "/#project-layout", 
            "text": "mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "Project layout"
        }, 
        {
            "location": "/DAO-protocol/", 
            "text": "DAO Protocol\n\n\n\n\nThis document describes the general framework and protocol for collaborative DAOs. It parallels the \nformal whitepaper\n (\nsource\n), which is supposed to cover the same material in a rigorous language.  \n\n\n\n\nWelcome to edit, add comments/questions, and submit pull request.\n\n\n\n\nTip: try \nStackEdit\n or \nDilinger\n for editing.\n\n\n\n\nBasics\n\n\n\n\nValue System\n\n\nA Value System (VS) is a smart contract allowing a dynamic community of \nAgents\n to manage collective decisions, in particular about the ownership and distribution of digital assets.\n\n\nThere are generally five types of decisions a VS can make:\n\n\n\n\nInternal fund management\n: in terms of distribution of the native token controlled by the VS smart contract.\n\n\nExternal fund management\n: in terms of distribution of other tokens (of other VS) which are owned and managed by the VS smart contract (e.g. as a result of investments in its native token).\n\n\nCuration\n: in terms of adding metadata to (and particularly ranking of) digitally-identified objects, such as article, websites, questions and answers, ideas, physical entities (companies, restaurants), etc.\n\n\nOperation\n: in terms of calling and executing functions of other smart contracts (that may be triggering similar activities in other VS but can also be more general).\n\n\nProtocol update\n: in terms of changing the VS protocol for the process of making these (five types of) collective decisions itself.\n\n\n\n\nGenerally a VS may process all of them, but often each VS will have one type of decision making that is primary (i.e. being its \npurpose\n) and the others that will be \nsecondary\n (serving the primary).\n\n\n\n\nFor example, a pure curation VS could be purposed for collective curation of articles, websites or restaurant. A collaborative code-development VS would primarily distribute its internal tokens (as ownership of the guild) to contributors of valuable code. And a decentralized investment (or insurance) fund will primarily allocate external funds (such as ETH) to promising projects (or peers' claims).\n\n\n\n\nGenerally speaking, the VS distributes its \ntokens\n and \nreputation\n to agents for posting successful \nevaluations\n and \ncontributions\n (as perceived by the VS through the evaluations of its reputation holders).\n\n\n\n\n\n\n\nAgents\n\n\nAgent is an address that can interact with the blockchain, and it comes in two types:\n\n\n\n\nprivate key\n: and a private holder of that key (that has to be kept somewhere by someone).\n\n\ncontract\n: would it be a multisig contract of several private agents, another value system, or more generally any other contract.\n\n\n\n\n\n\nFor example, three private agents can form their own private VS, could be a simple 2-of-3 multisig contract or a more complicated one, and collective become an agent inside other VSs. That collective agent makes its own contributions and evaluations (so that their internal contract should also define how their private inputs turn into single voice), and correspondingly gains its own reputation and tokens (of other VSs). While earned tokens can be distributed between the private agents comprising that collective contract agent, the reputation is forever attributed to the contract as a single, indivisible agent.\n\n\n\n\nGenerally an agent has the following attributes within a VS:\n\n\n\n\ntoken balance\n\n\nreputation score\n\n\nhistory of \ncontributions\n and \nevaluations\n\n\n\n\nThe public actions of an agent in a VS are posting \ncontributions\n,  \nevaluations\n of contributions, and casting votes on the VS \nproposals\n. Privately, an agent can transfer tokens and delegate reputation to other peers. (One can also consider making agents' evaluations secret.)\n\n\n\n\nTokens\n\n\nEach value system (VS) has its own native token which is transferrable.\n\n\n\n\nWhile a token is generally \ntransferrable\n,  various conditions can be applied to it, such as \nVesting\n or \nFreezing\n, when  tokens are distributed under future conditions, or remained non-transferrable for a period of time. For example, a distribution mechanism might allow a successful contributor to choose if she likes to be rewarded with 10 two-months locked tokens (i.e. rendered non-transferrable for two months), or 5 tangible tokens (which are transferrable immediately).\n\n\n\n\nAgents in the VS have their native token balance, and the distribution of internal tokens is at the core of the VS's activity (or decision making). The token balance is analogous to their financial ownership in that VS, and generally (unless otherwise implemented), internal tokens are backed by the VS assets.\n\n\n\n\nFor example, if VS-A owns 10 tokens of VS-B, and has distributed 100 VS-A tokens to its agents, then each VS-A token is generally redeemable against 0.1 VS-B tokens. Practically it means an agent X can send to the VS-A contract his 5 VS-A tokens; the contract effectively burns those tokens out of circulation (or simply deletes it from its database), and correspondingly sends 0.5 of its VS-B owned tokens back to the address of X from which he has sent his 5 VS-A tokens. That's the default, but of course, could also devised differently by VS-A.\n\n\n\n\nThere are generally two ways a VS gains external assets:\n\n\n\n\nThrough agents \npurchasing\n its native tokens via one of its \ntoken distribution\n schemes.\n\n\n\n\n\n\nAgent X sends 10 ETH\n\n\n\n\n\n\nThrough successful contributions of the VS into other VSs\n\n\n\n\n\n\nSay,\n\n\n\n\nToken Distribution\n\n\nThe VS contract mints and distributes new internal tokens upon three types of triggers:\n\n\n\n\nInvestment\n:  agent A sends \nexternal\n funds (say, D1 tokens) into the contract (say, D2 VS), and resultingly the D2 contract keeps the sent D1 tokens, mints T D2 tokens and send them back to agent A. (Possibly also issuing R D2 reputation score to be allocated to agent A as well.) The exact details of how many tokens, vested or not (and for how long), reputation or not (and how much) can be very general and depend on the token distribution scheme adopted by the D2 VS. DAOstack lets each founded VS decide and constantly update (through majority votes \u2014but this default choice is also open for change by the VS) the token- and reputation-distribution schemes, and additional templates will be built during its evolution.\n\n\n\n\n\n\nFor example, a crowd-sale type template can offer a bounded sale of tokens (say, 1M of them), open for 1 month, with price rising linearly from: 1 D2 token = 1 D1 token, to 1 D2 token = 2 D1 tokens over that period, and a total of 10% of the D2 reputation score allocated to the investors, in proportion to their investment and in linearly decreasing amount over time. Infinitely many other distribution schemes can be suggested to design different economies and incentive structures. We'll offer a few initial \ntoken sale schemes\n below, including their contracts.\n\n\n\n\n\n\nObjective contribution\n (or objectively measured), which is not transaction of tokens (i.e. purchase). \nMORE ON THIS\n\n\nSubjective contribution\n, that needs to be evaluated by the VS reputation holders. \nMORE ON THIS\n\n\n\n\nToken Value\n\n\n...where the token get its value from, the token's \"business model\", submission fee, VS reserve...\n\n\n\n\nReputation\n\n\nReputation score is just another name for \nvoting power\n. That is, if an agent A have the sum of reputation of agent B and agent C, then A's vote amounts to B and C voting together (assuming they all vote the same).\n\n\n\n\nMore generally, we could have imagined vote impact to behave superlinearly or sublinearly with respect to reputation, so that A's vote could be stronger or weaker than votes of B and C together. Sublinearity will induce bias towards smaller players and superlinearity will induce a bias towards larger players. The former will also induce an incentive for an identity split (i.e. the same physical agent using multiple identities) and is thus undesirable. The latter will induce incentive for cooperation, or grouping/pools, and might be considered both desirable (including cooperation and fractal governance) or undesirable (giving more power to the already powerful ones, as well as more prone to majority attack). The default choice, unless otherwise is clearly devised, would be to stick with linearity.\n\n\n\n\nReputation is non-transferrable, but can can be \nreversibly\n delegated. Reputation can be awarded (or distributed) by vote of current reputation holders, usually as part of an agent's contribution to the network \u2014together with award of tokens.\n\n\n\n\nA VS can also decide to award reputation to an agent who hasn't contributed directly to this VS but is known to have reputation/competence from past activity. In that case usually the reputation distribution will not be tight up with tokens, but the voting procedure would be similar.\n\n\n\n\nA more advanced (and important) feature is the  \nreputation flow\n between curators upon their evaluations of proposals. Generally reputation should flow to curators who are found to be retrospectively aligned with decisions made by the VS (from those who are found misaligned, or those who haven't participated in voting), and in that way the VS induces systematic alignment of opinions (and interests) and defines its \nemergent\n value system. At the same time, misaligned agents become less effective within that VS, and are incentivized to open a new VS (where they define the first axis of alignment) or join another one better suiting their personal value system.\n\n\n\n\nFor example, agent Cony posts a contribution of a code repository. Agent Eva reviews that contribution and posts an evaluation to distribute 10 (say, DAOstack\n1\n) tokens to agent Cony for that contribution. Then, the more reputable agents\n2\n endorse Eva's evaluation (i.e. posts similar evaluations \u2014and defining \nsimilar\n is, for example, where things get more complicated) the more Eva's reputation increases; and vice versa. So, basically when making an evaluation amounts to putting your reputation at risk \u2014and gaining if being \"right\". To define of \"being right\" requires more work.\n\n\n\n\nThe reputation flow element is perhaps the complex part of the reputation protocol, which needs to be carefully designed in a resistant way. (I.e. a way that makes is impossible for an agent to game the system and gain reputation without actually be retrospectively aligned with the VS it belongs to.) We'll elaborate on this in a separate chapter \nbelow\n.\n\n\n1\n If the contribution and evaluation are within the DAOstack VS. Generally they can be in any other VS, that can be a sub-VS of DAOstack, or not. \n\u21a9\n\n\n2\n Reputation is what counts, not number of people. \n\u21a9\n\n\n\n\nProposal\n\n\n... submitting a proposal for token/reputation-distribution scheme, for example:\n\n\n\n\ncontribution proposal with fixed reward and majority approval (Yes/No vote)\n\n\ncontribution proposal with open reward (numeric evaluation and reputation-weighted median)\n\n\ntoken-sale distribution scheme 1: fixed-rate sale with no reputation distribution\n\n\ntoken-sale distribution scheme 2: linearly-growing rate sale with exponentially-decreasing reputation distribution (20% in total)\n\n\n\n\n...\n\n\n\n\nContribution\n\n\n\n\nEvaluation\n\n\n\n\nToken Sale Schemes\n\n\n\n\nReputation Flow - I\n\n\n\n\nContract Architecture\n\n\nA preliminary contract architecture looks something like this:", 
            "title": "DAO protocol"
        }, 
        {
            "location": "/DAO-protocol/#dao-protocol", 
            "text": "This document describes the general framework and protocol for collaborative DAOs. It parallels the  formal whitepaper  ( source ), which is supposed to cover the same material in a rigorous language.     Welcome to edit, add comments/questions, and submit pull request.   Tip: try  StackEdit  or  Dilinger  for editing.", 
            "title": "DAO Protocol"
        }, 
        {
            "location": "/DAO-protocol/#basics", 
            "text": "", 
            "title": "Basics"
        }, 
        {
            "location": "/DAO-protocol/#value-system", 
            "text": "A Value System (VS) is a smart contract allowing a dynamic community of  Agents  to manage collective decisions, in particular about the ownership and distribution of digital assets.  There are generally five types of decisions a VS can make:   Internal fund management : in terms of distribution of the native token controlled by the VS smart contract.  External fund management : in terms of distribution of other tokens (of other VS) which are owned and managed by the VS smart contract (e.g. as a result of investments in its native token).  Curation : in terms of adding metadata to (and particularly ranking of) digitally-identified objects, such as article, websites, questions and answers, ideas, physical entities (companies, restaurants), etc.  Operation : in terms of calling and executing functions of other smart contracts (that may be triggering similar activities in other VS but can also be more general).  Protocol update : in terms of changing the VS protocol for the process of making these (five types of) collective decisions itself.   Generally a VS may process all of them, but often each VS will have one type of decision making that is primary (i.e. being its  purpose ) and the others that will be  secondary  (serving the primary).   For example, a pure curation VS could be purposed for collective curation of articles, websites or restaurant. A collaborative code-development VS would primarily distribute its internal tokens (as ownership of the guild) to contributors of valuable code. And a decentralized investment (or insurance) fund will primarily allocate external funds (such as ETH) to promising projects (or peers' claims).   Generally speaking, the VS distributes its  tokens  and  reputation  to agents for posting successful  evaluations  and  contributions  (as perceived by the VS through the evaluations of its reputation holders).", 
            "title": "Value System"
        }, 
        {
            "location": "/DAO-protocol/#agents", 
            "text": "Agent is an address that can interact with the blockchain, and it comes in two types:   private key : and a private holder of that key (that has to be kept somewhere by someone).  contract : would it be a multisig contract of several private agents, another value system, or more generally any other contract.    For example, three private agents can form their own private VS, could be a simple 2-of-3 multisig contract or a more complicated one, and collective become an agent inside other VSs. That collective agent makes its own contributions and evaluations (so that their internal contract should also define how their private inputs turn into single voice), and correspondingly gains its own reputation and tokens (of other VSs). While earned tokens can be distributed between the private agents comprising that collective contract agent, the reputation is forever attributed to the contract as a single, indivisible agent.   Generally an agent has the following attributes within a VS:   token balance  reputation score  history of  contributions  and  evaluations   The public actions of an agent in a VS are posting  contributions ,   evaluations  of contributions, and casting votes on the VS  proposals . Privately, an agent can transfer tokens and delegate reputation to other peers. (One can also consider making agents' evaluations secret.)", 
            "title": "Agents"
        }, 
        {
            "location": "/DAO-protocol/#tokens", 
            "text": "Each value system (VS) has its own native token which is transferrable.   While a token is generally  transferrable ,  various conditions can be applied to it, such as  Vesting  or  Freezing , when  tokens are distributed under future conditions, or remained non-transferrable for a period of time. For example, a distribution mechanism might allow a successful contributor to choose if she likes to be rewarded with 10 two-months locked tokens (i.e. rendered non-transferrable for two months), or 5 tangible tokens (which are transferrable immediately).   Agents in the VS have their native token balance, and the distribution of internal tokens is at the core of the VS's activity (or decision making). The token balance is analogous to their financial ownership in that VS, and generally (unless otherwise implemented), internal tokens are backed by the VS assets.   For example, if VS-A owns 10 tokens of VS-B, and has distributed 100 VS-A tokens to its agents, then each VS-A token is generally redeemable against 0.1 VS-B tokens. Practically it means an agent X can send to the VS-A contract his 5 VS-A tokens; the contract effectively burns those tokens out of circulation (or simply deletes it from its database), and correspondingly sends 0.5 of its VS-B owned tokens back to the address of X from which he has sent his 5 VS-A tokens. That's the default, but of course, could also devised differently by VS-A.   There are generally two ways a VS gains external assets:   Through agents  purchasing  its native tokens via one of its  token distribution  schemes.    Agent X sends 10 ETH    Through successful contributions of the VS into other VSs    Say,", 
            "title": "Tokens"
        }, 
        {
            "location": "/DAO-protocol/#token-distribution", 
            "text": "The VS contract mints and distributes new internal tokens upon three types of triggers:   Investment :  agent A sends  external  funds (say, D1 tokens) into the contract (say, D2 VS), and resultingly the D2 contract keeps the sent D1 tokens, mints T D2 tokens and send them back to agent A. (Possibly also issuing R D2 reputation score to be allocated to agent A as well.) The exact details of how many tokens, vested or not (and for how long), reputation or not (and how much) can be very general and depend on the token distribution scheme adopted by the D2 VS. DAOstack lets each founded VS decide and constantly update (through majority votes \u2014but this default choice is also open for change by the VS) the token- and reputation-distribution schemes, and additional templates will be built during its evolution.    For example, a crowd-sale type template can offer a bounded sale of tokens (say, 1M of them), open for 1 month, with price rising linearly from: 1 D2 token = 1 D1 token, to 1 D2 token = 2 D1 tokens over that period, and a total of 10% of the D2 reputation score allocated to the investors, in proportion to their investment and in linearly decreasing amount over time. Infinitely many other distribution schemes can be suggested to design different economies and incentive structures. We'll offer a few initial  token sale schemes  below, including their contracts.    Objective contribution  (or objectively measured), which is not transaction of tokens (i.e. purchase).  MORE ON THIS  Subjective contribution , that needs to be evaluated by the VS reputation holders.  MORE ON THIS", 
            "title": "Token Distribution"
        }, 
        {
            "location": "/DAO-protocol/#token-value", 
            "text": "...where the token get its value from, the token's \"business model\", submission fee, VS reserve...", 
            "title": "Token Value"
        }, 
        {
            "location": "/DAO-protocol/#reputation", 
            "text": "Reputation score is just another name for  voting power . That is, if an agent A have the sum of reputation of agent B and agent C, then A's vote amounts to B and C voting together (assuming they all vote the same).   More generally, we could have imagined vote impact to behave superlinearly or sublinearly with respect to reputation, so that A's vote could be stronger or weaker than votes of B and C together. Sublinearity will induce bias towards smaller players and superlinearity will induce a bias towards larger players. The former will also induce an incentive for an identity split (i.e. the same physical agent using multiple identities) and is thus undesirable. The latter will induce incentive for cooperation, or grouping/pools, and might be considered both desirable (including cooperation and fractal governance) or undesirable (giving more power to the already powerful ones, as well as more prone to majority attack). The default choice, unless otherwise is clearly devised, would be to stick with linearity.   Reputation is non-transferrable, but can can be  reversibly  delegated. Reputation can be awarded (or distributed) by vote of current reputation holders, usually as part of an agent's contribution to the network \u2014together with award of tokens.   A VS can also decide to award reputation to an agent who hasn't contributed directly to this VS but is known to have reputation/competence from past activity. In that case usually the reputation distribution will not be tight up with tokens, but the voting procedure would be similar.   A more advanced (and important) feature is the   reputation flow  between curators upon their evaluations of proposals. Generally reputation should flow to curators who are found to be retrospectively aligned with decisions made by the VS (from those who are found misaligned, or those who haven't participated in voting), and in that way the VS induces systematic alignment of opinions (and interests) and defines its  emergent  value system. At the same time, misaligned agents become less effective within that VS, and are incentivized to open a new VS (where they define the first axis of alignment) or join another one better suiting their personal value system.   For example, agent Cony posts a contribution of a code repository. Agent Eva reviews that contribution and posts an evaluation to distribute 10 (say, DAOstack 1 ) tokens to agent Cony for that contribution. Then, the more reputable agents 2  endorse Eva's evaluation (i.e. posts similar evaluations \u2014and defining  similar  is, for example, where things get more complicated) the more Eva's reputation increases; and vice versa. So, basically when making an evaluation amounts to putting your reputation at risk \u2014and gaining if being \"right\". To define of \"being right\" requires more work.   The reputation flow element is perhaps the complex part of the reputation protocol, which needs to be carefully designed in a resistant way. (I.e. a way that makes is impossible for an agent to game the system and gain reputation without actually be retrospectively aligned with the VS it belongs to.) We'll elaborate on this in a separate chapter  below .  1  If the contribution and evaluation are within the DAOstack VS. Generally they can be in any other VS, that can be a sub-VS of DAOstack, or not.  \u21a9  2  Reputation is what counts, not number of people.  \u21a9", 
            "title": "Reputation"
        }, 
        {
            "location": "/DAO-protocol/#proposal", 
            "text": "... submitting a proposal for token/reputation-distribution scheme, for example:   contribution proposal with fixed reward and majority approval (Yes/No vote)  contribution proposal with open reward (numeric evaluation and reputation-weighted median)  token-sale distribution scheme 1: fixed-rate sale with no reputation distribution  token-sale distribution scheme 2: linearly-growing rate sale with exponentially-decreasing reputation distribution (20% in total)   ...", 
            "title": "Proposal"
        }, 
        {
            "location": "/DAO-protocol/#contribution", 
            "text": "", 
            "title": "Contribution"
        }, 
        {
            "location": "/DAO-protocol/#evaluation", 
            "text": "", 
            "title": "Evaluation"
        }, 
        {
            "location": "/DAO-protocol/#token-sale-schemes", 
            "text": "", 
            "title": "Token Sale Schemes"
        }, 
        {
            "location": "/DAO-protocol/#reputation-flow-i", 
            "text": "", 
            "title": "Reputation Flow - I"
        }, 
        {
            "location": "/DAO-protocol/#contract-architecture", 
            "text": "A preliminary contract architecture looks something like this:", 
            "title": "Contract Architecture"
        }, 
        {
            "location": "/concepts/", 
            "text": "An Overview of Arc\n\n\nFor more: \nRead the whitepaper\n\n\nArc is the lower layer of the DAOStack. It consists of several smart contracts deployed on the Ethereum blockchain that define the basic building blocks and standard components that can be used to implement any DAO.\n\n\n\n\nThe DAOStack:\n1. \nEthereum\n - \nBase blockchain.\n\n2. ArcHives - \nA public curated database of \nelement\ns, organizations and a shared place for community collaboration\n.\n3. \nArc - This project\n\n4. \nArc.js\n - \nJavaScript library that talks to Arc, built on top of web3.js.\n\n5. \nAlchemy\n (and more...) - \nCollaborative DApps, built on top of DAOStack using Arc.js\n\n\nThe Structure of a DAO\n\n\nEach DAO consists of the following components:\n\n\n\n\nNative token\n - \nA Standard \nERC20 token\n that defines the value system of the DAO, participants are rewarded for their contributions based on this token\n.\n\n\nReputation\n system\n - \nSimilar to native token but is \nnon-transferable\n, the reputation is used system is used to assign an importance to participants and their votes\n.\n\n\nAvatar\n - \nThis is the public facing part of the DAO that handles the interaction of the DAO with the rest of the world(interacing with other DAOs, paying third party participants, etc...)\n.\n\n\nSubscribed \nElements\n - \nThe set of \nSchemes\n and \nGlobal Constraints\n the DAO consists of\n.\n\n\n\n\nThose components are organized in a single smart contract called a \nController\n.\n\n\nElements\n\n\nThe main configurable and extendable building blocks of DAOs are: \nSchemes\n and \nGlobal Constraints\n, which are collectively called \nelements\n.\n\n \nSchemes\n \ndefine the \"do's\" of the DAO, defining rules under which actions are taken, based on the participants input.\n Examples of Schemes are:\n    * Rewarding contributions if other participants recognize them as worthy.\n    * Voting on proposals and automatically executing the chosen proposal.\n\n \nGlobal constraints\n \ndefine the \"don't\" of the DAO, they define conditions that must always hold and can prevent an action from being taken if it violates these conditions.\n Examples of Global Constraints are:\n    * Limiting the amount of tokens or reputation that can be minted per day.\n    * Blacklisting certain participants from performing certain actions.\n\n\nArcHives and the Developer Ecosystem\n\n\nCompendium\n\n\nDevelopers can create and extend \nelements\n to define more rules that DAOs can subscribe to. \nThose \nelements\n can then be registered(for a fee) to a public database called \nCompendium\n.", 
            "title": "Concepts"
        }, 
        {
            "location": "/concepts/#an-overview-of-arc", 
            "text": "For more:  Read the whitepaper  Arc is the lower layer of the DAOStack. It consists of several smart contracts deployed on the Ethereum blockchain that define the basic building blocks and standard components that can be used to implement any DAO.   The DAOStack:\n1.  Ethereum  -  Base blockchain. \n2. ArcHives -  A public curated database of  element s, organizations and a shared place for community collaboration .\n3.  Arc - This project \n4.  Arc.js  -  JavaScript library that talks to Arc, built on top of web3.js. \n5.  Alchemy  (and more...) -  Collaborative DApps, built on top of DAOStack using Arc.js", 
            "title": "An Overview of Arc"
        }, 
        {
            "location": "/concepts/#the-structure-of-a-dao", 
            "text": "Each DAO consists of the following components:   Native token  -  A Standard  ERC20 token  that defines the value system of the DAO, participants are rewarded for their contributions based on this token .  Reputation  system  -  Similar to native token but is  non-transferable , the reputation is used system is used to assign an importance to participants and their votes .  Avatar  -  This is the public facing part of the DAO that handles the interaction of the DAO with the rest of the world(interacing with other DAOs, paying third party participants, etc...) .  Subscribed  Elements  -  The set of  Schemes  and  Global Constraints  the DAO consists of .   Those components are organized in a single smart contract called a  Controller .", 
            "title": "The Structure of a DAO"
        }, 
        {
            "location": "/concepts/#elements", 
            "text": "The main configurable and extendable building blocks of DAOs are:  Schemes  and  Global Constraints , which are collectively called  elements .   Schemes   define the \"do's\" of the DAO, defining rules under which actions are taken, based on the participants input.  Examples of Schemes are:\n    * Rewarding contributions if other participants recognize them as worthy.\n    * Voting on proposals and automatically executing the chosen proposal.   Global constraints   define the \"don't\" of the DAO, they define conditions that must always hold and can prevent an action from being taken if it violates these conditions.  Examples of Global Constraints are:\n    * Limiting the amount of tokens or reputation that can be minted per day.\n    * Blacklisting certain participants from performing certain actions.", 
            "title": "Elements"
        }, 
        {
            "location": "/concepts/#archives-and-the-developer-ecosystem", 
            "text": "", 
            "title": "ArcHives and the Developer Ecosystem"
        }, 
        {
            "location": "/concepts/#compendium", 
            "text": "Developers can create and extend  elements  to define more rules that DAOs can subscribe to. \nThose  elements  can then be registered(for a fee) to a public database called  Compendium .", 
            "title": "Compendium"
        }, 
        {
            "location": "/guides/", 
            "text": "This pages includes some examples of building DAOs using \nArc\n, and creating your own \nelements\n.\n\n\nPrerequisites: \n1. \nInstall \nArc\n in your project\n.\n2. Get familiar with the \nconcepts\n involved", 
            "title": "Guides"
        }, 
        {
            "location": "/roadmap/", 
            "text": "Roadmap for the DOAStack\n\n\nDAOStack is: \n\n\n\n\nA collective of programmers and blockchain experts that is growing and bootstrapping itself into a DAO while building the necessary blockchain (and other) code for itself. \n\n\nIt's, in a sense, a DAO accelerator, making the infrastructure for DAOs and helping them bootstrap. \n\n\nA blockchain-dev guild, offering blockchain (and perhaps more general) development service for others. \n\n\nEconomic framework for the cooperation of DAO-related companies in the blockchain space, by incentivizing the building and sharing of related components, design for interoperability and co-creation.\n\n\n\n\nWe aim to launch an MVP platform for a collaborative DAO before the end of Q1 and use it for further collaborative development.\n\n\nFormal and informal whitepaper\n\n\nThe whitepaper describes the general structure of a collaborative DAO and the particular protocol (and code) of DAOStack. The goal is to produce two versions: an \ninformal version\n that explains the general concepts and ideas in layman's terms, and a \nformal specification\n in which all aspects are rigorously defined. Rough content should include:\n\n\n\n\nBackground, intro, definitions, basics, vision, purpose, mission\n\n\nGovernance model (and its potential evolution) \n\n\nToken and business model, including investment scheme\n\n\nCode \n\n\n\n\nSmart Contracts\n\n\nThe core of the DAOStack is a set of \nSmart Contracts\n, written in Solidity, and deployed on the Ethereum blockchain. These contracts will implement at least the following functionality (and much more over time):\n\n\n\n\nMain architecture for upgradable, modular and secure distribution of Tokens and Reputation upon the vote of reputation holders\n\n\nVoting on (change of) of core value system\n\n\nVoting on distribution-scheme proposals\n\n\nA number of proposal schemas, including: Median voting, Yes/No proposal, investment distribution \n\n\nDocumentations\n\n\n\n\nSee also \nthis issue\n\n\nUI\n\n\nThe User Interface is a DApp written in JavaScript, that reputation holders can use to interact with the DAO. It will provide at least the following functionalities:\n\n\n\n\nMake proposals for distribution of tokens and reputation \n\n\nMake proposals to change the value system (i.e. the main contract)\n\n\nPropose contribution to be considered for Token and reputation awards\n\n\nVote for the above-mentioned proposals. Such votes can be either binary (yes/no), or with a ranged number (if vote is based on Reputation-Weighed Median, i.e. the amount to be distributed is determined as the median of all votes, weighed by reputation)\n\n\nAccess information about agents (tokens and reputation balances), objects (proposals, contributions, public votes) and value systems (and their properties).\n\n\nTransfer tokens\n\n\nDelegate reputation\n\n\n\n\nMarketing\n\n\nTowards going \"public\" and launching an ICO, the DAOStack with also need: \n\n\n\n\nA website explaining the project (including the above UI)\n\n\nSimple documentation, general story, blog and deck\n\n\nFirst set of  staked-in partners/companies\n\n\nEarly investors/projects", 
            "title": "Roadmap for the DOAStack"
        }, 
        {
            "location": "/roadmap/#roadmap-for-the-doastack", 
            "text": "DAOStack is:    A collective of programmers and blockchain experts that is growing and bootstrapping itself into a DAO while building the necessary blockchain (and other) code for itself.   It's, in a sense, a DAO accelerator, making the infrastructure for DAOs and helping them bootstrap.   A blockchain-dev guild, offering blockchain (and perhaps more general) development service for others.   Economic framework for the cooperation of DAO-related companies in the blockchain space, by incentivizing the building and sharing of related components, design for interoperability and co-creation.   We aim to launch an MVP platform for a collaborative DAO before the end of Q1 and use it for further collaborative development.", 
            "title": "Roadmap for the DOAStack"
        }, 
        {
            "location": "/roadmap/#formal-and-informal-whitepaper", 
            "text": "The whitepaper describes the general structure of a collaborative DAO and the particular protocol (and code) of DAOStack. The goal is to produce two versions: an  informal version  that explains the general concepts and ideas in layman's terms, and a  formal specification  in which all aspects are rigorously defined. Rough content should include:   Background, intro, definitions, basics, vision, purpose, mission  Governance model (and its potential evolution)   Token and business model, including investment scheme  Code", 
            "title": "Formal and informal whitepaper"
        }, 
        {
            "location": "/roadmap/#smart-contracts", 
            "text": "The core of the DAOStack is a set of  Smart Contracts , written in Solidity, and deployed on the Ethereum blockchain. These contracts will implement at least the following functionality (and much more over time):   Main architecture for upgradable, modular and secure distribution of Tokens and Reputation upon the vote of reputation holders  Voting on (change of) of core value system  Voting on distribution-scheme proposals  A number of proposal schemas, including: Median voting, Yes/No proposal, investment distribution   Documentations   See also  this issue", 
            "title": "Smart Contracts"
        }, 
        {
            "location": "/roadmap/#ui", 
            "text": "The User Interface is a DApp written in JavaScript, that reputation holders can use to interact with the DAO. It will provide at least the following functionalities:   Make proposals for distribution of tokens and reputation   Make proposals to change the value system (i.e. the main contract)  Propose contribution to be considered for Token and reputation awards  Vote for the above-mentioned proposals. Such votes can be either binary (yes/no), or with a ranged number (if vote is based on Reputation-Weighed Median, i.e. the amount to be distributed is determined as the median of all votes, weighed by reputation)  Access information about agents (tokens and reputation balances), objects (proposals, contributions, public votes) and value systems (and their properties).  Transfer tokens  Delegate reputation", 
            "title": "UI"
        }, 
        {
            "location": "/roadmap/#marketing", 
            "text": "Towards going \"public\" and launching an ICO, the DAOStack with also need:    A website explaining the project (including the above UI)  Simple documentation, general story, blog and deck  First set of  staked-in partners/companies  Early investors/projects", 
            "title": "Marketing"
        }, 
        {
            "location": "/headers/README/", 
            "text": "*\nBefore delving into the reference it is recommended to first get familiar with the \nconcepts\n involved.\n\n\nThis is where you'll find:\n- Detailed explanations of each source file in Arc.\n- Useful how-to's that demonstrate the use of each contract.\n- Technical reference documentation of each contract.\n\n\nDirectory Structure:", 
            "title": "README"
        }, 
        {
            "location": "/headers/controller/Avatar/", 
            "text": "The \nAvatar\n is the public facing entity a DAO exposes to interact with the outside world(vote on other DAOs, pay external actors, etc...)", 
            "title": "Avatar"
        }, 
        {
            "location": "/headers/controller/Controller/", 
            "text": "The \nController\n is the central part of a DAO, it glues together all other components in a single smart contract.", 
            "title": "Controller"
        }, 
        {
            "location": "/headers/controller/DAOToken/", 
            "text": "The \nDAO token\n is a simple token that is used by DAOs to assign value to, and reward participants actions. \nIt can be \nminted\n or \nburned\n by the DAO and also be \ndestroyed\n in the event of an upgrade to a better token or in other circumstances.", 
            "title": "DAOToken"
        }, 
        {
            "location": "/headers/controller/Reputation/", 
            "text": "A \nReputation\n is a way of assigning importance to participants and their votes. \n\nReputation\n is similar to regular tokens but with one crucial difference: \nIt is non-transferable\n.", 
            "title": "Reputation"
        }, 
        {
            "location": "/headers/globalConstraints/GlobalConstraintInterface/", 
            "text": "Global Constraint\ns define certain conditions the DAO must hold at all times. More concretely, they define \npre\n \n \npost\n conditions that must hold before \n after any action the DAO takes.\nThey are meant to be \nUniversal\n(i.e. only one deployed instance), but do not strictly need to be.\n\n\nWhen an action is about to happen, the \nController\n consults the \nGlobal Constraint\n and runs it's \npre\n \n \npost\n methods to see if the conditions hold.\nIt passes the following parameters to \npre\n \n \npost\n:\n1. \naddress scheme\n - the scheme that performs the action.\n2. \nbytes32 hash\n - a hash of the parameters to be used.\n3. \nbytes32 method\n - what kind of event occurred, available \nmethod\ns:\n    - \nmintReputation\n\n    - \nmintTokens\n\n    - \nregisterScheme\n\n    - \nunregisterScheme\n\n    - \nsendEther\n\n    - \nexternalTokenTransfer\n\n    - \nexternalTokenTransferFrom\n\n    - \nexternalTokenIncreaseApproval\n\n    - \nexternalTokenDecreaseApproval\n\n    - \ngenericAction\n - all other actions.\n\n\nExamples\n\n\nA simple time-lock constraint for registering schemes\n\n\nDefining it\n\n\nWe are going to define a simple global constraint that disallows registering new \nScheme\ns during a certain time period.\n\n\nimport 'daostack-arc/contracts/globalConstraints/GlobalConstraintInterface.sol';\n\ncontract SchemeRegisterTimeLock is GlobalConstraintInterface{\n\n    /* Define how our parameters look like*/\n    struct Params{\n        uint start;\n        uint end;\n    }\n\n    mapping(bytes32=\nParams) public params;\n\n    function setParams(uint start, uint end) returns(bytes32){\n        bytes32 hash = keccak256(start,end);\n        params[hash].start = start;\n        params[hash].end = end;\n        return hash;\n    }\n\n    function pre(address scheme, bytes32 hash, bytes32 method){\n        /* This runs *before* an action is taken */\n\n        /* make sure no registerations occur between `start` and `end`*/\n        if(method == \nregisterScheme\n \n            \n params[hash].start \n= now \n            \n now \n= params[hash].end)\n                return false;\n\n        return true;\n    }\n\n    function post(address scheme, bytes32 hash, bytes32 method){\n        /* This runs *after* an action is taken */\n        return true;\n    }\n}\n\n\n\n\nRegistering it with the controller\n\n\nRegistering a global constraint is done inside a method of a \nScheme\n which is permitted to add/remove global constraints. \n\n\nSchemeRegisterTimeLock gc = new SchemeRegisterTimeLock();\n\n/* Somewhere inside a scheme with permission to add global constraints */\nbytes32 hash = gc.setParameters(now,now + 2 days)\ncontoller.addGlobalConstraint(address(myGlobalConstraint),hash)", 
            "title": "GlobalConstraintInterface"
        }, 
        {
            "location": "/headers/globalConstraints/GlobalConstraintInterface/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/headers/globalConstraints/GlobalConstraintInterface/#a-simple-time-lock-constraint-for-registering-schemes", 
            "text": "", 
            "title": "A simple time-lock constraint for registering schemes"
        }, 
        {
            "location": "/headers/globalConstraints/GlobalConstraintInterface/#defining-it", 
            "text": "We are going to define a simple global constraint that disallows registering new  Scheme s during a certain time period.  import 'daostack-arc/contracts/globalConstraints/GlobalConstraintInterface.sol';\n\ncontract SchemeRegisterTimeLock is GlobalConstraintInterface{\n\n    /* Define how our parameters look like*/\n    struct Params{\n        uint start;\n        uint end;\n    }\n\n    mapping(bytes32= Params) public params;\n\n    function setParams(uint start, uint end) returns(bytes32){\n        bytes32 hash = keccak256(start,end);\n        params[hash].start = start;\n        params[hash].end = end;\n        return hash;\n    }\n\n    function pre(address scheme, bytes32 hash, bytes32 method){\n        /* This runs *before* an action is taken */\n\n        /* make sure no registerations occur between `start` and `end`*/\n        if(method ==  registerScheme  \n              params[hash].start  = now \n              now  = params[hash].end)\n                return false;\n\n        return true;\n    }\n\n    function post(address scheme, bytes32 hash, bytes32 method){\n        /* This runs *after* an action is taken */\n        return true;\n    }\n}", 
            "title": "Defining it"
        }, 
        {
            "location": "/headers/globalConstraints/GlobalConstraintInterface/#registering-it-with-the-controller", 
            "text": "Registering a global constraint is done inside a method of a  Scheme  which is permitted to add/remove global constraints.   SchemeRegisterTimeLock gc = new SchemeRegisterTimeLock();\n\n/* Somewhere inside a scheme with permission to add global constraints */\nbytes32 hash = gc.setParameters(now,now + 2 days)\ncontoller.addGlobalConstraint(address(myGlobalConstraint),hash)", 
            "title": "Registering it with the controller"
        }, 
        {
            "location": "/headers/globalConstraints/TokenCapGC/", 
            "text": "TokenCapGC\n is a simple global constraint that limits the number of tokens that can be issued.\n\n\nUsage\n\n\nTokenCapGC gc = new TokenCapGC();\n\n/* some where inside a scheme with relevent permissions */\nbytes32 hash = gc.setParameters(contoller.nativeToken,100) /*limit DAO token issuance to 100*/\ncontroller.addGlobalConstraint(gc,hash)", 
            "title": "TokenCapGC"
        }, 
        {
            "location": "/headers/globalConstraints/TokenCapGC/#usage", 
            "text": "TokenCapGC gc = new TokenCapGC();\n\n/* some where inside a scheme with relevent permissions */\nbytes32 hash = gc.setParameters(contoller.nativeToken,100) /*limit DAO token issuance to 100*/\ncontroller.addGlobalConstraint(gc,hash)", 
            "title": "Usage"
        }, 
        {
            "location": "/headers/universalSchemes/GenesisScheme/", 
            "text": "The \nGenesis Scheme\n is a special scheme that creates a brand new DAO and initializes it with a set of default \nSchemes\n.\nIt is the main way to create new DAOs on the DAOStack.\n\n\nUsage\n\n\nStep 1: Create the organization\n\n\nGenesisScheme gs = new GenesisScheme();\naddress avatar = \n    gs.forgeOrg(\n        \nOrganization name\n,\n        \nToken name\n,\n        \nTKN\n, /*Token symbol*/\n        [me,you], /*founders addresses*/\n        [5,7], /*founders initial token allocation*/\n        [10,12], /*founders initial reputation allocation*/\n    );\n\n\n\n\nStep 2: Configure some schemes\n\n\nContributionReward crScheme = new ContributionReward();\nbytes32 paramsHash = crScheme.setParameters(...);\n\nbytes4 permission = 0; /* set to zero = no special permissions */\n    /* permission is a 4 bit number indicating what kind of operations can the scheme do in this organization:\n        1st bit - irrelevent to us.\n        2nd bit - can register other schemes.\n        3rd bit - can add/remove global constraints.\n        4th bit - can upgrade controller. \n    */\n\n\n\n\nStep 3: Register schemes with the organization\n\n\ngs.setSchemes(\n    Avatar(avatar),\n    [address(crSchemes)], /* schemes to regsiter*/\n    [paramsHash], /* params hash */\n    [true], /* is the scheme a universal scheme */\n    [permission] \n);", 
            "title": "GenesisScheme"
        }, 
        {
            "location": "/headers/universalSchemes/GenesisScheme/#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/headers/universalSchemes/GenesisScheme/#step-1-create-the-organization", 
            "text": "GenesisScheme gs = new GenesisScheme();\naddress avatar = \n    gs.forgeOrg(\n         Organization name ,\n         Token name ,\n         TKN , /*Token symbol*/\n        [me,you], /*founders addresses*/\n        [5,7], /*founders initial token allocation*/\n        [10,12], /*founders initial reputation allocation*/\n    );", 
            "title": "Step 1: Create the organization"
        }, 
        {
            "location": "/headers/universalSchemes/GenesisScheme/#step-2-configure-some-schemes", 
            "text": "ContributionReward crScheme = new ContributionReward();\nbytes32 paramsHash = crScheme.setParameters(...);\n\nbytes4 permission = 0; /* set to zero = no special permissions */\n    /* permission is a 4 bit number indicating what kind of operations can the scheme do in this organization:\n        1st bit - irrelevent to us.\n        2nd bit - can register other schemes.\n        3rd bit - can add/remove global constraints.\n        4th bit - can upgrade controller. \n    */", 
            "title": "Step 2: Configure some schemes"
        }, 
        {
            "location": "/headers/universalSchemes/GenesisScheme/#step-3-register-schemes-with-the-organization", 
            "text": "gs.setSchemes(\n    Avatar(avatar),\n    [address(crSchemes)], /* schemes to regsiter*/\n    [paramsHash], /* params hash */\n    [true], /* is the scheme a universal scheme */\n    [permission] \n);", 
            "title": "Step 3: Register schemes with the organization"
        }, 
        {
            "location": "/headers/universalSchemes/UniversalSchemeInterface/", 
            "text": "A Scheme defines rules the DAO follows.\nA special \nScheme\n called the \nGenesis Scheme\n takes care of creating a brand new DAO.\n\n\nUniversal Scheme\n\n\nUniversal Schemes\n are schemes that inherit from \nUniversalSchemeInterface\n and are supposed to be deployed once.\n\n\nNon-universal Scheme\n\n\nNon-Universal Schemes\n are schemes that do not follow any standard and do not inherit from \nUniversalSchemeInterface", 
            "title": "UniversalSchemeInterface"
        }, 
        {
            "location": "/headers/universalSchemes/UniversalSchemeInterface/#universal-scheme", 
            "text": "Universal Schemes  are schemes that inherit from  UniversalSchemeInterface  and are supposed to be deployed once.", 
            "title": "Universal Scheme"
        }, 
        {
            "location": "/headers/universalSchemes/UniversalSchemeInterface/#non-universal-scheme", 
            "text": "Non-Universal Schemes  are schemes that do not follow any standard and do not inherit from  UniversalSchemeInterface", 
            "title": "Non-universal Scheme"
        }, 
        {
            "location": "/ref/README/", 
            "text": "Table of Contents\n\n\n*\nBefore delving into the reference it is recommended to first get familiar with the \nconcepts\n involved.\n\n\nThis is where you'll find:\n- Detailed explanations of each source file in Arc.\n- Useful how-to's that demonstrate the use of each contract.\n- Technical reference documentation of each contract.\n\n\nDirectory Structure:\n- VotingMachines/ \n  - \nAbsoluteVote\n\n  - \nEmergentVoteScheme\n\n  - \nIntVoteInterface\n\n  - \nQuorumVote\n\n- controller/ \n  - \nActionInterface\n\n  - \nAvatar\n\n  - \nController\n\n  - \nControllerInterface\n\n  - \nDAOToken\n\n  - \nReputation\n\n  - \nUController\n\n- globalConstraints/ \n  - \nGlobalConstraintInterface\n\n  - \nTokenCapGC\n\n- test/ \n  - \nActionMock\n\n  - \nDebug\n\n  - \nExecutableTest\n\n  - \nGlobalConstraintMock\n\n  - \nUniversalSchemeMock\n\n- universalSchemes/ \n  - \nContributionReward\n\n  - \nExecutableInterface\n\n  - \nGenesisScheme\n\n  - \nGlobalConstraintRegistrar\n\n  - \nOrganizationRegister\n\n  - \nSchemeRegistrar\n\n  - \nMirrorContractICO\n\n  - \nSimpleICO\n\n  - \nUniversalScheme\n\n  - \nUniversalSchemeInterface\n\n  - \nUpgradeScheme\n\n  - \nVestingScheme\n\n  - \nVoteInOrganizationScheme", 
            "title": "Table of Contents"
        }, 
        {
            "location": "/ref/README/#table-of-contents", 
            "text": "* Before delving into the reference it is recommended to first get familiar with the  concepts  involved.  This is where you'll find:\n- Detailed explanations of each source file in Arc.\n- Useful how-to's that demonstrate the use of each contract.\n- Technical reference documentation of each contract.  Directory Structure:\n- VotingMachines/ \n  -  AbsoluteVote \n  -  EmergentVoteScheme \n  -  IntVoteInterface \n  -  QuorumVote \n- controller/ \n  -  ActionInterface \n  -  Avatar \n  -  Controller \n  -  ControllerInterface \n  -  DAOToken \n  -  Reputation \n  -  UController \n- globalConstraints/ \n  -  GlobalConstraintInterface \n  -  TokenCapGC \n- test/ \n  -  ActionMock \n  -  Debug \n  -  ExecutableTest \n  -  GlobalConstraintMock \n  -  UniversalSchemeMock \n- universalSchemes/ \n  -  ContributionReward \n  -  ExecutableInterface \n  -  GenesisScheme \n  -  GlobalConstraintRegistrar \n  -  OrganizationRegister \n  -  SchemeRegistrar \n  -  MirrorContractICO \n  -  SimpleICO \n  -  UniversalScheme \n  -  UniversalSchemeInterface \n  -  UpgradeScheme \n  -  VestingScheme \n  -  VoteInOrganizationScheme", 
            "title": "Table of Contents"
        }, 
        {
            "location": "/ref/VotingMachines/AbsoluteVote/", 
            "text": "contract\n AbsoluteVote (\nsource\n)\n\n\nCode deposit cost: \nless than 862000 gas.\n\n\nExecution cost: \nless than 891 gas.\n\n\nTotal deploy cost(deposit + execution): \nless than 862891 gas.\n\n\n\n\nReference\n\n\n\n\n\n\nConstructors\n\n\n\n\n\n\nEvents\n\n\n\n\nLogVoteProposal\n\n\nLogNewProposal\n\n\nLogExecuteProposal\n\n\nLogCancelVoting\n\n\nLogCancelProposal\n\n\n\n\n\n\nFallback\n\n\nFunctions\n\n\nvotesStatus\n\n\nsetParameters\n\n\nvoteInfo\n\n\nvoteWithSpecifiedAmounts\n\n\nvote\n\n\npropose\n\n\nproposals\n\n\nparameters\n\n\nownerVote\n\n\nisVotable\n\n\ngetParametersHash\n\n\ngetNumberOfChoices\n\n\nexecute\n\n\ncancelVote\n\n\ncancelProposal\n\n\n\n\n\n\n\n\nConstructors\n\n\nEvents\n\n\nevent\n LogVoteProposal\n\n\nParams:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_voter\n \nof type address\n\n3. \n_vote\n \nof type uint256\n\n4. \n_reputation\n \nof type uint256\n\n5. \n_isOwnerVote\n \nof type bool\n\n\nevent\n LogNewProposal\n\n\nParams:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_numOfChoices\n \nof type uint256\n\n3. \n_proposer\n \nof type address\n\n4. \n_paramsHash\n \nof type bytes32\n\n\nevent\n LogExecuteProposal\n\n\nParams:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_decision\n \nof type uint256\n\n\nevent\n LogCancelVoting\n\n\nParams:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_voter\n \nof type address\n\n\nevent\n LogCancelProposal\n\n\nParams:\n\n1. \n_proposalId\n \nof type bytes32\n\n\nFallback\n\n\nNothing\n\n\nFunctions\n\n\nfunction\n votesStatus\n\n\n\n\nvotesStatus returns the number of yes, no, and abstain and if the proposal is ended of a given proposal id\n\n\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32- the ID of the proposal\n\n\n\nvotes array of votes for each choice\n\n\nfunction\n setParameters\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_reputationSystem\n \nof type address\n\n2. \n_precReq\n \nof type uint256\n\n3. \n_allowOwner\n \nof type bool\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n voteInfo\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_voter\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type uint256\n\n2. \nunnamed\n \nof type uint256\n\n\nfunction\n voteWithSpecifiedAmounts\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_vote\n \nof type uint256\n\n3. \n_rep\n \nof type uint256\n\n4. \nunnamed\n \nof type uint256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n vote\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_vote\n \nof type uint256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n propose\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_numOfChoices\n \nof type uint256\n\n2. \n_paramsHash\n \nof type bytes32\n\n3. \n_avatar\n \nof type address\n\n4. \n_executable\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n proposals\n\n\nExecution cost: \nless than 2188 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type bytes32\n\n\nReturns:\n\n1. \nowner\n \nof type address\n\n2. \navatar\n \nof type address\n\n3. \nnumOfChoices\n \nof type uint256\n\n4. \nexecutable\n \nof type address\n\n5. \nparamsHash\n \nof type bytes32\n\n6. \ntotalVotes\n \nof type uint256\n\n7. \nopen\n \nof type bool\n\n\nfunction\n parameters\n\n\nExecution cost: \nless than 1169 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type bytes32\n\n\nReturns:\n\n1. \nreputationSystem\n \nof type address\n\n2. \nprecReq\n \nof type uint256\n\n3. \nallowOwner\n \nof type bool\n\n\nfunction\n ownerVote\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_vote\n \nof type uint256\n\n3. \n_voter\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n isVotable\n\n\n\n\nisVotable check if the proposal is votable\n\n\n\n\nExecution cost: \nless than 790 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32- the ID of the proposal\n\n\n\nbool true or false\n\n\nfunction\n getParametersHash\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | pure\n\n\nInputs:\n\n1. \n_reputationSystem\n \nof type address\n\n2. \n_precReq\n \nof type uint256\n\n3. \n_allowOwner\n \nof type bool\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n getNumberOfChoices\n\n\n\n\ngetNumberOfChoices returns the number of choices possible in this proposal\n\n\n\n\nExecution cost: \nless than 734 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32- the ID of the proposal\n\n\n\nuint that contains number of choices\n\n\nfunction\n execute\n\n\n\n\nexecute check if the proposal has been decided, and if so, execute the proposal\n\n\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32- the id of the proposal\n\n\n\nbool true - the proposal has been executed\n             false - otherwise.\n\n\nfunction\n cancelVote\n\n\n\n\nCancel the vote of the msg.sender: subtract the reputation amount from the votes\n and delete the voter from the proposal struct\n\n\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32- id of the proposal\n\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n cancelProposal\n\n\n\n\nCancel a proposal, only the owner can call this function and only if allowOwner flag is true.\n\n\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32- the proposal ID\n\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool", 
            "title": "*contract* AbsoluteVote ([source](https://github.com/daostack/daostack/tree/master/./contracts/VotingMachines/AbsoluteVote.sol))"
        }, 
        {
            "location": "/ref/VotingMachines/AbsoluteVote/#contract-absolutevote-source", 
            "text": "Code deposit cost:  less than 862000 gas.  Execution cost:  less than 891 gas.  Total deploy cost(deposit + execution):  less than 862891 gas.", 
            "title": "contract AbsoluteVote (source)"
        }, 
        {
            "location": "/ref/VotingMachines/AbsoluteVote/#reference", 
            "text": "Constructors    Events   LogVoteProposal  LogNewProposal  LogExecuteProposal  LogCancelVoting  LogCancelProposal    Fallback  Functions  votesStatus  setParameters  voteInfo  voteWithSpecifiedAmounts  vote  propose  proposals  parameters  ownerVote  isVotable  getParametersHash  getNumberOfChoices  execute  cancelVote  cancelProposal", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/VotingMachines/AbsoluteVote/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/VotingMachines/AbsoluteVote/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/VotingMachines/AbsoluteVote/#event-logvoteproposal", 
            "text": "Params: \n1.  _proposalId   of type bytes32 \n2.  _voter   of type address \n3.  _vote   of type uint256 \n4.  _reputation   of type uint256 \n5.  _isOwnerVote   of type bool", 
            "title": "event LogVoteProposal"
        }, 
        {
            "location": "/ref/VotingMachines/AbsoluteVote/#event-lognewproposal", 
            "text": "Params: \n1.  _proposalId   of type bytes32 \n2.  _numOfChoices   of type uint256 \n3.  _proposer   of type address \n4.  _paramsHash   of type bytes32", 
            "title": "event LogNewProposal"
        }, 
        {
            "location": "/ref/VotingMachines/AbsoluteVote/#event-logexecuteproposal", 
            "text": "Params: \n1.  _proposalId   of type bytes32 \n2.  _decision   of type uint256", 
            "title": "event LogExecuteProposal"
        }, 
        {
            "location": "/ref/VotingMachines/AbsoluteVote/#event-logcancelvoting", 
            "text": "Params: \n1.  _proposalId   of type bytes32 \n2.  _voter   of type address", 
            "title": "event LogCancelVoting"
        }, 
        {
            "location": "/ref/VotingMachines/AbsoluteVote/#event-logcancelproposal", 
            "text": "Params: \n1.  _proposalId   of type bytes32", 
            "title": "event LogCancelProposal"
        }, 
        {
            "location": "/ref/VotingMachines/AbsoluteVote/#fallback", 
            "text": "Nothing", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/VotingMachines/AbsoluteVote/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/VotingMachines/AbsoluteVote/#function-votesstatus", 
            "text": "votesStatus returns the number of yes, no, and abstain and if the proposal is ended of a given proposal id   Execution cost:  No bound available.  constant | view  Inputs: \n1.  _proposalId   of type bytes32- the ID of the proposal  votes array of votes for each choice", 
            "title": "function votesStatus"
        }, 
        {
            "location": "/ref/VotingMachines/AbsoluteVote/#function-setparameters", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _reputationSystem   of type address \n2.  _precReq   of type uint256 \n3.  _allowOwner   of type bool  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function setParameters"
        }, 
        {
            "location": "/ref/VotingMachines/AbsoluteVote/#function-voteinfo", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs: \n1.  _proposalId   of type bytes32 \n2.  _voter   of type address  Returns: \n1.  unnamed   of type uint256 \n2.  unnamed   of type uint256", 
            "title": "function voteInfo"
        }, 
        {
            "location": "/ref/VotingMachines/AbsoluteVote/#function-votewithspecifiedamounts", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32 \n2.  _vote   of type uint256 \n3.  _rep   of type uint256 \n4.  unnamed   of type uint256  Returns: \n1.  unnamed   of type bool", 
            "title": "function voteWithSpecifiedAmounts"
        }, 
        {
            "location": "/ref/VotingMachines/AbsoluteVote/#function-vote", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32 \n2.  _vote   of type uint256  Returns: \n1.  unnamed   of type bool", 
            "title": "function vote"
        }, 
        {
            "location": "/ref/VotingMachines/AbsoluteVote/#function-propose", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _numOfChoices   of type uint256 \n2.  _paramsHash   of type bytes32 \n3.  _avatar   of type address \n4.  _executable   of type address  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function propose"
        }, 
        {
            "location": "/ref/VotingMachines/AbsoluteVote/#function-proposals", 
            "text": "Execution cost:  less than 2188 gas.  constant | view  Inputs: \n1.  unnamed   of type bytes32  Returns: \n1.  owner   of type address \n2.  avatar   of type address \n3.  numOfChoices   of type uint256 \n4.  executable   of type address \n5.  paramsHash   of type bytes32 \n6.  totalVotes   of type uint256 \n7.  open   of type bool", 
            "title": "function proposals"
        }, 
        {
            "location": "/ref/VotingMachines/AbsoluteVote/#function-parameters", 
            "text": "Execution cost:  less than 1169 gas.  constant | view  Inputs: \n1.  unnamed   of type bytes32  Returns: \n1.  reputationSystem   of type address \n2.  precReq   of type uint256 \n3.  allowOwner   of type bool", 
            "title": "function parameters"
        }, 
        {
            "location": "/ref/VotingMachines/AbsoluteVote/#function-ownervote", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32 \n2.  _vote   of type uint256 \n3.  _voter   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function ownerVote"
        }, 
        {
            "location": "/ref/VotingMachines/AbsoluteVote/#function-isvotable", 
            "text": "isVotable check if the proposal is votable   Execution cost:  less than 790 gas.  constant | view  Inputs: \n1.  _proposalId   of type bytes32- the ID of the proposal  bool true or false", 
            "title": "function isVotable"
        }, 
        {
            "location": "/ref/VotingMachines/AbsoluteVote/#function-getparametershash", 
            "text": "Execution cost:  No bound available.  constant | pure  Inputs: \n1.  _reputationSystem   of type address \n2.  _precReq   of type uint256 \n3.  _allowOwner   of type bool  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function getParametersHash"
        }, 
        {
            "location": "/ref/VotingMachines/AbsoluteVote/#function-getnumberofchoices", 
            "text": "getNumberOfChoices returns the number of choices possible in this proposal   Execution cost:  less than 734 gas.  constant | view  Inputs: \n1.  _proposalId   of type bytes32- the ID of the proposal  uint that contains number of choices", 
            "title": "function getNumberOfChoices"
        }, 
        {
            "location": "/ref/VotingMachines/AbsoluteVote/#function-execute", 
            "text": "execute check if the proposal has been decided, and if so, execute the proposal   Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32- the id of the proposal  bool true - the proposal has been executed\n             false - otherwise.", 
            "title": "function execute"
        }, 
        {
            "location": "/ref/VotingMachines/AbsoluteVote/#function-cancelvote", 
            "text": "Cancel the vote of the msg.sender: subtract the reputation amount from the votes\n and delete the voter from the proposal struct   Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32- id of the proposal  Returns:  Nothing", 
            "title": "function cancelVote"
        }, 
        {
            "location": "/ref/VotingMachines/AbsoluteVote/#function-cancelproposal", 
            "text": "Cancel a proposal, only the owner can call this function and only if allowOwner flag is true.   Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32- the proposal ID  Returns: \n1.  unnamed   of type bool", 
            "title": "function cancelProposal"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/", 
            "text": "contract\n EmergentVoteScheme (\nsource\n)\n\n\nCode deposit cost: \nless than 1915600 gas.\n\n\nExecution cost: \nless than 22394 gas.\n\n\nTotal deploy cost(deposit + execution): \nless than 1937994 gas.\n\n\n\n\nReference\n\n\n\n\nConstructors\n\n\nEmergentVoteScheme()\n\n\n\n\n\n\nEvents\n\n\nOwnershipTransferred\n\n\nLogVoteProposal\n\n\nLogNewProposal\n\n\nLogNewProposal\n\n\nLogExecuteProposal\n\n\nLogCancelVoting\n\n\nLogCancelProposal\n\n\n\n\n\n\nFallback\n\n\nFunctions\n\n\nMAX_NUM_OF_CHOICES\n\n\norganizationsParameters\n\n\nvoteInfo\n\n\ntransferOwnership\n\n\nsetProposalParameters\n\n\nupdateParameters\n\n\nproposals\n\n\nownerVote\n\n\nvoteWithSpecifiedAmounts\n\n\nproposalScore\n\n\nsetOrgParameters\n\n\nproposalsParameters\n\n\nvote\n\n\nproposalStatus\n\n\npropose\n\n\nowner\n\n\ngetProposalParametersHash\n\n\nfindMinScore\n\n\norganizations\n\n\ngetNumberOfChoices\n\n\nhashedParameters\n\n\ngetOrgParametersHash\n\n\nisVotable\n\n\nmoveTopAwaitingBoostMode\n\n\nfindMaxScore\n\n\nfindInArray\n\n\nexecute\n\n\ncancelVote\n\n\ncancelProposal\n\n\nboostProposal\n\n\n\n\n\n\n\n\nConstructors\n\n\nconstructor\n EmergentVoteScheme()\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nParams:\n\n\nNothing\n\n\nEvents\n\n\nevent\n OwnershipTransferred\n\n\nParams:\n\n1. \npreviousOwner\n \nof type address\n\n2. \nnewOwner\n \nof type address\n\n\nevent\n LogVoteProposal\n\n\nParams:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_voter\n \nof type address\n\n3. \n_vote\n \nof type uint256\n\n4. \n_reputation\n \nof type uint256\n\n5. \n_isOwnerVote\n \nof type bool\n\n\nevent\n LogNewProposal\n\n\nParams:\n\n1. \nproposalId\n \nof type bytes32\n\n\nevent\n LogNewProposal\n\n\nParams:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_proposer\n \nof type address\n\n3. \n_paramsHash\n \nof type bytes32\n\n\nevent\n LogExecuteProposal\n\n\nParams:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_decision\n \nof type uint256\n\n\nevent\n LogCancelVoting\n\n\nParams:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_voter\n \nof type address\n\n\nevent\n LogCancelProposal\n\n\nParams:\n\n1. \n_proposalId\n \nof type bytes32\n\n\nFallback\n\n\nNothing\n\n\nFunctions\n\n\nfunction\n MAX_NUM_OF_CHOICES\n\n\nExecution cost: \nless than 566 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type uint256\n\n\nfunction\n organizationsParameters\n\n\nExecution cost: \nless than 2370 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type bytes32\n\n\nReturns:\n\n1. \nreputationSystem\n \nof type address\n\n2. \nboostToken\n \nof type address\n\n3. \nbeneficiary\n \nof type address\n\n4. \nattentionBandwidth\n \nof type uint256\n\n5. \nminBoostTimeFrame\n \nof type uint256\n\n6. \nmaxBoostTimeFrame\n \nof type uint256\n\n7. \nminBoost\n \nof type uint256\n\n8. \nallowOwner\n \nof type bool\n\n\nfunction\n voteInfo\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_voter\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type uint256[2]\n\n\nfunction\n transferOwnership\n\n\n\n\nAllows the current owner to transfer control of the contract to a newOwner.\n\n\n\n\nExecution cost: \nless than 23470 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \nnewOwner\n \nof type address- The address to transfer ownership to.\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n setProposalParameters\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_precReq\n \nof type uint256\n\n2. \n_quorum\n \nof type uint256\n\n3. \n_boostTimeFrame\n \nof type uint256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n updateParameters\n\n\nExecution cost: \nless than 20616 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_hashedParameters\n \nof type bytes32\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n proposals\n\n\nExecution cost: \nless than 2823 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type bytes32\n\n\nReturns:\n\n1. \nowner\n \nof type address\n\n2. \navatar\n \nof type address\n\n3. \nnumOfChoices\n \nof type uint256\n\n4. \nexecutable\n \nof type address\n\n5. \nparamsHash\n \nof type bytes32\n\n6. \ntotalVotes\n \nof type uint256\n\n7. \nopened\n \nof type bool\n\n8. \nisBoostModeActive\n \nof type bool\n\n9. \nisAwaitingBoost\n \nof type bool\n\n10. \nclosingTime\n \nof type uint256\n\n11. \nboostedFunds\n \nof type uint256\n\n\nfunction\n ownerVote\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_vote\n \nof type uint256\n\n3. \n_voter\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n voteWithSpecifiedAmounts\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_vote\n \nof type uint256\n\n3. \n_rep\n \nof type uint256\n\n4. \nunnamed\n \nof type uint256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n proposalScore\n\n\n\n\nGet the score of a specific proposal\n The score is evaluated by multiplying the number of votes with the funds that are invested\n\n\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32- the proposal ID\n\n\n\nuint Proposal's score\n\n\nfunction\n setOrgParameters\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_reputationSystem\n \nof type address\n\n2. \n_boostToken\n \nof type address\n\n3. \n_beneficiary\n \nof type address\n\n4. \n_attentionBandwidth\n \nof type uint256\n\n5. \n_minBoostTimeFrame\n \nof type uint256\n\n6. \n_maxBoostTimeFrame\n \nof type uint256\n\n7. \n_minBoost\n \nof type uint256\n\n8. \n_allowOwner\n \nof type bool\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n proposalsParameters\n\n\nExecution cost: \nless than 1233 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type bytes32\n\n\nReturns:\n\n1. \nprecReq\n \nof type uint256\n\n2. \nquorum\n \nof type uint256\n\n3. \nboostTimeFrame\n \nof type uint256\n\n\nfunction\n vote\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_vote\n \nof type uint256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n proposalStatus\n\n\n\n\nproposalStatus returns the number of yes, no, and abstain and if the proposal is ended of a given proposal id\n\n\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32- the ID of the proposal\n\n\n\nint[10] array that contains the proposal's info:\n number of yes, no, and abstain, and if the voting for the proposal has ended\n\n\nfunction\n propose\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_numOfChoices\n \nof type uint256\n\n2. \n_paramsHash\n \nof type bytes32\n\n3. \n_avatar\n \nof type address\n\n4. \n_executable\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n owner\n\n\nExecution cost: \nless than 941 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type address\n\n\nfunction\n getProposalParametersHash\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | pure\n\n\nInputs:\n\n1. \n_precReq\n \nof type uint256\n\n2. \n_quorum\n \nof type uint256\n\n3. \n_boostTimeFrame\n \nof type uint256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n findMinScore\n\n\n\n\nGet the minimum score of a given list proposal ids\n\n\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_idsArray\n \nof type bytes32[]- the proposal ids that will be checked\n\n\n\nuint index the index of the proposal containing the smallest score in the list\nuint min the minimum score in the list\n\n\nfunction\n organizations\n\n\nExecution cost: \nless than 1104 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type address\n\n\nReturns:\n\n1. \nisRegistered\n \nof type bool\n\n2. \nboostedProposals\n \nof type uint256\n\n\nfunction\n getNumberOfChoices\n\n\nExecution cost: \nless than 932 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n\nReturns:\n\n1. \nunnamed\n \nof type uint256\n\n\nfunction\n hashedParameters\n\n\nExecution cost: \nless than 1052 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n getOrgParametersHash\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | pure\n\n\nInputs:\n\n1. \n_reputationSystem\n \nof type address\n\n2. \n_boostToken\n \nof type address\n\n3. \n_beneficiary\n \nof type address\n\n4. \n_attentionBandwidth\n \nof type uint256\n\n5. \n_minBoostTimeFrame\n \nof type uint256\n\n6. \n_maxBoostTimeFrame\n \nof type uint256\n\n7. \n_minBoost\n \nof type uint256\n\n8. \n_allowOwner\n \nof type bool\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n isVotable\n\n\n\n\nisVotable check if the proposal is open\n\n\n\n\nExecution cost: \nless than 1010 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32- the ID of the proposal\n\n\n\nbool true or false\n\n\nfunction\n moveTopAwaitingBoostMode\n\n\n\n\nMove the top proposal form the waiting list to the boosted proposals\n\n\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_avatar\n \nof type address- avatar of the organization\n\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n findMaxScore\n\n\n\n\nGet the maximum score of a given list proposal ids\n\n\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_idsArray\n \nof type bytes32[]- the proposal ids that will be checked\n\n\n\nuint index the index of the proposal containing the highest score in the list\nuint max the maximum score in the list\n\n\nfunction\n findInArray\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | pure\n\n\nInputs:\n\n1. \n_idsArray\n \nof type bytes32[]\n\n2. \n_id\n \nof type bytes32\n\n\nReturns:\n\n1. \nisFound\n \nof type bool\n\n2. \nindex\n \nof type uint256\n\n\nfunction\n execute\n\n\n\n\ncheck if the proposal has been decided, and if so, execute the proposal\n\n\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32- the id of the proposal\n\n\n\nbool is the proposal has been executed or not?\n\n\nfunction\n cancelVote\n\n\n\n\nCancel the vote of the msg.sender: subtract the reputation amount from the votes\n and delete the voter from the proposal struct\n\n\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32- id of the proposal\n\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n cancelProposal\n\n\n\n\nCancel a proposal, only the owner can call this function and only if allowOwner flag is true.\n\n\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32- the proposal ID\n\n\n\nbool True if the proposal is canceled and False if it wasn't\n\n\nfunction\n boostProposal\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_boostValue\n \nof type uint256\n\n\nReturns:\n\n\nNothing", 
            "title": "*contract* EmergentVoteScheme ([source](https://github.com/daostack/daostack/tree/master/./contracts/VotingMachines/EmergentVoteScheme.sol))"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#contract-emergentvotescheme-source", 
            "text": "Code deposit cost:  less than 1915600 gas.  Execution cost:  less than 22394 gas.  Total deploy cost(deposit + execution):  less than 1937994 gas.", 
            "title": "contract EmergentVoteScheme (source)"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#reference", 
            "text": "Constructors  EmergentVoteScheme()    Events  OwnershipTransferred  LogVoteProposal  LogNewProposal  LogNewProposal  LogExecuteProposal  LogCancelVoting  LogCancelProposal    Fallback  Functions  MAX_NUM_OF_CHOICES  organizationsParameters  voteInfo  transferOwnership  setProposalParameters  updateParameters  proposals  ownerVote  voteWithSpecifiedAmounts  proposalScore  setOrgParameters  proposalsParameters  vote  proposalStatus  propose  owner  getProposalParametersHash  findMinScore  organizations  getNumberOfChoices  hashedParameters  getOrgParametersHash  isVotable  moveTopAwaitingBoostMode  findMaxScore  findInArray  execute  cancelVote  cancelProposal  boostProposal", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#constructor-emergentvotescheme", 
            "text": "Execution cost:  No bound available.  nonpayable  Params:  Nothing", 
            "title": "constructor EmergentVoteScheme()"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#event-ownershiptransferred", 
            "text": "Params: \n1.  previousOwner   of type address \n2.  newOwner   of type address", 
            "title": "event OwnershipTransferred"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#event-logvoteproposal", 
            "text": "Params: \n1.  _proposalId   of type bytes32 \n2.  _voter   of type address \n3.  _vote   of type uint256 \n4.  _reputation   of type uint256 \n5.  _isOwnerVote   of type bool", 
            "title": "event LogVoteProposal"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#event-lognewproposal", 
            "text": "Params: \n1.  proposalId   of type bytes32", 
            "title": "event LogNewProposal"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#event-lognewproposal_1", 
            "text": "Params: \n1.  _proposalId   of type bytes32 \n2.  _proposer   of type address \n3.  _paramsHash   of type bytes32", 
            "title": "event LogNewProposal"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#event-logexecuteproposal", 
            "text": "Params: \n1.  _proposalId   of type bytes32 \n2.  _decision   of type uint256", 
            "title": "event LogExecuteProposal"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#event-logcancelvoting", 
            "text": "Params: \n1.  _proposalId   of type bytes32 \n2.  _voter   of type address", 
            "title": "event LogCancelVoting"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#event-logcancelproposal", 
            "text": "Params: \n1.  _proposalId   of type bytes32", 
            "title": "event LogCancelProposal"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#fallback", 
            "text": "Nothing", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-max_num_of_choices", 
            "text": "Execution cost:  less than 566 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type uint256", 
            "title": "function MAX_NUM_OF_CHOICES"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-organizationsparameters", 
            "text": "Execution cost:  less than 2370 gas.  constant | view  Inputs: \n1.  unnamed   of type bytes32  Returns: \n1.  reputationSystem   of type address \n2.  boostToken   of type address \n3.  beneficiary   of type address \n4.  attentionBandwidth   of type uint256 \n5.  minBoostTimeFrame   of type uint256 \n6.  maxBoostTimeFrame   of type uint256 \n7.  minBoost   of type uint256 \n8.  allowOwner   of type bool", 
            "title": "function organizationsParameters"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-voteinfo", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs: \n1.  _proposalId   of type bytes32 \n2.  _voter   of type address  Returns: \n1.  unnamed   of type uint256[2]", 
            "title": "function voteInfo"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-transferownership", 
            "text": "Allows the current owner to transfer control of the contract to a newOwner.   Execution cost:  less than 23470 gas.  nonpayable  Inputs: \n1.  newOwner   of type address- The address to transfer ownership to.  Returns:  Nothing", 
            "title": "function transferOwnership"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-setproposalparameters", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _precReq   of type uint256 \n2.  _quorum   of type uint256 \n3.  _boostTimeFrame   of type uint256  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function setProposalParameters"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-updateparameters", 
            "text": "Execution cost:  less than 20616 gas.  nonpayable  Inputs: \n1.  _hashedParameters   of type bytes32  Returns:  Nothing", 
            "title": "function updateParameters"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-proposals", 
            "text": "Execution cost:  less than 2823 gas.  constant | view  Inputs: \n1.  unnamed   of type bytes32  Returns: \n1.  owner   of type address \n2.  avatar   of type address \n3.  numOfChoices   of type uint256 \n4.  executable   of type address \n5.  paramsHash   of type bytes32 \n6.  totalVotes   of type uint256 \n7.  opened   of type bool \n8.  isBoostModeActive   of type bool \n9.  isAwaitingBoost   of type bool \n10.  closingTime   of type uint256 \n11.  boostedFunds   of type uint256", 
            "title": "function proposals"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-ownervote", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32 \n2.  _vote   of type uint256 \n3.  _voter   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function ownerVote"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-votewithspecifiedamounts", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32 \n2.  _vote   of type uint256 \n3.  _rep   of type uint256 \n4.  unnamed   of type uint256  Returns: \n1.  unnamed   of type bool", 
            "title": "function voteWithSpecifiedAmounts"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-proposalscore", 
            "text": "Get the score of a specific proposal\n The score is evaluated by multiplying the number of votes with the funds that are invested   Execution cost:  No bound available.  constant | view  Inputs: \n1.  _proposalId   of type bytes32- the proposal ID  uint Proposal's score", 
            "title": "function proposalScore"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-setorgparameters", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _reputationSystem   of type address \n2.  _boostToken   of type address \n3.  _beneficiary   of type address \n4.  _attentionBandwidth   of type uint256 \n5.  _minBoostTimeFrame   of type uint256 \n6.  _maxBoostTimeFrame   of type uint256 \n7.  _minBoost   of type uint256 \n8.  _allowOwner   of type bool  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function setOrgParameters"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-proposalsparameters", 
            "text": "Execution cost:  less than 1233 gas.  constant | view  Inputs: \n1.  unnamed   of type bytes32  Returns: \n1.  precReq   of type uint256 \n2.  quorum   of type uint256 \n3.  boostTimeFrame   of type uint256", 
            "title": "function proposalsParameters"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-vote", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32 \n2.  _vote   of type uint256  Returns: \n1.  unnamed   of type bool", 
            "title": "function vote"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-proposalstatus", 
            "text": "proposalStatus returns the number of yes, no, and abstain and if the proposal is ended of a given proposal id   Execution cost:  No bound available.  constant | view  Inputs: \n1.  _proposalId   of type bytes32- the ID of the proposal  int[10] array that contains the proposal's info:\n number of yes, no, and abstain, and if the voting for the proposal has ended", 
            "title": "function proposalStatus"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-propose", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _numOfChoices   of type uint256 \n2.  _paramsHash   of type bytes32 \n3.  _avatar   of type address \n4.  _executable   of type address  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function propose"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-owner", 
            "text": "Execution cost:  less than 941 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type address", 
            "title": "function owner"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-getproposalparametershash", 
            "text": "Execution cost:  No bound available.  constant | pure  Inputs: \n1.  _precReq   of type uint256 \n2.  _quorum   of type uint256 \n3.  _boostTimeFrame   of type uint256  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function getProposalParametersHash"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-findminscore", 
            "text": "Get the minimum score of a given list proposal ids   Execution cost:  No bound available.  constant | view  Inputs: \n1.  _idsArray   of type bytes32[]- the proposal ids that will be checked  uint index the index of the proposal containing the smallest score in the list\nuint min the minimum score in the list", 
            "title": "function findMinScore"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-organizations", 
            "text": "Execution cost:  less than 1104 gas.  constant | view  Inputs: \n1.  unnamed   of type address  Returns: \n1.  isRegistered   of type bool \n2.  boostedProposals   of type uint256", 
            "title": "function organizations"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-getnumberofchoices", 
            "text": "Execution cost:  less than 932 gas.  constant | view  Inputs: \n1.  _proposalId   of type bytes32  Returns: \n1.  unnamed   of type uint256", 
            "title": "function getNumberOfChoices"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-hashedparameters", 
            "text": "Execution cost:  less than 1052 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function hashedParameters"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-getorgparametershash", 
            "text": "Execution cost:  No bound available.  constant | pure  Inputs: \n1.  _reputationSystem   of type address \n2.  _boostToken   of type address \n3.  _beneficiary   of type address \n4.  _attentionBandwidth   of type uint256 \n5.  _minBoostTimeFrame   of type uint256 \n6.  _maxBoostTimeFrame   of type uint256 \n7.  _minBoost   of type uint256 \n8.  _allowOwner   of type bool  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function getOrgParametersHash"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-isvotable", 
            "text": "isVotable check if the proposal is open   Execution cost:  less than 1010 gas.  constant | view  Inputs: \n1.  _proposalId   of type bytes32- the ID of the proposal  bool true or false", 
            "title": "function isVotable"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-movetopawaitingboostmode", 
            "text": "Move the top proposal form the waiting list to the boosted proposals   Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _avatar   of type address- avatar of the organization  Returns:  Nothing", 
            "title": "function moveTopAwaitingBoostMode"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-findmaxscore", 
            "text": "Get the maximum score of a given list proposal ids   Execution cost:  No bound available.  constant | view  Inputs: \n1.  _idsArray   of type bytes32[]- the proposal ids that will be checked  uint index the index of the proposal containing the highest score in the list\nuint max the maximum score in the list", 
            "title": "function findMaxScore"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-findinarray", 
            "text": "Execution cost:  No bound available.  constant | pure  Inputs: \n1.  _idsArray   of type bytes32[] \n2.  _id   of type bytes32  Returns: \n1.  isFound   of type bool \n2.  index   of type uint256", 
            "title": "function findInArray"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-execute", 
            "text": "check if the proposal has been decided, and if so, execute the proposal   Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32- the id of the proposal  bool is the proposal has been executed or not?", 
            "title": "function execute"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-cancelvote", 
            "text": "Cancel the vote of the msg.sender: subtract the reputation amount from the votes\n and delete the voter from the proposal struct   Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32- id of the proposal  Returns:  Nothing", 
            "title": "function cancelVote"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-cancelproposal", 
            "text": "Cancel a proposal, only the owner can call this function and only if allowOwner flag is true.   Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32- the proposal ID  bool True if the proposal is canceled and False if it wasn't", 
            "title": "function cancelProposal"
        }, 
        {
            "location": "/ref/VotingMachines/EmergentVoteScheme/#function-boostproposal", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32 \n2.  _boostValue   of type uint256  Returns:  Nothing", 
            "title": "function boostProposal"
        }, 
        {
            "location": "/ref/VotingMachines/IntVoteInterface/", 
            "text": "contract\n IntVoteInterface (\nsource\n)\n\n\nCode deposit cost: \nNo bound available.\n\n\nExecution cost: \nNo bound available.\n\n\nTotal deploy cost(deposit + execution): \nNo bound available.\n\n\n\n\nReference\n\n\n\n\n\n\nConstructors\n\n\n\n\n\n\nEvents\n\n\n\n\n\n\nFallback\n\n\n\n\nFunctions\n\n\nvoteWithSpecifiedAmounts\n\n\nvote\n\n\npropose\n\n\nownerVote\n\n\nisVotable\n\n\ngetNumberOfChoices\n\n\nexecute\n\n\ncancelVote\n\n\ncancelProposal\n\n\n\n\n\n\n\n\nConstructors\n\n\nEvents\n\n\nFallback\n\n\nNothing\n\n\nFunctions\n\n\nfunction\n voteWithSpecifiedAmounts\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_vote\n \nof type uint256\n\n3. \n_rep\n \nof type uint256\n\n4. \n_token\n \nof type uint256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n vote\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_vote\n \nof type uint256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n propose\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_numOfChoices\n \nof type uint256\n\n2. \n_proposalParameters\n \nof type bytes32\n\n3. \n_avatar\n \nof type address\n\n4. \n_executable\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n ownerVote\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_vote\n \nof type uint256\n\n3. \n_voter\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n isVotable\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n getNumberOfChoices\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n\nReturns:\n\n1. \nunnamed\n \nof type uint256\n\n\nfunction\n execute\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n cancelVote\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n cancelProposal\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool", 
            "title": "*contract* IntVoteInterface ([source](https://github.com/daostack/daostack/tree/master/./contracts/VotingMachines/IntVoteInterface.sol))"
        }, 
        {
            "location": "/ref/VotingMachines/IntVoteInterface/#contract-intvoteinterface-source", 
            "text": "Code deposit cost:  No bound available.  Execution cost:  No bound available.  Total deploy cost(deposit + execution):  No bound available.", 
            "title": "contract IntVoteInterface (source)"
        }, 
        {
            "location": "/ref/VotingMachines/IntVoteInterface/#reference", 
            "text": "Constructors    Events    Fallback   Functions  voteWithSpecifiedAmounts  vote  propose  ownerVote  isVotable  getNumberOfChoices  execute  cancelVote  cancelProposal", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/VotingMachines/IntVoteInterface/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/VotingMachines/IntVoteInterface/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/VotingMachines/IntVoteInterface/#fallback", 
            "text": "Nothing", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/VotingMachines/IntVoteInterface/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/VotingMachines/IntVoteInterface/#function-votewithspecifiedamounts", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32 \n2.  _vote   of type uint256 \n3.  _rep   of type uint256 \n4.  _token   of type uint256  Returns: \n1.  unnamed   of type bool", 
            "title": "function voteWithSpecifiedAmounts"
        }, 
        {
            "location": "/ref/VotingMachines/IntVoteInterface/#function-vote", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32 \n2.  _vote   of type uint256  Returns: \n1.  unnamed   of type bool", 
            "title": "function vote"
        }, 
        {
            "location": "/ref/VotingMachines/IntVoteInterface/#function-propose", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _numOfChoices   of type uint256 \n2.  _proposalParameters   of type bytes32 \n3.  _avatar   of type address \n4.  _executable   of type address  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function propose"
        }, 
        {
            "location": "/ref/VotingMachines/IntVoteInterface/#function-ownervote", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32 \n2.  _vote   of type uint256 \n3.  _voter   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function ownerVote"
        }, 
        {
            "location": "/ref/VotingMachines/IntVoteInterface/#function-isvotable", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs: \n1.  _proposalId   of type bytes32  Returns: \n1.  unnamed   of type bool", 
            "title": "function isVotable"
        }, 
        {
            "location": "/ref/VotingMachines/IntVoteInterface/#function-getnumberofchoices", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs: \n1.  _proposalId   of type bytes32  Returns: \n1.  unnamed   of type uint256", 
            "title": "function getNumberOfChoices"
        }, 
        {
            "location": "/ref/VotingMachines/IntVoteInterface/#function-execute", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32  Returns: \n1.  unnamed   of type bool", 
            "title": "function execute"
        }, 
        {
            "location": "/ref/VotingMachines/IntVoteInterface/#function-cancelvote", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32  Returns:  Nothing", 
            "title": "function cancelVote"
        }, 
        {
            "location": "/ref/VotingMachines/IntVoteInterface/#function-cancelproposal", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32  Returns: \n1.  unnamed   of type bool", 
            "title": "function cancelProposal"
        }, 
        {
            "location": "/ref/VotingMachines/QuorumVote/", 
            "text": "contract\n QuorumVote (\nsource\n)\n\n\nCode deposit cost: \nless than 924000 gas.\n\n\nExecution cost: \nless than 957 gas.\n\n\nTotal deploy cost(deposit + execution): \nless than 924957 gas.\n\n\n\n\nReference\n\n\n\n\n\n\nConstructors\n\n\n\n\n\n\nEvents\n\n\n\n\nLogVoteProposal\n\n\nLogNewProposal\n\n\nLogExecuteProposal\n\n\nLogCancelVoting\n\n\nLogCancelProposal\n\n\n\n\n\n\nFallback\n\n\nFunctions\n\n\nvotesStatus\n\n\nsetParameters\n\n\nvoteInfo\n\n\nvoteWithSpecifiedAmounts\n\n\nvote\n\n\npropose\n\n\nproposals\n\n\nparameters\n\n\nownerVote\n\n\nisVotable\n\n\ngetParametersHash\n\n\ngetNumberOfChoices\n\n\nexecute\n\n\ncancelVote\n\n\ncancelProposal\n\n\n\n\n\n\n\n\nConstructors\n\n\nEvents\n\n\nevent\n LogVoteProposal\n\n\nParams:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_voter\n \nof type address\n\n3. \n_vote\n \nof type uint256\n\n4. \n_reputation\n \nof type uint256\n\n5. \n_isOwnerVote\n \nof type bool\n\n\nevent\n LogNewProposal\n\n\nParams:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_numOfChoices\n \nof type uint256\n\n3. \n_proposer\n \nof type address\n\n4. \n_paramsHash\n \nof type bytes32\n\n\nevent\n LogExecuteProposal\n\n\nParams:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_decision\n \nof type uint256\n\n\nevent\n LogCancelVoting\n\n\nParams:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_voter\n \nof type address\n\n\nevent\n LogCancelProposal\n\n\nParams:\n\n1. \n_proposalId\n \nof type bytes32\n\n\nFallback\n\n\nNothing\n\n\nFunctions\n\n\nfunction\n votesStatus\n\n\n\n\nvotesStatus returns the number of yes, no, and abstain and if the proposal is ended of a given proposal id\n\n\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32- the ID of the proposal\n\n\n\nvotes array of votes for each choice\n\n\nfunction\n setParameters\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_reputationSystem\n \nof type address\n\n2. \n_precReq\n \nof type uint256\n\n3. \n_allowOwner\n \nof type bool\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n voteInfo\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_voter\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type uint256\n\n2. \nunnamed\n \nof type uint256\n\n\nfunction\n voteWithSpecifiedAmounts\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_vote\n \nof type uint256\n\n3. \n_rep\n \nof type uint256\n\n4. \nunnamed\n \nof type uint256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n vote\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_vote\n \nof type uint256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n propose\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_numOfChoices\n \nof type uint256\n\n2. \n_paramsHash\n \nof type bytes32\n\n3. \n_avatar\n \nof type address\n\n4. \n_executable\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n proposals\n\n\nExecution cost: \nless than 2188 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type bytes32\n\n\nReturns:\n\n1. \nowner\n \nof type address\n\n2. \navatar\n \nof type address\n\n3. \nnumOfChoices\n \nof type uint256\n\n4. \nexecutable\n \nof type address\n\n5. \nparamsHash\n \nof type bytes32\n\n6. \ntotalVotes\n \nof type uint256\n\n7. \nopen\n \nof type bool\n\n\nfunction\n parameters\n\n\nExecution cost: \nless than 1169 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type bytes32\n\n\nReturns:\n\n1. \nreputationSystem\n \nof type address\n\n2. \nprecReq\n \nof type uint256\n\n3. \nallowOwner\n \nof type bool\n\n\nfunction\n ownerVote\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_vote\n \nof type uint256\n\n3. \n_voter\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n isVotable\n\n\n\n\nisVotable check if the proposal is votable\n\n\n\n\nExecution cost: \nless than 790 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32- the ID of the proposal\n\n\n\nbool true or false\n\n\nfunction\n getParametersHash\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | pure\n\n\nInputs:\n\n1. \n_reputationSystem\n \nof type address\n\n2. \n_precReq\n \nof type uint256\n\n3. \n_allowOwner\n \nof type bool\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n getNumberOfChoices\n\n\n\n\ngetNumberOfChoices returns the number of choices possible in this proposal\n\n\n\n\nExecution cost: \nless than 734 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32- the ID of the proposal\n\n\n\nuint that contains number of choices\n\n\nfunction\n execute\n\n\n\n\ncheck if the proposal has been decided, and if so, execute the proposal\n\n\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32- the id of the proposal\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n cancelVote\n\n\n\n\nCancel the vote of the msg.sender: subtract the reputation amount from the votes\n and delete the voter from the proposal struct\n\n\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32- id of the proposal\n\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n cancelProposal\n\n\n\n\nCancel a proposal, only the owner can call this function and only if allowOwner flag is true.\n\n\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32- the proposal ID\n\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool", 
            "title": "*contract* QuorumVote ([source](https://github.com/daostack/daostack/tree/master/./contracts/VotingMachines/QuorumVote.sol))"
        }, 
        {
            "location": "/ref/VotingMachines/QuorumVote/#contract-quorumvote-source", 
            "text": "Code deposit cost:  less than 924000 gas.  Execution cost:  less than 957 gas.  Total deploy cost(deposit + execution):  less than 924957 gas.", 
            "title": "contract QuorumVote (source)"
        }, 
        {
            "location": "/ref/VotingMachines/QuorumVote/#reference", 
            "text": "Constructors    Events   LogVoteProposal  LogNewProposal  LogExecuteProposal  LogCancelVoting  LogCancelProposal    Fallback  Functions  votesStatus  setParameters  voteInfo  voteWithSpecifiedAmounts  vote  propose  proposals  parameters  ownerVote  isVotable  getParametersHash  getNumberOfChoices  execute  cancelVote  cancelProposal", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/VotingMachines/QuorumVote/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/VotingMachines/QuorumVote/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/VotingMachines/QuorumVote/#event-logvoteproposal", 
            "text": "Params: \n1.  _proposalId   of type bytes32 \n2.  _voter   of type address \n3.  _vote   of type uint256 \n4.  _reputation   of type uint256 \n5.  _isOwnerVote   of type bool", 
            "title": "event LogVoteProposal"
        }, 
        {
            "location": "/ref/VotingMachines/QuorumVote/#event-lognewproposal", 
            "text": "Params: \n1.  _proposalId   of type bytes32 \n2.  _numOfChoices   of type uint256 \n3.  _proposer   of type address \n4.  _paramsHash   of type bytes32", 
            "title": "event LogNewProposal"
        }, 
        {
            "location": "/ref/VotingMachines/QuorumVote/#event-logexecuteproposal", 
            "text": "Params: \n1.  _proposalId   of type bytes32 \n2.  _decision   of type uint256", 
            "title": "event LogExecuteProposal"
        }, 
        {
            "location": "/ref/VotingMachines/QuorumVote/#event-logcancelvoting", 
            "text": "Params: \n1.  _proposalId   of type bytes32 \n2.  _voter   of type address", 
            "title": "event LogCancelVoting"
        }, 
        {
            "location": "/ref/VotingMachines/QuorumVote/#event-logcancelproposal", 
            "text": "Params: \n1.  _proposalId   of type bytes32", 
            "title": "event LogCancelProposal"
        }, 
        {
            "location": "/ref/VotingMachines/QuorumVote/#fallback", 
            "text": "Nothing", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/VotingMachines/QuorumVote/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/VotingMachines/QuorumVote/#function-votesstatus", 
            "text": "votesStatus returns the number of yes, no, and abstain and if the proposal is ended of a given proposal id   Execution cost:  No bound available.  constant | view  Inputs: \n1.  _proposalId   of type bytes32- the ID of the proposal  votes array of votes for each choice", 
            "title": "function votesStatus"
        }, 
        {
            "location": "/ref/VotingMachines/QuorumVote/#function-setparameters", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _reputationSystem   of type address \n2.  _precReq   of type uint256 \n3.  _allowOwner   of type bool  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function setParameters"
        }, 
        {
            "location": "/ref/VotingMachines/QuorumVote/#function-voteinfo", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs: \n1.  _proposalId   of type bytes32 \n2.  _voter   of type address  Returns: \n1.  unnamed   of type uint256 \n2.  unnamed   of type uint256", 
            "title": "function voteInfo"
        }, 
        {
            "location": "/ref/VotingMachines/QuorumVote/#function-votewithspecifiedamounts", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32 \n2.  _vote   of type uint256 \n3.  _rep   of type uint256 \n4.  unnamed   of type uint256  Returns: \n1.  unnamed   of type bool", 
            "title": "function voteWithSpecifiedAmounts"
        }, 
        {
            "location": "/ref/VotingMachines/QuorumVote/#function-vote", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32 \n2.  _vote   of type uint256  Returns: \n1.  unnamed   of type bool", 
            "title": "function vote"
        }, 
        {
            "location": "/ref/VotingMachines/QuorumVote/#function-propose", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _numOfChoices   of type uint256 \n2.  _paramsHash   of type bytes32 \n3.  _avatar   of type address \n4.  _executable   of type address  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function propose"
        }, 
        {
            "location": "/ref/VotingMachines/QuorumVote/#function-proposals", 
            "text": "Execution cost:  less than 2188 gas.  constant | view  Inputs: \n1.  unnamed   of type bytes32  Returns: \n1.  owner   of type address \n2.  avatar   of type address \n3.  numOfChoices   of type uint256 \n4.  executable   of type address \n5.  paramsHash   of type bytes32 \n6.  totalVotes   of type uint256 \n7.  open   of type bool", 
            "title": "function proposals"
        }, 
        {
            "location": "/ref/VotingMachines/QuorumVote/#function-parameters", 
            "text": "Execution cost:  less than 1169 gas.  constant | view  Inputs: \n1.  unnamed   of type bytes32  Returns: \n1.  reputationSystem   of type address \n2.  precReq   of type uint256 \n3.  allowOwner   of type bool", 
            "title": "function parameters"
        }, 
        {
            "location": "/ref/VotingMachines/QuorumVote/#function-ownervote", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32 \n2.  _vote   of type uint256 \n3.  _voter   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function ownerVote"
        }, 
        {
            "location": "/ref/VotingMachines/QuorumVote/#function-isvotable", 
            "text": "isVotable check if the proposal is votable   Execution cost:  less than 790 gas.  constant | view  Inputs: \n1.  _proposalId   of type bytes32- the ID of the proposal  bool true or false", 
            "title": "function isVotable"
        }, 
        {
            "location": "/ref/VotingMachines/QuorumVote/#function-getparametershash", 
            "text": "Execution cost:  No bound available.  constant | pure  Inputs: \n1.  _reputationSystem   of type address \n2.  _precReq   of type uint256 \n3.  _allowOwner   of type bool  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function getParametersHash"
        }, 
        {
            "location": "/ref/VotingMachines/QuorumVote/#function-getnumberofchoices", 
            "text": "getNumberOfChoices returns the number of choices possible in this proposal   Execution cost:  less than 734 gas.  constant | view  Inputs: \n1.  _proposalId   of type bytes32- the ID of the proposal  uint that contains number of choices", 
            "title": "function getNumberOfChoices"
        }, 
        {
            "location": "/ref/VotingMachines/QuorumVote/#function-execute", 
            "text": "check if the proposal has been decided, and if so, execute the proposal   Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32- the id of the proposal  Returns: \n1.  unnamed   of type bool", 
            "title": "function execute"
        }, 
        {
            "location": "/ref/VotingMachines/QuorumVote/#function-cancelvote", 
            "text": "Cancel the vote of the msg.sender: subtract the reputation amount from the votes\n and delete the voter from the proposal struct   Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32- id of the proposal  Returns:  Nothing", 
            "title": "function cancelVote"
        }, 
        {
            "location": "/ref/VotingMachines/QuorumVote/#function-cancelproposal", 
            "text": "Cancel a proposal, only the owner can call this function and only if allowOwner flag is true.   Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32- the proposal ID  Returns: \n1.  unnamed   of type bool", 
            "title": "function cancelProposal"
        }, 
        {
            "location": "/ref/controller/ActionInterface/", 
            "text": "contract\n ActionInterface (\nsource\n)\n\n\nCode deposit cost: \nNo bound available.\n\n\nExecution cost: \nNo bound available.\n\n\nTotal deploy cost(deposit + execution): \nNo bound available.\n\n\n\n\nReference\n\n\n\n\n\n\nConstructors\n\n\n\n\n\n\nEvents\n\n\n\n\n\n\nFallback\n\n\n\n\nFunctions\n\n\naction\n\n\n\n\n\n\n\n\nConstructors\n\n\nEvents\n\n\nFallback\n\n\nNothing\n\n\nFunctions\n\n\nfunction\n action\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_params\n \nof type bytes32[]\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool", 
            "title": "*contract* ActionInterface ([source](https://github.com/daostack/daostack/tree/master/./contracts/controller/Avatar.sol))"
        }, 
        {
            "location": "/ref/controller/ActionInterface/#contract-actioninterface-source", 
            "text": "Code deposit cost:  No bound available.  Execution cost:  No bound available.  Total deploy cost(deposit + execution):  No bound available.", 
            "title": "contract ActionInterface (source)"
        }, 
        {
            "location": "/ref/controller/ActionInterface/#reference", 
            "text": "Constructors    Events    Fallback   Functions  action", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/controller/ActionInterface/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/controller/ActionInterface/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/controller/ActionInterface/#fallback", 
            "text": "Nothing", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/controller/ActionInterface/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/controller/ActionInterface/#function-action", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _params   of type bytes32[]  Returns: \n1.  unnamed   of type bool", 
            "title": "function action"
        }, 
        {
            "location": "/ref/controller/Avatar/", 
            "text": "contract\n Avatar (\nsource\n)\n\n\nCode deposit cost: \nless than 475800 gas.\n\n\nExecution cost: \nless than 81478 gas.\n\n\nTotal deploy cost(deposit + execution): \nless than 557278 gas.\n\n\n\n\nAn Avatar holds tokens, reputation and ether for a controller\n\n\n\n\nThe \nAvatar\n is the public facing entity a DAO exposes to interact with the outside world(vote on other DAOs, pay external actors, etc...)\n\n\nReference\n\n\n\n\nConstructors\n\n\nAvatar(bytes32, address, address)\n\n\n\n\n\n\nEvents\n\n\nSendEther\n\n\nReceiveEther\n\n\nOwnershipTransferred\n\n\nGenericAction\n\n\nExternalTokenTransferFrom\n\n\nExternalTokenTransfer\n\n\nExternalTokenIncreaseApproval\n\n\nExternalTokenDecreaseApproval\n\n\n\n\n\n\nFallback\n\n\nFunctions\n\n\nexternalTokenTransferFrom\n\n\ntransferOwnership\n\n\nsendEther\n\n\nowner\n\n\norgName\n\n\nnativeToken\n\n\nnativeReputation\n\n\ngenericAction\n\n\nexternalTokenTransfer\n\n\nexternalTokenIncreaseApproval\n\n\nexternalTokenDecreaseApproval\n\n\n\n\n\n\n\n\nConstructors\n\n\nconstructor\n Avatar(bytes32, address, address)\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nParams:\n\n1. \n_orgName\n \nof type bytes32\n\n2. \n_nativeToken\n \nof type address\n\n3. \n_nativeReputation\n \nof type address\n\n\nEvents\n\n\nevent\n SendEther\n\n\nParams:\n\n1. \n_amountInWei\n \nof type uint256\n\n2. \n_to\n \nof type address\n\n\nevent\n ReceiveEther\n\n\nParams:\n\n1. \n_sender\n \nof type address\n\n2. \n_value\n \nof type uint256\n\n\nevent\n OwnershipTransferred\n\n\nParams:\n\n1. \npreviousOwner\n \nof type address\n\n2. \nnewOwner\n \nof type address\n\n\nevent\n GenericAction\n\n\nParams:\n\n1. \n_action\n \nof type address\n\n2. \n_params\n \nof type bytes32[]\n\n\nevent\n ExternalTokenTransferFrom\n\n\nParams:\n\n1. \n_externalToken\n \nof type address\n\n2. \n_from\n \nof type address\n\n3. \n_to\n \nof type address\n\n4. \n_value\n \nof type uint256\n\n\nevent\n ExternalTokenTransfer\n\n\nParams:\n\n1. \n_externalToken\n \nof type address\n\n2. \n_to\n \nof type address\n\n3. \n_value\n \nof type uint256\n\n\nevent\n ExternalTokenIncreaseApproval\n\n\nParams:\n\n1. \n_externalToken\n \nof type address\n\n2. \n_spender\n \nof type address\n\n3. \n_addedValue\n \nof type uint256\n\n\nevent\n ExternalTokenDecreaseApproval\n\n\nParams:\n\n1. \n_externalToken\n \nof type address\n\n2. \n_spender\n \nof type address\n\n3. \n_subtractedValue\n \nof type uint256\n\n\nFallback\n\n\nExecution cost: \nless than 1870 gas.\n\n\npayable\n\n\nFunctions\n\n\nfunction\n externalTokenTransferFrom\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_externalToken\n \nof type address\n\n2. \n_from\n \nof type address\n\n3. \n_to\n \nof type address\n\n4. \n_value\n \nof type uint256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n transferOwnership\n\n\n\n\nAllows the current owner to transfer control of the contract to a newOwner.\n\n\n\n\nExecution cost: \nless than 23027 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \nnewOwner\n \nof type address- The address to transfer ownership to.\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n sendEther\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_amountInWei\n \nof type uint256\n\n2. \n_to\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n owner\n\n\nExecution cost: \nless than 1545 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type address\n\n\nfunction\n orgName\n\n\nExecution cost: \nless than 1545 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n nativeToken\n\n\nExecution cost: \nless than 1545 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type address\n\n\nfunction\n nativeReputation\n\n\nExecution cost: \nless than 1545 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type address\n\n\nfunction\n genericAction\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_action\n \nof type address\n\n2. \n_params\n \nof type bytes32[]\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n externalTokenTransfer\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_externalToken\n \nof type address\n\n2. \n_to\n \nof type address\n\n3. \n_value\n \nof type uint256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n externalTokenIncreaseApproval\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_externalToken\n \nof type address\n\n2. \n_spender\n \nof type address\n\n3. \n_addedValue\n \nof type uint256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n externalTokenDecreaseApproval\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_externalToken\n \nof type address\n\n2. \n_spender\n \nof type address\n\n3. \n_subtractedValue\n \nof type uint256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool", 
            "title": "*contract* Avatar ([source](https://github.com/daostack/daostack/tree/master/./contracts/controller/Avatar.sol))"
        }, 
        {
            "location": "/ref/controller/Avatar/#contract-avatar-source", 
            "text": "Code deposit cost:  less than 475800 gas.  Execution cost:  less than 81478 gas.  Total deploy cost(deposit + execution):  less than 557278 gas.   An Avatar holds tokens, reputation and ether for a controller   The  Avatar  is the public facing entity a DAO exposes to interact with the outside world(vote on other DAOs, pay external actors, etc...)", 
            "title": "contract Avatar (source)"
        }, 
        {
            "location": "/ref/controller/Avatar/#reference", 
            "text": "Constructors  Avatar(bytes32, address, address)    Events  SendEther  ReceiveEther  OwnershipTransferred  GenericAction  ExternalTokenTransferFrom  ExternalTokenTransfer  ExternalTokenIncreaseApproval  ExternalTokenDecreaseApproval    Fallback  Functions  externalTokenTransferFrom  transferOwnership  sendEther  owner  orgName  nativeToken  nativeReputation  genericAction  externalTokenTransfer  externalTokenIncreaseApproval  externalTokenDecreaseApproval", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/controller/Avatar/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/controller/Avatar/#constructor-avatarbytes32-address-address", 
            "text": "Execution cost:  No bound available.  nonpayable  Params: \n1.  _orgName   of type bytes32 \n2.  _nativeToken   of type address \n3.  _nativeReputation   of type address", 
            "title": "constructor Avatar(bytes32, address, address)"
        }, 
        {
            "location": "/ref/controller/Avatar/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/controller/Avatar/#event-sendether", 
            "text": "Params: \n1.  _amountInWei   of type uint256 \n2.  _to   of type address", 
            "title": "event SendEther"
        }, 
        {
            "location": "/ref/controller/Avatar/#event-receiveether", 
            "text": "Params: \n1.  _sender   of type address \n2.  _value   of type uint256", 
            "title": "event ReceiveEther"
        }, 
        {
            "location": "/ref/controller/Avatar/#event-ownershiptransferred", 
            "text": "Params: \n1.  previousOwner   of type address \n2.  newOwner   of type address", 
            "title": "event OwnershipTransferred"
        }, 
        {
            "location": "/ref/controller/Avatar/#event-genericaction", 
            "text": "Params: \n1.  _action   of type address \n2.  _params   of type bytes32[]", 
            "title": "event GenericAction"
        }, 
        {
            "location": "/ref/controller/Avatar/#event-externaltokentransferfrom", 
            "text": "Params: \n1.  _externalToken   of type address \n2.  _from   of type address \n3.  _to   of type address \n4.  _value   of type uint256", 
            "title": "event ExternalTokenTransferFrom"
        }, 
        {
            "location": "/ref/controller/Avatar/#event-externaltokentransfer", 
            "text": "Params: \n1.  _externalToken   of type address \n2.  _to   of type address \n3.  _value   of type uint256", 
            "title": "event ExternalTokenTransfer"
        }, 
        {
            "location": "/ref/controller/Avatar/#event-externaltokenincreaseapproval", 
            "text": "Params: \n1.  _externalToken   of type address \n2.  _spender   of type address \n3.  _addedValue   of type uint256", 
            "title": "event ExternalTokenIncreaseApproval"
        }, 
        {
            "location": "/ref/controller/Avatar/#event-externaltokendecreaseapproval", 
            "text": "Params: \n1.  _externalToken   of type address \n2.  _spender   of type address \n3.  _subtractedValue   of type uint256", 
            "title": "event ExternalTokenDecreaseApproval"
        }, 
        {
            "location": "/ref/controller/Avatar/#fallback", 
            "text": "Execution cost:  less than 1870 gas.  payable", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/controller/Avatar/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/controller/Avatar/#function-externaltokentransferfrom", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _externalToken   of type address \n2.  _from   of type address \n3.  _to   of type address \n4.  _value   of type uint256  Returns: \n1.  unnamed   of type bool", 
            "title": "function externalTokenTransferFrom"
        }, 
        {
            "location": "/ref/controller/Avatar/#function-transferownership", 
            "text": "Allows the current owner to transfer control of the contract to a newOwner.   Execution cost:  less than 23027 gas.  nonpayable  Inputs: \n1.  newOwner   of type address- The address to transfer ownership to.  Returns:  Nothing", 
            "title": "function transferOwnership"
        }, 
        {
            "location": "/ref/controller/Avatar/#function-sendether", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _amountInWei   of type uint256 \n2.  _to   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function sendEther"
        }, 
        {
            "location": "/ref/controller/Avatar/#function-owner", 
            "text": "Execution cost:  less than 1545 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type address", 
            "title": "function owner"
        }, 
        {
            "location": "/ref/controller/Avatar/#function-orgname", 
            "text": "Execution cost:  less than 1545 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function orgName"
        }, 
        {
            "location": "/ref/controller/Avatar/#function-nativetoken", 
            "text": "Execution cost:  less than 1545 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type address", 
            "title": "function nativeToken"
        }, 
        {
            "location": "/ref/controller/Avatar/#function-nativereputation", 
            "text": "Execution cost:  less than 1545 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type address", 
            "title": "function nativeReputation"
        }, 
        {
            "location": "/ref/controller/Avatar/#function-genericaction", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _action   of type address \n2.  _params   of type bytes32[]  Returns: \n1.  unnamed   of type bool", 
            "title": "function genericAction"
        }, 
        {
            "location": "/ref/controller/Avatar/#function-externaltokentransfer", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _externalToken   of type address \n2.  _to   of type address \n3.  _value   of type uint256  Returns: \n1.  unnamed   of type bool", 
            "title": "function externalTokenTransfer"
        }, 
        {
            "location": "/ref/controller/Avatar/#function-externaltokenincreaseapproval", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _externalToken   of type address \n2.  _spender   of type address \n3.  _addedValue   of type uint256  Returns: \n1.  unnamed   of type bool", 
            "title": "function externalTokenIncreaseApproval"
        }, 
        {
            "location": "/ref/controller/Avatar/#function-externaltokendecreaseapproval", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _externalToken   of type address \n2.  _spender   of type address \n3.  _subtractedValue   of type uint256  Returns: \n1.  unnamed   of type bool", 
            "title": "function externalTokenDecreaseApproval"
        }, 
        {
            "location": "/ref/controller/Controller/", 
            "text": "contract\n Controller (\nsource\n)\n\n\nCode deposit cost: \nless than 2358800 gas.\n\n\nExecution cost: \nNo bound available.\n\n\nTotal deploy cost(deposit + execution): \nless than 2358800 gas.\n\n\n\n\nController contract\n\n\n\n\nThe \nController\n is the central part of a DAO, it glues together all other components in a single smart contract.\n\n\n\n\nReference\n\n\n\n\nConstructors\n\n\nController(address)\n\n\n\n\n\n\nEvents\n\n\nExternalTokenTransfer\n\n\nUpgradeController\n\n\nExternalTokenTransferFrom\n\n\nRegisterScheme\n\n\nRemoveGlobalConstraint\n\n\nSendEther\n\n\nUnregisterScheme\n\n\nMintTokens\n\n\nMintReputation\n\n\nGenericAction\n\n\nExternalTokenIncreaseApproval\n\n\nExternalTokenDecreaseApproval\n\n\nAddGlobalConstraint\n\n\n\n\n\n\nFallback\n\n\nFunctions\n\n\nmintReputation\n\n\nunregisterScheme\n\n\nunregisterSelf\n\n\nupgradeController\n\n\nnativeReputation\n\n\nremoveGlobalConstraint\n\n\nschemes\n\n\nsendEther\n\n\nisSchemeRegistered\n\n\nmintTokens\n\n\nregisterScheme\n\n\nnativeToken\n\n\nnewController\n\n\nexternalTokenDecreaseApproval\n\n\ngetSchemeParameters\n\n\nisGlobalConstraintRegistered\n\n\ngetSchemePermissions\n\n\nglobalConstraintsRegister\n\n\nglobalConstraints\n\n\nglobalConstraintsCount\n\n\ngenericAction\n\n\nexternalTokenTransferFrom\n\n\nexternalTokenTransfer\n\n\nexternalTokenIncreaseApproval\n\n\navatar\n\n\naddGlobalConstraint\n\n\n\n\n\n\n\n\nConstructors\n\n\nconstructor\n Controller(address)\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nParams:\n\n1. \n_avatar\n \nof type address\n\n\nEvents\n\n\nevent\n ExternalTokenTransfer\n\n\nParams:\n\n1. \n_sender\n \nof type address\n\n2. \n_externalToken\n \nof type address\n\n3. \n_to\n \nof type address\n\n4. \n_value\n \nof type uint256\n\n\nevent\n UpgradeController\n\n\nParams:\n\n1. \n_oldController\n \nof type address\n\n2. \n_newController\n \nof type address\n\n\nevent\n ExternalTokenTransferFrom\n\n\nParams:\n\n1. \n_sender\n \nof type address\n\n2. \n_externalToken\n \nof type address\n\n3. \n_from\n \nof type address\n\n4. \n_to\n \nof type address\n\n5. \n_value\n \nof type uint256\n\n\nevent\n RegisterScheme\n\n\nParams:\n\n1. \n_sender\n \nof type address\n\n2. \n_scheme\n \nof type address\n\n\nevent\n RemoveGlobalConstraint\n\n\nParams:\n\n1. \n_globalConstraint\n \nof type address\n\n2. \n_index\n \nof type uint256\n\n\nevent\n SendEther\n\n\nParams:\n\n1. \n_sender\n \nof type address\n\n2. \n_amountInWei\n \nof type uint256\n\n3. \n_to\n \nof type address\n\n\nevent\n UnregisterScheme\n\n\nParams:\n\n1. \n_sender\n \nof type address\n\n2. \n_scheme\n \nof type address\n\n\nevent\n MintTokens\n\n\nParams:\n\n1. \n_sender\n \nof type address\n\n2. \n_beneficiary\n \nof type address\n\n3. \n_amount\n \nof type uint256\n\n\nevent\n MintReputation\n\n\nParams:\n\n1. \n_sender\n \nof type address\n\n2. \n_beneficiary\n \nof type address\n\n3. \n_amount\n \nof type int256\n\n\nevent\n GenericAction\n\n\nParams:\n\n1. \n_sender\n \nof type address\n\n2. \n_params\n \nof type bytes32[]\n\n\nevent\n ExternalTokenIncreaseApproval\n\n\nParams:\n\n1. \n_sender\n \nof type address\n\n2. \n_externalToken\n \nof type address\n\n3. \n_spender\n \nof type address\n\n4. \n_value\n \nof type uint256\n\n\nevent\n ExternalTokenDecreaseApproval\n\n\nParams:\n\n1. \n_sender\n \nof type address\n\n2. \n_externalToken\n \nof type address\n\n3. \n_spender\n \nof type address\n\n4. \n_value\n \nof type uint256\n\n\nevent\n AddGlobalConstraint\n\n\nParams:\n\n1. \n_globalConstraint\n \nof type address\n\n2. \n_params\n \nof type bytes32\n\n\nFallback\n\n\nExecution cost: \nless than 720 gas.\n\n\nnonpayable\n\n\nFunctions\n\n\nfunction\n mintReputation\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_amount\n \nof type int256\n\n2. \n_beneficiary\n \nof type address\n\n3. \nunnamed\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n unregisterScheme\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_scheme\n \nof type address\n\n2. \nunnamed\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n unregisterSelf\n\n\n\n\nunregister the caller's scheme\n\n\n\n\nExecution cost: \nless than 28009 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \nunnamed\n \nof type address\n\n\nbool which represents a success\n\n\nfunction\n upgradeController\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_newController\n \nof type address\n\n2. \nunnamed\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n nativeReputation\n\n\nExecution cost: \nless than 922 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type address\n\n\nfunction\n removeGlobalConstraint\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_globalConstraint\n \nof type address\n\n2. \nunnamed\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n schemes\n\n\nExecution cost: \nless than 1411 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type address\n\n\nReturns:\n\n1. \nparamsHash\n \nof type bytes32\n\n2. \npermissions\n \nof type bytes4\n\n\nfunction\n sendEther\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_amountInWei\n \nof type uint256\n\n2. \n_to\n \nof type address\n\n3. \nunnamed\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n isSchemeRegistered\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_scheme\n \nof type address\n\n2. \nunnamed\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n mintTokens\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_amount\n \nof type uint256\n\n2. \n_beneficiary\n \nof type address\n\n3. \nunnamed\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n registerScheme\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_scheme\n \nof type address\n\n2. \n_paramsHash\n \nof type bytes32\n\n3. \n_permissions\n \nof type bytes4\n\n4. \nunnamed\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n nativeToken\n\n\nExecution cost: \nless than 1054 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type address\n\n\nfunction\n newController\n\n\nExecution cost: \nless than 636 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type address\n\n\nfunction\n externalTokenDecreaseApproval\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_externalToken\n \nof type address\n\n2. \n_spender\n \nof type address\n\n3. \n_subtractedValue\n \nof type uint256\n\n4. \nunnamed\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n getSchemeParameters\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_scheme\n \nof type address\n\n2. \nunnamed\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n isGlobalConstraintRegistered\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_globalConstraint\n \nof type address\n\n2. \nunnamed\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n getSchemePermissions\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_scheme\n \nof type address\n\n2. \nunnamed\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes4\n\n\nfunction\n globalConstraintsRegister\n\n\nExecution cost: \nless than 1060 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type address\n\n\nReturns:\n\n1. \nregister\n \nof type bool\n\n2. \nindex\n \nof type uint256\n\n\nfunction\n globalConstraints\n\n\nExecution cost: \nless than 1390 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type uint256\n\n\nReturns:\n\n1. \ngcAddress\n \nof type address\n\n2. \nparams\n \nof type bytes32\n\n\nfunction\n globalConstraintsCount\n\n\nExecution cost: \nless than 827 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type uint256\n\n\nfunction\n genericAction\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_params\n \nof type bytes32[]\n\n2. \nunnamed\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n externalTokenTransferFrom\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_externalToken\n \nof type address\n\n2. \n_from\n \nof type address\n\n3. \n_to\n \nof type address\n\n4. \n_value\n \nof type uint256\n\n5. \nunnamed\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n externalTokenTransfer\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_externalToken\n \nof type address\n\n2. \n_to\n \nof type address\n\n3. \n_value\n \nof type uint256\n\n4. \nunnamed\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n externalTokenIncreaseApproval\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_externalToken\n \nof type address\n\n2. \n_spender\n \nof type address\n\n3. \n_addedValue\n \nof type uint256\n\n4. \nunnamed\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n avatar\n\n\nExecution cost: \nless than 702 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type address\n\n\nfunction\n addGlobalConstraint\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_globalConstraint\n \nof type address\n\n2. \n_params\n \nof type bytes32\n\n3. \nunnamed\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool", 
            "title": "*contract* Controller ([source](https://github.com/daostack/daostack/tree/master/./contracts/controller/Controller.sol))"
        }, 
        {
            "location": "/ref/controller/Controller/#contract-controller-source", 
            "text": "Code deposit cost:  less than 2358800 gas.  Execution cost:  No bound available.  Total deploy cost(deposit + execution):  less than 2358800 gas.   Controller contract   The  Controller  is the central part of a DAO, it glues together all other components in a single smart contract.", 
            "title": "contract Controller (source)"
        }, 
        {
            "location": "/ref/controller/Controller/#reference", 
            "text": "Constructors  Controller(address)    Events  ExternalTokenTransfer  UpgradeController  ExternalTokenTransferFrom  RegisterScheme  RemoveGlobalConstraint  SendEther  UnregisterScheme  MintTokens  MintReputation  GenericAction  ExternalTokenIncreaseApproval  ExternalTokenDecreaseApproval  AddGlobalConstraint    Fallback  Functions  mintReputation  unregisterScheme  unregisterSelf  upgradeController  nativeReputation  removeGlobalConstraint  schemes  sendEther  isSchemeRegistered  mintTokens  registerScheme  nativeToken  newController  externalTokenDecreaseApproval  getSchemeParameters  isGlobalConstraintRegistered  getSchemePermissions  globalConstraintsRegister  globalConstraints  globalConstraintsCount  genericAction  externalTokenTransferFrom  externalTokenTransfer  externalTokenIncreaseApproval  avatar  addGlobalConstraint", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/controller/Controller/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/controller/Controller/#constructor-controlleraddress", 
            "text": "Execution cost:  No bound available.  nonpayable  Params: \n1.  _avatar   of type address", 
            "title": "constructor Controller(address)"
        }, 
        {
            "location": "/ref/controller/Controller/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/controller/Controller/#event-externaltokentransfer", 
            "text": "Params: \n1.  _sender   of type address \n2.  _externalToken   of type address \n3.  _to   of type address \n4.  _value   of type uint256", 
            "title": "event ExternalTokenTransfer"
        }, 
        {
            "location": "/ref/controller/Controller/#event-upgradecontroller", 
            "text": "Params: \n1.  _oldController   of type address \n2.  _newController   of type address", 
            "title": "event UpgradeController"
        }, 
        {
            "location": "/ref/controller/Controller/#event-externaltokentransferfrom", 
            "text": "Params: \n1.  _sender   of type address \n2.  _externalToken   of type address \n3.  _from   of type address \n4.  _to   of type address \n5.  _value   of type uint256", 
            "title": "event ExternalTokenTransferFrom"
        }, 
        {
            "location": "/ref/controller/Controller/#event-registerscheme", 
            "text": "Params: \n1.  _sender   of type address \n2.  _scheme   of type address", 
            "title": "event RegisterScheme"
        }, 
        {
            "location": "/ref/controller/Controller/#event-removeglobalconstraint", 
            "text": "Params: \n1.  _globalConstraint   of type address \n2.  _index   of type uint256", 
            "title": "event RemoveGlobalConstraint"
        }, 
        {
            "location": "/ref/controller/Controller/#event-sendether", 
            "text": "Params: \n1.  _sender   of type address \n2.  _amountInWei   of type uint256 \n3.  _to   of type address", 
            "title": "event SendEther"
        }, 
        {
            "location": "/ref/controller/Controller/#event-unregisterscheme", 
            "text": "Params: \n1.  _sender   of type address \n2.  _scheme   of type address", 
            "title": "event UnregisterScheme"
        }, 
        {
            "location": "/ref/controller/Controller/#event-minttokens", 
            "text": "Params: \n1.  _sender   of type address \n2.  _beneficiary   of type address \n3.  _amount   of type uint256", 
            "title": "event MintTokens"
        }, 
        {
            "location": "/ref/controller/Controller/#event-mintreputation", 
            "text": "Params: \n1.  _sender   of type address \n2.  _beneficiary   of type address \n3.  _amount   of type int256", 
            "title": "event MintReputation"
        }, 
        {
            "location": "/ref/controller/Controller/#event-genericaction", 
            "text": "Params: \n1.  _sender   of type address \n2.  _params   of type bytes32[]", 
            "title": "event GenericAction"
        }, 
        {
            "location": "/ref/controller/Controller/#event-externaltokenincreaseapproval", 
            "text": "Params: \n1.  _sender   of type address \n2.  _externalToken   of type address \n3.  _spender   of type address \n4.  _value   of type uint256", 
            "title": "event ExternalTokenIncreaseApproval"
        }, 
        {
            "location": "/ref/controller/Controller/#event-externaltokendecreaseapproval", 
            "text": "Params: \n1.  _sender   of type address \n2.  _externalToken   of type address \n3.  _spender   of type address \n4.  _value   of type uint256", 
            "title": "event ExternalTokenDecreaseApproval"
        }, 
        {
            "location": "/ref/controller/Controller/#event-addglobalconstraint", 
            "text": "Params: \n1.  _globalConstraint   of type address \n2.  _params   of type bytes32", 
            "title": "event AddGlobalConstraint"
        }, 
        {
            "location": "/ref/controller/Controller/#fallback", 
            "text": "Execution cost:  less than 720 gas.  nonpayable", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/controller/Controller/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/controller/Controller/#function-mintreputation", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _amount   of type int256 \n2.  _beneficiary   of type address \n3.  unnamed   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function mintReputation"
        }, 
        {
            "location": "/ref/controller/Controller/#function-unregisterscheme", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _scheme   of type address \n2.  unnamed   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function unregisterScheme"
        }, 
        {
            "location": "/ref/controller/Controller/#function-unregisterself", 
            "text": "unregister the caller's scheme   Execution cost:  less than 28009 gas.  nonpayable  Inputs: \n1.  unnamed   of type address  bool which represents a success", 
            "title": "function unregisterSelf"
        }, 
        {
            "location": "/ref/controller/Controller/#function-upgradecontroller", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _newController   of type address \n2.  unnamed   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function upgradeController"
        }, 
        {
            "location": "/ref/controller/Controller/#function-nativereputation", 
            "text": "Execution cost:  less than 922 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type address", 
            "title": "function nativeReputation"
        }, 
        {
            "location": "/ref/controller/Controller/#function-removeglobalconstraint", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _globalConstraint   of type address \n2.  unnamed   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function removeGlobalConstraint"
        }, 
        {
            "location": "/ref/controller/Controller/#function-schemes", 
            "text": "Execution cost:  less than 1411 gas.  constant | view  Inputs: \n1.  unnamed   of type address  Returns: \n1.  paramsHash   of type bytes32 \n2.  permissions   of type bytes4", 
            "title": "function schemes"
        }, 
        {
            "location": "/ref/controller/Controller/#function-sendether", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _amountInWei   of type uint256 \n2.  _to   of type address \n3.  unnamed   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function sendEther"
        }, 
        {
            "location": "/ref/controller/Controller/#function-isschemeregistered", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs: \n1.  _scheme   of type address \n2.  unnamed   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function isSchemeRegistered"
        }, 
        {
            "location": "/ref/controller/Controller/#function-minttokens", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _amount   of type uint256 \n2.  _beneficiary   of type address \n3.  unnamed   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function mintTokens"
        }, 
        {
            "location": "/ref/controller/Controller/#function-registerscheme", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _scheme   of type address \n2.  _paramsHash   of type bytes32 \n3.  _permissions   of type bytes4 \n4.  unnamed   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function registerScheme"
        }, 
        {
            "location": "/ref/controller/Controller/#function-nativetoken", 
            "text": "Execution cost:  less than 1054 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type address", 
            "title": "function nativeToken"
        }, 
        {
            "location": "/ref/controller/Controller/#function-newcontroller", 
            "text": "Execution cost:  less than 636 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type address", 
            "title": "function newController"
        }, 
        {
            "location": "/ref/controller/Controller/#function-externaltokendecreaseapproval", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _externalToken   of type address \n2.  _spender   of type address \n3.  _subtractedValue   of type uint256 \n4.  unnamed   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function externalTokenDecreaseApproval"
        }, 
        {
            "location": "/ref/controller/Controller/#function-getschemeparameters", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs: \n1.  _scheme   of type address \n2.  unnamed   of type address  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function getSchemeParameters"
        }, 
        {
            "location": "/ref/controller/Controller/#function-isglobalconstraintregistered", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs: \n1.  _globalConstraint   of type address \n2.  unnamed   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function isGlobalConstraintRegistered"
        }, 
        {
            "location": "/ref/controller/Controller/#function-getschemepermissions", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs: \n1.  _scheme   of type address \n2.  unnamed   of type address  Returns: \n1.  unnamed   of type bytes4", 
            "title": "function getSchemePermissions"
        }, 
        {
            "location": "/ref/controller/Controller/#function-globalconstraintsregister", 
            "text": "Execution cost:  less than 1060 gas.  constant | view  Inputs: \n1.  unnamed   of type address  Returns: \n1.  register   of type bool \n2.  index   of type uint256", 
            "title": "function globalConstraintsRegister"
        }, 
        {
            "location": "/ref/controller/Controller/#function-globalconstraints", 
            "text": "Execution cost:  less than 1390 gas.  constant | view  Inputs: \n1.  unnamed   of type uint256  Returns: \n1.  gcAddress   of type address \n2.  params   of type bytes32", 
            "title": "function globalConstraints"
        }, 
        {
            "location": "/ref/controller/Controller/#function-globalconstraintscount", 
            "text": "Execution cost:  less than 827 gas.  constant | view  Inputs: \n1.  unnamed   of type address  Returns: \n1.  unnamed   of type uint256", 
            "title": "function globalConstraintsCount"
        }, 
        {
            "location": "/ref/controller/Controller/#function-genericaction", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _params   of type bytes32[] \n2.  unnamed   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function genericAction"
        }, 
        {
            "location": "/ref/controller/Controller/#function-externaltokentransferfrom", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _externalToken   of type address \n2.  _from   of type address \n3.  _to   of type address \n4.  _value   of type uint256 \n5.  unnamed   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function externalTokenTransferFrom"
        }, 
        {
            "location": "/ref/controller/Controller/#function-externaltokentransfer", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _externalToken   of type address \n2.  _to   of type address \n3.  _value   of type uint256 \n4.  unnamed   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function externalTokenTransfer"
        }, 
        {
            "location": "/ref/controller/Controller/#function-externaltokenincreaseapproval", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _externalToken   of type address \n2.  _spender   of type address \n3.  _addedValue   of type uint256 \n4.  unnamed   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function externalTokenIncreaseApproval"
        }, 
        {
            "location": "/ref/controller/Controller/#function-avatar", 
            "text": "Execution cost:  less than 702 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type address", 
            "title": "function avatar"
        }, 
        {
            "location": "/ref/controller/Controller/#function-addglobalconstraint", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _globalConstraint   of type address \n2.  _params   of type bytes32 \n3.  unnamed   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function addGlobalConstraint"
        }, 
        {
            "location": "/ref/controller/ControllerInterface/", 
            "text": "contract\n ControllerInterface (\nsource\n)\n\n\nCode deposit cost: \nNo bound available.\n\n\nExecution cost: \nNo bound available.\n\n\nTotal deploy cost(deposit + execution): \nNo bound available.\n\n\n\n\nReference\n\n\n\n\n\n\nConstructors\n\n\n\n\n\n\nEvents\n\n\n\n\n\n\nFallback\n\n\n\n\nFunctions\n\n\nmintReputation\n\n\nunregisterScheme\n\n\nupgradeController\n\n\nunregisterSelf\n\n\ngetSchemePermissions\n\n\ngenericAction\n\n\nmintTokens\n\n\nisGlobalConstraintRegistered\n\n\nremoveGlobalConstraint\n\n\ngetSchemeParameters\n\n\nglobalConstraintsCount\n\n\nsendEther\n\n\nisSchemeRegistered\n\n\nregisterScheme\n\n\nexternalTokenTransferFrom\n\n\nexternalTokenTransfer\n\n\nexternalTokenIncreaseApproval\n\n\nexternalTokenDecreaseApproval\n\n\naddGlobalConstraint\n\n\n\n\n\n\n\n\nConstructors\n\n\nEvents\n\n\nFallback\n\n\nNothing\n\n\nFunctions\n\n\nfunction\n mintReputation\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_amount\n \nof type int256\n\n2. \n_beneficiary\n \nof type address\n\n3. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n unregisterScheme\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_scheme\n \nof type address\n\n2. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n upgradeController\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_newController\n \nof type address\n\n2. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n unregisterSelf\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n getSchemePermissions\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_scheme\n \nof type address\n\n2. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes4\n\n\nfunction\n genericAction\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_params\n \nof type bytes32[]\n\n2. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n mintTokens\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_amount\n \nof type uint256\n\n2. \n_beneficiary\n \nof type address\n\n3. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n isGlobalConstraintRegistered\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_globalConstraint\n \nof type address\n\n2. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n removeGlobalConstraint\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_globalConstraint\n \nof type address\n\n2. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n getSchemeParameters\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_scheme\n \nof type address\n\n2. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n globalConstraintsCount\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type uint256\n\n\nfunction\n sendEther\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_amountInWei\n \nof type uint256\n\n2. \n_to\n \nof type address\n\n3. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n isSchemeRegistered\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_scheme\n \nof type address\n\n2. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n registerScheme\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_scheme\n \nof type address\n\n2. \n_paramsHash\n \nof type bytes32\n\n3. \n_permissions\n \nof type bytes4\n\n4. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n externalTokenTransferFrom\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_externalToken\n \nof type address\n\n2. \n_from\n \nof type address\n\n3. \n_to\n \nof type address\n\n4. \n_value\n \nof type uint256\n\n5. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n externalTokenTransfer\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_externalToken\n \nof type address\n\n2. \n_to\n \nof type address\n\n3. \n_value\n \nof type uint256\n\n4. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n externalTokenIncreaseApproval\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_externalToken\n \nof type address\n\n2. \n_spender\n \nof type address\n\n3. \n_addedValue\n \nof type uint256\n\n4. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n externalTokenDecreaseApproval\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_externalToken\n \nof type address\n\n2. \n_spender\n \nof type address\n\n3. \n_subtractedValue\n \nof type uint256\n\n4. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n addGlobalConstraint\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_globalConstraint\n \nof type address\n\n2. \n_params\n \nof type bytes32\n\n3. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool", 
            "title": "*contract* ControllerInterface ([source](https://github.com/daostack/daostack/tree/master/./contracts/controller/ControllerInterface.sol))"
        }, 
        {
            "location": "/ref/controller/ControllerInterface/#contract-controllerinterface-source", 
            "text": "Code deposit cost:  No bound available.  Execution cost:  No bound available.  Total deploy cost(deposit + execution):  No bound available.", 
            "title": "contract ControllerInterface (source)"
        }, 
        {
            "location": "/ref/controller/ControllerInterface/#reference", 
            "text": "Constructors    Events    Fallback   Functions  mintReputation  unregisterScheme  upgradeController  unregisterSelf  getSchemePermissions  genericAction  mintTokens  isGlobalConstraintRegistered  removeGlobalConstraint  getSchemeParameters  globalConstraintsCount  sendEther  isSchemeRegistered  registerScheme  externalTokenTransferFrom  externalTokenTransfer  externalTokenIncreaseApproval  externalTokenDecreaseApproval  addGlobalConstraint", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/controller/ControllerInterface/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/controller/ControllerInterface/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/controller/ControllerInterface/#fallback", 
            "text": "Nothing", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/controller/ControllerInterface/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/controller/ControllerInterface/#function-mintreputation", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _amount   of type int256 \n2.  _beneficiary   of type address \n3.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function mintReputation"
        }, 
        {
            "location": "/ref/controller/ControllerInterface/#function-unregisterscheme", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _scheme   of type address \n2.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function unregisterScheme"
        }, 
        {
            "location": "/ref/controller/ControllerInterface/#function-upgradecontroller", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _newController   of type address \n2.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function upgradeController"
        }, 
        {
            "location": "/ref/controller/ControllerInterface/#function-unregisterself", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function unregisterSelf"
        }, 
        {
            "location": "/ref/controller/ControllerInterface/#function-getschemepermissions", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs: \n1.  _scheme   of type address \n2.  _avatar   of type address  Returns: \n1.  unnamed   of type bytes4", 
            "title": "function getSchemePermissions"
        }, 
        {
            "location": "/ref/controller/ControllerInterface/#function-genericaction", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _params   of type bytes32[] \n2.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function genericAction"
        }, 
        {
            "location": "/ref/controller/ControllerInterface/#function-minttokens", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _amount   of type uint256 \n2.  _beneficiary   of type address \n3.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function mintTokens"
        }, 
        {
            "location": "/ref/controller/ControllerInterface/#function-isglobalconstraintregistered", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs: \n1.  _globalConstraint   of type address \n2.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function isGlobalConstraintRegistered"
        }, 
        {
            "location": "/ref/controller/ControllerInterface/#function-removeglobalconstraint", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _globalConstraint   of type address \n2.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function removeGlobalConstraint"
        }, 
        {
            "location": "/ref/controller/ControllerInterface/#function-getschemeparameters", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs: \n1.  _scheme   of type address \n2.  _avatar   of type address  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function getSchemeParameters"
        }, 
        {
            "location": "/ref/controller/ControllerInterface/#function-globalconstraintscount", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs: \n1.  _avatar   of type address  Returns: \n1.  unnamed   of type uint256", 
            "title": "function globalConstraintsCount"
        }, 
        {
            "location": "/ref/controller/ControllerInterface/#function-sendether", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _amountInWei   of type uint256 \n2.  _to   of type address \n3.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function sendEther"
        }, 
        {
            "location": "/ref/controller/ControllerInterface/#function-isschemeregistered", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs: \n1.  _scheme   of type address \n2.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function isSchemeRegistered"
        }, 
        {
            "location": "/ref/controller/ControllerInterface/#function-registerscheme", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _scheme   of type address \n2.  _paramsHash   of type bytes32 \n3.  _permissions   of type bytes4 \n4.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function registerScheme"
        }, 
        {
            "location": "/ref/controller/ControllerInterface/#function-externaltokentransferfrom", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _externalToken   of type address \n2.  _from   of type address \n3.  _to   of type address \n4.  _value   of type uint256 \n5.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function externalTokenTransferFrom"
        }, 
        {
            "location": "/ref/controller/ControllerInterface/#function-externaltokentransfer", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _externalToken   of type address \n2.  _to   of type address \n3.  _value   of type uint256 \n4.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function externalTokenTransfer"
        }, 
        {
            "location": "/ref/controller/ControllerInterface/#function-externaltokenincreaseapproval", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _externalToken   of type address \n2.  _spender   of type address \n3.  _addedValue   of type uint256 \n4.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function externalTokenIncreaseApproval"
        }, 
        {
            "location": "/ref/controller/ControllerInterface/#function-externaltokendecreaseapproval", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _externalToken   of type address \n2.  _spender   of type address \n3.  _subtractedValue   of type uint256 \n4.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function externalTokenDecreaseApproval"
        }, 
        {
            "location": "/ref/controller/ControllerInterface/#function-addglobalconstraint", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _globalConstraint   of type address \n2.  _params   of type bytes32 \n3.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function addGlobalConstraint"
        }, 
        {
            "location": "/ref/controller/DAOToken/", 
            "text": "contract\n DAOToken (\nsource\n)\n\n\nCode deposit cost: \nless than 683600 gas.\n\n\nExecution cost: \nNo bound available.\n\n\nTotal deploy cost(deposit + execution): \nless than 683600 gas.\n\n\n\n\nDAOToken, base on zeppelin contract.\n\n\n\n\nThe \nDAO token\n is a simple token that is used by DAOs to assign value to, and reward participants actions. \nIt can be \nminted\n or \nburned\n by the DAO and also be \ndestroyed\n in the event of an upgrade to a better token or in other circumstances.\n\n\nReference\n\n\n\n\nConstructors\n\n\nDAOToken(string, string)\n\n\n\n\n\n\nEvents\n\n\nTransfer\n\n\nOwnershipTransferred\n\n\nMintFinished\n\n\nMint\n\n\nBurn\n\n\nApproval\n\n\n\n\n\n\nFallback\n\n\nFunctions\n\n\nbalanceOf\n\n\nmintingFinished\n\n\ntransferOwnership\n\n\ntotalSupply\n\n\ntransferFrom\n\n\ntransfer\n\n\nsymbol\n\n\nowner\n\n\nname\n\n\nmint\n\n\nincreaseApproval\n\n\nfinishMinting\n\n\ndestroyAndSend\n\n\ndestroy\n\n\ndecreaseApproval\n\n\nburn\n\n\napprove\n\n\nallowance\n\n\nDECIMAL\n\n\n\n\n\n\n\n\nConstructors\n\n\nconstructor\n DAOToken(string, string)\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nParams:\n\n1. \n_name\n \nof type string\n\n2. \n_symbol\n \nof type string\n\n\nEvents\n\n\nevent\n Transfer\n\n\nParams:\n\n1. \nfrom\n \nof type address\n\n2. \nto\n \nof type address\n\n3. \nvalue\n \nof type uint256\n\n\nevent\n OwnershipTransferred\n\n\nParams:\n\n1. \npreviousOwner\n \nof type address\n\n2. \nnewOwner\n \nof type address\n\n\nevent\n MintFinished\n\n\nParams:\n\n\nNothing\n\n\nevent\n Mint\n\n\nParams:\n\n1. \nto\n \nof type address\n\n2. \namount\n \nof type uint256\n\n\nevent\n Burn\n\n\nParams:\n\n1. \nburner\n \nof type address\n\n2. \nvalue\n \nof type uint256\n\n\nevent\n Approval\n\n\nParams:\n\n1. \nowner\n \nof type address\n\n2. \nspender\n \nof type address\n\n3. \nvalue\n \nof type uint256\n\n\nFallback\n\n\nNothing\n\n\nFunctions\n\n\nfunction\n balanceOf\n\n\n\n\nGets the balance of the specified address.\n\n\n\n\nExecution cost: \nless than 793 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_owner\n \nof type address- The address to query the the balance of.\n\n\nAn uint256 representing the amount owned by the passed address.\n\n\nfunction\n mintingFinished\n\n\nExecution cost: \nless than 459 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n transferOwnership\n\n\n\n\nAllows the current owner to transfer control of the contract to a newOwner.\n\n\n\n\nExecution cost: \nless than 23118 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \nnewOwner\n \nof type address- The address to transfer ownership to.\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n totalSupply\n\n\nExecution cost: \nless than 439 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type uint256\n\n\nfunction\n transferFrom\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_from\n \nof type address\n\n2. \n_to\n \nof type address\n\n3. \n_value\n \nof type uint256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n transfer\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_to\n \nof type address\n\n2. \n_value\n \nof type uint256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n symbol\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type string\n\n\nfunction\n owner\n\n\nExecution cost: \nless than 793 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type address\n\n\nfunction\n name\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type string\n\n\nfunction\n mint\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_to\n \nof type address\n\n2. \n_amount\n \nof type uint256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n increaseApproval\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_spender\n \nof type address\n\n2. \n_addedValue\n \nof type uint256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n finishMinting\n\n\n\n\nFunction to stop minting new tokens.\n\n\n\n\nExecution cost: \nless than 22080 gas.\n\n\nnonpayable\n\n\nInputs:\n\n\nNothing\n\n\nTrue if the operation was successful.\n\n\nfunction\n destroyAndSend\n\n\nExecution cost: \nless than 30980 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_recipient\n \nof type address\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n destroy\n\n\n\n\nTransfers the current balance to the owner and terminates the contract.\n\n\n\n\nExecution cost: \nless than 30945 gas.\n\n\nnonpayable\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n decreaseApproval\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_spender\n \nof type address\n\n2. \n_subtractedValue\n \nof type uint256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n burn\n\n\n\n\nBurns a specific amount of tokens.\n\n\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_value\n \nof type uint256- The amount of token to be burned.\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n approve\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_spender\n \nof type address\n\n2. \n_value\n \nof type uint256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n allowance\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_owner\n \nof type address\n\n2. \n_spender\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type uint256\n\n\nfunction\n DECIMAL\n\n\nExecution cost: \nless than 349 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type uint256", 
            "title": "*contract* DAOToken ([source](https://github.com/daostack/daostack/tree/master/./contracts/controller/DAOToken.sol))"
        }, 
        {
            "location": "/ref/controller/DAOToken/#contract-daotoken-source", 
            "text": "Code deposit cost:  less than 683600 gas.  Execution cost:  No bound available.  Total deploy cost(deposit + execution):  less than 683600 gas.   DAOToken, base on zeppelin contract.   The  DAO token  is a simple token that is used by DAOs to assign value to, and reward participants actions. \nIt can be  minted  or  burned  by the DAO and also be  destroyed  in the event of an upgrade to a better token or in other circumstances.", 
            "title": "contract DAOToken (source)"
        }, 
        {
            "location": "/ref/controller/DAOToken/#reference", 
            "text": "Constructors  DAOToken(string, string)    Events  Transfer  OwnershipTransferred  MintFinished  Mint  Burn  Approval    Fallback  Functions  balanceOf  mintingFinished  transferOwnership  totalSupply  transferFrom  transfer  symbol  owner  name  mint  increaseApproval  finishMinting  destroyAndSend  destroy  decreaseApproval  burn  approve  allowance  DECIMAL", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/controller/DAOToken/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/controller/DAOToken/#constructor-daotokenstring-string", 
            "text": "Execution cost:  No bound available.  nonpayable  Params: \n1.  _name   of type string \n2.  _symbol   of type string", 
            "title": "constructor DAOToken(string, string)"
        }, 
        {
            "location": "/ref/controller/DAOToken/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/controller/DAOToken/#event-transfer", 
            "text": "Params: \n1.  from   of type address \n2.  to   of type address \n3.  value   of type uint256", 
            "title": "event Transfer"
        }, 
        {
            "location": "/ref/controller/DAOToken/#event-ownershiptransferred", 
            "text": "Params: \n1.  previousOwner   of type address \n2.  newOwner   of type address", 
            "title": "event OwnershipTransferred"
        }, 
        {
            "location": "/ref/controller/DAOToken/#event-mintfinished", 
            "text": "Params:  Nothing", 
            "title": "event MintFinished"
        }, 
        {
            "location": "/ref/controller/DAOToken/#event-mint", 
            "text": "Params: \n1.  to   of type address \n2.  amount   of type uint256", 
            "title": "event Mint"
        }, 
        {
            "location": "/ref/controller/DAOToken/#event-burn", 
            "text": "Params: \n1.  burner   of type address \n2.  value   of type uint256", 
            "title": "event Burn"
        }, 
        {
            "location": "/ref/controller/DAOToken/#event-approval", 
            "text": "Params: \n1.  owner   of type address \n2.  spender   of type address \n3.  value   of type uint256", 
            "title": "event Approval"
        }, 
        {
            "location": "/ref/controller/DAOToken/#fallback", 
            "text": "Nothing", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/controller/DAOToken/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/controller/DAOToken/#function-balanceof", 
            "text": "Gets the balance of the specified address.   Execution cost:  less than 793 gas.  constant | view  Inputs: \n1.  _owner   of type address- The address to query the the balance of.  An uint256 representing the amount owned by the passed address.", 
            "title": "function balanceOf"
        }, 
        {
            "location": "/ref/controller/DAOToken/#function-mintingfinished", 
            "text": "Execution cost:  less than 459 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type bool", 
            "title": "function mintingFinished"
        }, 
        {
            "location": "/ref/controller/DAOToken/#function-transferownership", 
            "text": "Allows the current owner to transfer control of the contract to a newOwner.   Execution cost:  less than 23118 gas.  nonpayable  Inputs: \n1.  newOwner   of type address- The address to transfer ownership to.  Returns:  Nothing", 
            "title": "function transferOwnership"
        }, 
        {
            "location": "/ref/controller/DAOToken/#function-totalsupply", 
            "text": "Execution cost:  less than 439 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type uint256", 
            "title": "function totalSupply"
        }, 
        {
            "location": "/ref/controller/DAOToken/#function-transferfrom", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _from   of type address \n2.  _to   of type address \n3.  _value   of type uint256  Returns: \n1.  unnamed   of type bool", 
            "title": "function transferFrom"
        }, 
        {
            "location": "/ref/controller/DAOToken/#function-transfer", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _to   of type address \n2.  _value   of type uint256  Returns: \n1.  unnamed   of type bool", 
            "title": "function transfer"
        }, 
        {
            "location": "/ref/controller/DAOToken/#function-symbol", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type string", 
            "title": "function symbol"
        }, 
        {
            "location": "/ref/controller/DAOToken/#function-owner", 
            "text": "Execution cost:  less than 793 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type address", 
            "title": "function owner"
        }, 
        {
            "location": "/ref/controller/DAOToken/#function-name", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type string", 
            "title": "function name"
        }, 
        {
            "location": "/ref/controller/DAOToken/#function-mint", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _to   of type address \n2.  _amount   of type uint256  Returns: \n1.  unnamed   of type bool", 
            "title": "function mint"
        }, 
        {
            "location": "/ref/controller/DAOToken/#function-increaseapproval", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _spender   of type address \n2.  _addedValue   of type uint256  Returns: \n1.  unnamed   of type bool", 
            "title": "function increaseApproval"
        }, 
        {
            "location": "/ref/controller/DAOToken/#function-finishminting", 
            "text": "Function to stop minting new tokens.   Execution cost:  less than 22080 gas.  nonpayable  Inputs:  Nothing  True if the operation was successful.", 
            "title": "function finishMinting"
        }, 
        {
            "location": "/ref/controller/DAOToken/#function-destroyandsend", 
            "text": "Execution cost:  less than 30980 gas.  nonpayable  Inputs: \n1.  _recipient   of type address  Returns:  Nothing", 
            "title": "function destroyAndSend"
        }, 
        {
            "location": "/ref/controller/DAOToken/#function-destroy", 
            "text": "Transfers the current balance to the owner and terminates the contract.   Execution cost:  less than 30945 gas.  nonpayable  Inputs:  Nothing  Returns:  Nothing", 
            "title": "function destroy"
        }, 
        {
            "location": "/ref/controller/DAOToken/#function-decreaseapproval", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _spender   of type address \n2.  _subtractedValue   of type uint256  Returns: \n1.  unnamed   of type bool", 
            "title": "function decreaseApproval"
        }, 
        {
            "location": "/ref/controller/DAOToken/#function-burn", 
            "text": "Burns a specific amount of tokens.   Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _value   of type uint256- The amount of token to be burned.  Returns:  Nothing", 
            "title": "function burn"
        }, 
        {
            "location": "/ref/controller/DAOToken/#function-approve", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _spender   of type address \n2.  _value   of type uint256  Returns: \n1.  unnamed   of type bool", 
            "title": "function approve"
        }, 
        {
            "location": "/ref/controller/DAOToken/#function-allowance", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs: \n1.  _owner   of type address \n2.  _spender   of type address  Returns: \n1.  unnamed   of type uint256", 
            "title": "function allowance"
        }, 
        {
            "location": "/ref/controller/DAOToken/#function-decimal", 
            "text": "Execution cost:  less than 349 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type uint256", 
            "title": "function DECIMAL"
        }, 
        {
            "location": "/ref/controller/Reputation/", 
            "text": "contract\n Reputation (\nsource\n)\n\n\nCode deposit cost: \nless than 168000 gas.\n\n\nExecution cost: \nless than 50663 gas.\n\n\nTotal deploy cost(deposit + execution): \nless than 218663 gas.\n\n\n\n\nSimple static reputation storage\n\n\n\n\nA \nReputation\n is a way of assigning importance to participants and their votes. \n\nReputation\n is similar to regular tokens but with one crucial difference: \nIt is non-transferable\n.\n\n\nReference\n\n\n\n\nConstructors\n\n\nReputation()\n\n\n\n\n\n\nEvents\n\n\nOwnershipTransferred\n\n\nMint\n\n\n\n\n\n\nFallback\n\n\nFunctions\n\n\ntransferOwnership\n\n\ntotalSupply\n\n\nreputationOf\n\n\nowner\n\n\nmint\n\n\ndecimals\n\n\n\n\n\n\n\n\nConstructors\n\n\nconstructor\n Reputation()\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nParams:\n\n\nNothing\n\n\nEvents\n\n\nevent\n OwnershipTransferred\n\n\nParams:\n\n1. \npreviousOwner\n \nof type address\n\n2. \nnewOwner\n \nof type address\n\n\nevent\n Mint\n\n\nParams:\n\n1. \nto\n \nof type address\n\n2. \namount\n \nof type int256\n\n\nFallback\n\n\nNothing\n\n\nFunctions\n\n\nfunction\n transferOwnership\n\n\n\n\nAllows the current owner to transfer control of the contract to a newOwner.\n\n\n\n\nExecution cost: \nless than 22832 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \nnewOwner\n \nof type address- The address to transfer ownership to.\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n totalSupply\n\n\nExecution cost: \nless than 373 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type uint256\n\n\nfunction\n reputationOf\n\n\n\n\nreturn the reputation amount of a given owner\n\n\n\n\nExecution cost: \nless than 661 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_owner\n \nof type address- an address of the owner which we want to get his reputation\n\n\nReturns:\n\n1. \nbalance\n \nof type uint256\n\n\nfunction\n owner\n\n\nExecution cost: \nless than 573 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type address\n\n\nfunction\n mint\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_to\n \nof type address\n\n2. \n_amount\n \nof type int256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n decimals\n\n\nExecution cost: \nless than 395 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type uint256", 
            "title": "*contract* Reputation ([source](https://github.com/daostack/daostack/tree/master/./contracts/controller/Reputation.sol))"
        }, 
        {
            "location": "/ref/controller/Reputation/#contract-reputation-source", 
            "text": "Code deposit cost:  less than 168000 gas.  Execution cost:  less than 50663 gas.  Total deploy cost(deposit + execution):  less than 218663 gas.   Simple static reputation storage   A  Reputation  is a way of assigning importance to participants and their votes.  Reputation  is similar to regular tokens but with one crucial difference:  It is non-transferable .", 
            "title": "contract Reputation (source)"
        }, 
        {
            "location": "/ref/controller/Reputation/#reference", 
            "text": "Constructors  Reputation()    Events  OwnershipTransferred  Mint    Fallback  Functions  transferOwnership  totalSupply  reputationOf  owner  mint  decimals", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/controller/Reputation/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/controller/Reputation/#constructor-reputation", 
            "text": "Execution cost:  No bound available.  nonpayable  Params:  Nothing", 
            "title": "constructor Reputation()"
        }, 
        {
            "location": "/ref/controller/Reputation/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/controller/Reputation/#event-ownershiptransferred", 
            "text": "Params: \n1.  previousOwner   of type address \n2.  newOwner   of type address", 
            "title": "event OwnershipTransferred"
        }, 
        {
            "location": "/ref/controller/Reputation/#event-mint", 
            "text": "Params: \n1.  to   of type address \n2.  amount   of type int256", 
            "title": "event Mint"
        }, 
        {
            "location": "/ref/controller/Reputation/#fallback", 
            "text": "Nothing", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/controller/Reputation/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/controller/Reputation/#function-transferownership", 
            "text": "Allows the current owner to transfer control of the contract to a newOwner.   Execution cost:  less than 22832 gas.  nonpayable  Inputs: \n1.  newOwner   of type address- The address to transfer ownership to.  Returns:  Nothing", 
            "title": "function transferOwnership"
        }, 
        {
            "location": "/ref/controller/Reputation/#function-totalsupply", 
            "text": "Execution cost:  less than 373 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type uint256", 
            "title": "function totalSupply"
        }, 
        {
            "location": "/ref/controller/Reputation/#function-reputationof", 
            "text": "return the reputation amount of a given owner   Execution cost:  less than 661 gas.  constant | view  Inputs: \n1.  _owner   of type address- an address of the owner which we want to get his reputation  Returns: \n1.  balance   of type uint256", 
            "title": "function reputationOf"
        }, 
        {
            "location": "/ref/controller/Reputation/#function-owner", 
            "text": "Execution cost:  less than 573 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type address", 
            "title": "function owner"
        }, 
        {
            "location": "/ref/controller/Reputation/#function-mint", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _to   of type address \n2.  _amount   of type int256  Returns: \n1.  unnamed   of type bool", 
            "title": "function mint"
        }, 
        {
            "location": "/ref/controller/Reputation/#function-decimals", 
            "text": "Execution cost:  less than 395 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type uint256", 
            "title": "function decimals"
        }, 
        {
            "location": "/ref/controller/UController/", 
            "text": "contract\n UController (\nsource\n)\n\n\nCode deposit cost: \nless than 2864000 gas.\n\n\nExecution cost: \nless than 3126 gas.\n\n\nTotal deploy cost(deposit + execution): \nless than 2867126 gas.\n\n\n\n\nUniversal Controller contract\n\n\n\n\nReference\n\n\n\n\nConstructors\n\n\nUController()\n\n\n\n\n\n\nEvents\n\n\nExternalTokenTransfer\n\n\nUpgradeController\n\n\nExternalTokenTransferFrom\n\n\nRegisterScheme\n\n\nRemoveGlobalConstraint\n\n\nSendEther\n\n\nUnregisterScheme\n\n\nMintTokens\n\n\nMintReputation\n\n\nGenericAction\n\n\nExternalTokenIncreaseApproval\n\n\nExternalTokenDecreaseApproval\n\n\nAddGlobalConstraint\n\n\n\n\n\n\nFallback\n\n\nFunctions\n\n\nmintReputation\n\n\nunregisterScheme\n\n\nupgradeController\n\n\nunregisterSelf\n\n\ngetSchemePermissions\n\n\nnewControllers\n\n\nsendEther\n\n\nregisterScheme\n\n\nnewOrganization\n\n\nremoveGlobalConstraint\n\n\nexternalTokenTransfer\n\n\ngetSchemeParameters\n\n\nisGlobalConstraintRegistered\n\n\nisSchemeRegistered\n\n\nmintTokens\n\n\nglobalConstraintsCount\n\n\ngenericAction\n\n\nexternalTokenTransferFrom\n\n\nexternalTokenIncreaseApproval\n\n\nexternalTokenDecreaseApproval\n\n\naddGlobalConstraint\n\n\n\n\n\n\n\n\nConstructors\n\n\nconstructor\n UController()\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nParams:\n\n\nNothing\n\n\nEvents\n\n\nevent\n ExternalTokenTransfer\n\n\nParams:\n\n1. \n_sender\n \nof type address\n\n2. \n_externalToken\n \nof type address\n\n3. \n_to\n \nof type address\n\n4. \n_value\n \nof type uint256\n\n\nevent\n UpgradeController\n\n\nParams:\n\n1. \n_oldController\n \nof type address\n\n2. \n_newController\n \nof type address\n\n3. \n_avatar\n \nof type address\n\n\nevent\n ExternalTokenTransferFrom\n\n\nParams:\n\n1. \n_sender\n \nof type address\n\n2. \n_externalToken\n \nof type address\n\n3. \n_from\n \nof type address\n\n4. \n_to\n \nof type address\n\n5. \n_value\n \nof type uint256\n\n\nevent\n RegisterScheme\n\n\nParams:\n\n1. \n_sender\n \nof type address\n\n2. \n_scheme\n \nof type address\n\n3. \n_avatar\n \nof type address\n\n\nevent\n RemoveGlobalConstraint\n\n\nParams:\n\n1. \n_globalConstraint\n \nof type address\n\n2. \n_index\n \nof type uint256\n\n\nevent\n SendEther\n\n\nParams:\n\n1. \n_sender\n \nof type address\n\n2. \n_amountInWei\n \nof type uint256\n\n3. \n_to\n \nof type address\n\n\nevent\n UnregisterScheme\n\n\nParams:\n\n1. \n_sender\n \nof type address\n\n2. \n_scheme\n \nof type address\n\n3. \n_avatar\n \nof type address\n\n\nevent\n MintTokens\n\n\nParams:\n\n1. \n_sender\n \nof type address\n\n2. \n_beneficiary\n \nof type address\n\n3. \n_amount\n \nof type uint256\n\n4. \n_avatar\n \nof type address\n\n\nevent\n MintReputation\n\n\nParams:\n\n1. \n_sender\n \nof type address\n\n2. \n_beneficiary\n \nof type address\n\n3. \n_amount\n \nof type int256\n\n4. \n_avatar\n \nof type address\n\n\nevent\n GenericAction\n\n\nParams:\n\n1. \n_sender\n \nof type address\n\n2. \n_params\n \nof type bytes32[]\n\n\nevent\n ExternalTokenIncreaseApproval\n\n\nParams:\n\n1. \n_sender\n \nof type address\n\n2. \n_externalToken\n \nof type address\n\n3. \n_spender\n \nof type address\n\n4. \n_value\n \nof type uint256\n\n\nevent\n ExternalTokenDecreaseApproval\n\n\nParams:\n\n1. \n_sender\n \nof type address\n\n2. \n_externalToken\n \nof type address\n\n3. \n_spender\n \nof type address\n\n4. \n_value\n \nof type uint256\n\n\nevent\n AddGlobalConstraint\n\n\nParams:\n\n1. \n_globalConstraint\n \nof type address\n\n2. \n_params\n \nof type bytes32\n\n\nFallback\n\n\nNothing\n\n\nFunctions\n\n\nfunction\n mintReputation\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_amount\n \nof type int256\n\n2. \n_beneficiary\n \nof type address\n\n3. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n unregisterScheme\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_scheme\n \nof type address\n\n2. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n upgradeController\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_newController\n \nof type address\n\n2. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n unregisterSelf\n\n\n\n\nunregister the caller's scheme\n\n\n\n\nExecution cost: \nless than 28509 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_avatar\n \nof type address- the organization avatar.\n\n\nbool which represents a success\n\n\nfunction\n getSchemePermissions\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_scheme\n \nof type address\n\n2. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes4\n\n\nfunction\n newControllers\n\n\nExecution cost: \nless than 824 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type address\n\n\nfunction\n sendEther\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_amountInWei\n \nof type uint256\n\n2. \n_to\n \nof type address\n\n3. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n registerScheme\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_scheme\n \nof type address\n\n2. \n_paramsHash\n \nof type bytes32\n\n3. \n_permissions\n \nof type bytes4\n\n4. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n newOrganization\n\n\n\n\nnewOrganization set up a new organization with default genesisScheme.\n\n\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_avatar\n \nof type address- the organization avatar\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n removeGlobalConstraint\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_globalConstraint\n \nof type address\n\n2. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n externalTokenTransfer\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_externalToken\n \nof type address\n\n2. \n_to\n \nof type address\n\n3. \n_value\n \nof type uint256\n\n4. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n getSchemeParameters\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_scheme\n \nof type address\n\n2. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n isGlobalConstraintRegistered\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_globalConstraint\n \nof type address\n\n2. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n isSchemeRegistered\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_scheme\n \nof type address\n\n2. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n mintTokens\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_amount\n \nof type uint256\n\n2. \n_beneficiary\n \nof type address\n\n3. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n globalConstraintsCount\n\n\nExecution cost: \nless than 909 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type uint256\n\n\nfunction\n genericAction\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_params\n \nof type bytes32[]\n\n2. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n externalTokenTransferFrom\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_externalToken\n \nof type address\n\n2. \n_from\n \nof type address\n\n3. \n_to\n \nof type address\n\n4. \n_value\n \nof type uint256\n\n5. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n externalTokenIncreaseApproval\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_externalToken\n \nof type address\n\n2. \n_spender\n \nof type address\n\n3. \n_addedValue\n \nof type uint256\n\n4. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n externalTokenDecreaseApproval\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_externalToken\n \nof type address\n\n2. \n_spender\n \nof type address\n\n3. \n_subtractedValue\n \nof type uint256\n\n4. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n addGlobalConstraint\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_globalConstraint\n \nof type address\n\n2. \n_params\n \nof type bytes32\n\n3. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool", 
            "title": "*contract* UController ([source](https://github.com/daostack/daostack/tree/master/./contracts/controller/UController.sol))"
        }, 
        {
            "location": "/ref/controller/UController/#contract-ucontroller-source", 
            "text": "Code deposit cost:  less than 2864000 gas.  Execution cost:  less than 3126 gas.  Total deploy cost(deposit + execution):  less than 2867126 gas.   Universal Controller contract", 
            "title": "contract UController (source)"
        }, 
        {
            "location": "/ref/controller/UController/#reference", 
            "text": "Constructors  UController()    Events  ExternalTokenTransfer  UpgradeController  ExternalTokenTransferFrom  RegisterScheme  RemoveGlobalConstraint  SendEther  UnregisterScheme  MintTokens  MintReputation  GenericAction  ExternalTokenIncreaseApproval  ExternalTokenDecreaseApproval  AddGlobalConstraint    Fallback  Functions  mintReputation  unregisterScheme  upgradeController  unregisterSelf  getSchemePermissions  newControllers  sendEther  registerScheme  newOrganization  removeGlobalConstraint  externalTokenTransfer  getSchemeParameters  isGlobalConstraintRegistered  isSchemeRegistered  mintTokens  globalConstraintsCount  genericAction  externalTokenTransferFrom  externalTokenIncreaseApproval  externalTokenDecreaseApproval  addGlobalConstraint", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/controller/UController/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/controller/UController/#constructor-ucontroller", 
            "text": "Execution cost:  No bound available.  nonpayable  Params:  Nothing", 
            "title": "constructor UController()"
        }, 
        {
            "location": "/ref/controller/UController/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/controller/UController/#event-externaltokentransfer", 
            "text": "Params: \n1.  _sender   of type address \n2.  _externalToken   of type address \n3.  _to   of type address \n4.  _value   of type uint256", 
            "title": "event ExternalTokenTransfer"
        }, 
        {
            "location": "/ref/controller/UController/#event-upgradecontroller", 
            "text": "Params: \n1.  _oldController   of type address \n2.  _newController   of type address \n3.  _avatar   of type address", 
            "title": "event UpgradeController"
        }, 
        {
            "location": "/ref/controller/UController/#event-externaltokentransferfrom", 
            "text": "Params: \n1.  _sender   of type address \n2.  _externalToken   of type address \n3.  _from   of type address \n4.  _to   of type address \n5.  _value   of type uint256", 
            "title": "event ExternalTokenTransferFrom"
        }, 
        {
            "location": "/ref/controller/UController/#event-registerscheme", 
            "text": "Params: \n1.  _sender   of type address \n2.  _scheme   of type address \n3.  _avatar   of type address", 
            "title": "event RegisterScheme"
        }, 
        {
            "location": "/ref/controller/UController/#event-removeglobalconstraint", 
            "text": "Params: \n1.  _globalConstraint   of type address \n2.  _index   of type uint256", 
            "title": "event RemoveGlobalConstraint"
        }, 
        {
            "location": "/ref/controller/UController/#event-sendether", 
            "text": "Params: \n1.  _sender   of type address \n2.  _amountInWei   of type uint256 \n3.  _to   of type address", 
            "title": "event SendEther"
        }, 
        {
            "location": "/ref/controller/UController/#event-unregisterscheme", 
            "text": "Params: \n1.  _sender   of type address \n2.  _scheme   of type address \n3.  _avatar   of type address", 
            "title": "event UnregisterScheme"
        }, 
        {
            "location": "/ref/controller/UController/#event-minttokens", 
            "text": "Params: \n1.  _sender   of type address \n2.  _beneficiary   of type address \n3.  _amount   of type uint256 \n4.  _avatar   of type address", 
            "title": "event MintTokens"
        }, 
        {
            "location": "/ref/controller/UController/#event-mintreputation", 
            "text": "Params: \n1.  _sender   of type address \n2.  _beneficiary   of type address \n3.  _amount   of type int256 \n4.  _avatar   of type address", 
            "title": "event MintReputation"
        }, 
        {
            "location": "/ref/controller/UController/#event-genericaction", 
            "text": "Params: \n1.  _sender   of type address \n2.  _params   of type bytes32[]", 
            "title": "event GenericAction"
        }, 
        {
            "location": "/ref/controller/UController/#event-externaltokenincreaseapproval", 
            "text": "Params: \n1.  _sender   of type address \n2.  _externalToken   of type address \n3.  _spender   of type address \n4.  _value   of type uint256", 
            "title": "event ExternalTokenIncreaseApproval"
        }, 
        {
            "location": "/ref/controller/UController/#event-externaltokendecreaseapproval", 
            "text": "Params: \n1.  _sender   of type address \n2.  _externalToken   of type address \n3.  _spender   of type address \n4.  _value   of type uint256", 
            "title": "event ExternalTokenDecreaseApproval"
        }, 
        {
            "location": "/ref/controller/UController/#event-addglobalconstraint", 
            "text": "Params: \n1.  _globalConstraint   of type address \n2.  _params   of type bytes32", 
            "title": "event AddGlobalConstraint"
        }, 
        {
            "location": "/ref/controller/UController/#fallback", 
            "text": "Nothing", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/controller/UController/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/controller/UController/#function-mintreputation", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _amount   of type int256 \n2.  _beneficiary   of type address \n3.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function mintReputation"
        }, 
        {
            "location": "/ref/controller/UController/#function-unregisterscheme", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _scheme   of type address \n2.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function unregisterScheme"
        }, 
        {
            "location": "/ref/controller/UController/#function-upgradecontroller", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _newController   of type address \n2.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function upgradeController"
        }, 
        {
            "location": "/ref/controller/UController/#function-unregisterself", 
            "text": "unregister the caller's scheme   Execution cost:  less than 28509 gas.  nonpayable  Inputs: \n1.  _avatar   of type address- the organization avatar.  bool which represents a success", 
            "title": "function unregisterSelf"
        }, 
        {
            "location": "/ref/controller/UController/#function-getschemepermissions", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs: \n1.  _scheme   of type address \n2.  _avatar   of type address  Returns: \n1.  unnamed   of type bytes4", 
            "title": "function getSchemePermissions"
        }, 
        {
            "location": "/ref/controller/UController/#function-newcontrollers", 
            "text": "Execution cost:  less than 824 gas.  constant | view  Inputs: \n1.  unnamed   of type address  Returns: \n1.  unnamed   of type address", 
            "title": "function newControllers"
        }, 
        {
            "location": "/ref/controller/UController/#function-sendether", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _amountInWei   of type uint256 \n2.  _to   of type address \n3.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function sendEther"
        }, 
        {
            "location": "/ref/controller/UController/#function-registerscheme", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _scheme   of type address \n2.  _paramsHash   of type bytes32 \n3.  _permissions   of type bytes4 \n4.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function registerScheme"
        }, 
        {
            "location": "/ref/controller/UController/#function-neworganization", 
            "text": "newOrganization set up a new organization with default genesisScheme.   Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _avatar   of type address- the organization avatar  Returns:  Nothing", 
            "title": "function newOrganization"
        }, 
        {
            "location": "/ref/controller/UController/#function-removeglobalconstraint", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _globalConstraint   of type address \n2.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function removeGlobalConstraint"
        }, 
        {
            "location": "/ref/controller/UController/#function-externaltokentransfer", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _externalToken   of type address \n2.  _to   of type address \n3.  _value   of type uint256 \n4.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function externalTokenTransfer"
        }, 
        {
            "location": "/ref/controller/UController/#function-getschemeparameters", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs: \n1.  _scheme   of type address \n2.  _avatar   of type address  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function getSchemeParameters"
        }, 
        {
            "location": "/ref/controller/UController/#function-isglobalconstraintregistered", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs: \n1.  _globalConstraint   of type address \n2.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function isGlobalConstraintRegistered"
        }, 
        {
            "location": "/ref/controller/UController/#function-isschemeregistered", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs: \n1.  _scheme   of type address \n2.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function isSchemeRegistered"
        }, 
        {
            "location": "/ref/controller/UController/#function-minttokens", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _amount   of type uint256 \n2.  _beneficiary   of type address \n3.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function mintTokens"
        }, 
        {
            "location": "/ref/controller/UController/#function-globalconstraintscount", 
            "text": "Execution cost:  less than 909 gas.  constant | view  Inputs: \n1.  _avatar   of type address  Returns: \n1.  unnamed   of type uint256", 
            "title": "function globalConstraintsCount"
        }, 
        {
            "location": "/ref/controller/UController/#function-genericaction", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _params   of type bytes32[] \n2.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function genericAction"
        }, 
        {
            "location": "/ref/controller/UController/#function-externaltokentransferfrom", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _externalToken   of type address \n2.  _from   of type address \n3.  _to   of type address \n4.  _value   of type uint256 \n5.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function externalTokenTransferFrom"
        }, 
        {
            "location": "/ref/controller/UController/#function-externaltokenincreaseapproval", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _externalToken   of type address \n2.  _spender   of type address \n3.  _addedValue   of type uint256 \n4.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function externalTokenIncreaseApproval"
        }, 
        {
            "location": "/ref/controller/UController/#function-externaltokendecreaseapproval", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _externalToken   of type address \n2.  _spender   of type address \n3.  _subtractedValue   of type uint256 \n4.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function externalTokenDecreaseApproval"
        }, 
        {
            "location": "/ref/controller/UController/#function-addglobalconstraint", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _globalConstraint   of type address \n2.  _params   of type bytes32 \n3.  _avatar   of type address  Returns: \n1.  unnamed   of type bool", 
            "title": "function addGlobalConstraint"
        }, 
        {
            "location": "/ref/globalConstraints/GlobalConstraintInterface/", 
            "text": "contract\n GlobalConstraintInterface (\nsource\n)\n\n\nCode deposit cost: \nNo bound available.\n\n\nExecution cost: \nNo bound available.\n\n\nTotal deploy cost(deposit + execution): \nNo bound available.\n\n\n\n\nrelated: \nTokenCapGC\n\n\n\n\nGlobal Constraint\ns define certain conditions the DAO must hold at all times. More concretely, they define \npre\n \n \npost\n conditions that must hold before \n after any action the DAO takes.\nThey are meant to be \nUniversal\n(i.e. only one deployed instance), but do not strictly need to be.\n\n\nWhen an action is about to happen, the \nController\n consults the \nGlobal Constraint\n and runs it's \npre\n \n \npost\n methods to see if the conditions hold.\nIt passes the following parameters to \npre\n \n \npost\n:\n1. \naddress scheme\n - the scheme that performs the action.\n2. \nbytes32 hash\n - a hash of the parameters to be used.\n3. \nbytes32 method\n - what kind of event occurred, available \nmethod\ns:\n    - \nmintReputation\n\n    - \nmintTokens\n\n    - \nregisterScheme\n\n    - \nunregisterScheme\n\n    - \nsendEther\n\n    - \nexternalTokenTransfer\n\n    - \nexternalTokenTransferFrom\n\n    - \nexternalTokenIncreaseApproval\n\n    - \nexternalTokenDecreaseApproval\n\n    - \ngenericAction\n - all other actions.\n\n\nExamples\n\n\nA simple time-lock constraint for registering schemes\n\n\nDefining it\n\n\nWe are going to define a simple global constraint that disallows registering new \nScheme\ns during a certain time period.\n\n\nimport 'daostack-arc/contracts/globalConstraints/GlobalConstraintInterface.sol';\n\ncontract SchemeRegisterTimeLock is GlobalConstraintInterface{\n\n    /* Define how our parameters look like*/\n    struct Params{\n        uint start;\n        uint end;\n    }\n\n    mapping(bytes32=\nParams) public params;\n\n    function setParams(uint start, uint end) returns(bytes32){\n        bytes32 hash = keccak256(start,end);\n        params[hash].start = start;\n        params[hash].end = end;\n        return hash;\n    }\n\n    function pre(address scheme, bytes32 hash, bytes32 method){\n        /* This runs *before* an action is taken */\n\n        /* make sure no registerations occur between `start` and `end`*/\n        if(method == \nregisterScheme\n \n            \n params[hash].start \n= now \n            \n now \n= params[hash].end)\n                return false;\n\n        return true;\n    }\n\n    function post(address scheme, bytes32 hash, bytes32 method){\n        /* This runs *after* an action is taken */\n        return true;\n    }\n}\n\n\n\n\nRegistering it with the controller\n\n\nRegistering a global constraint is done inside a method of a \nScheme\n which is permitted to add/remove global constraints. \n\n\nSchemeRegisterTimeLock gc = new SchemeRegisterTimeLock();\n\n/* Somewhere inside a scheme with permission to add global constraints */\nbytes32 hash = gc.setParameters(now,now + 2 days)\ncontoller.addGlobalConstraint(address(myGlobalConstraint),hash)\n\n\n\n\nReference\n\n\n\n\n\n\nConstructors\n\n\n\n\n\n\nEvents\n\n\n\n\n\n\nFallback\n\n\n\n\nFunctions\n\n\npre\n\n\npost\n\n\n\n\n\n\n\n\nConstructors\n\n\nEvents\n\n\nFallback\n\n\nNothing\n\n\nFunctions\n\n\nfunction\n pre\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_scheme\n \nof type address\n\n2. \n_params\n \nof type bytes32\n\n3. \n_method\n \nof type bytes32\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n post\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_scheme\n \nof type address\n\n2. \n_params\n \nof type bytes32\n\n3. \n_method\n \nof type bytes32\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool", 
            "title": "*contract* GlobalConstraintInterface ([source](https://github.com/daostack/daostack/tree/master/./contracts/globalConstraints/GlobalConstraintInterface.sol))"
        }, 
        {
            "location": "/ref/globalConstraints/GlobalConstraintInterface/#contract-globalconstraintinterface-source", 
            "text": "Code deposit cost:  No bound available.  Execution cost:  No bound available.  Total deploy cost(deposit + execution):  No bound available.   related:  TokenCapGC   Global Constraint s define certain conditions the DAO must hold at all times. More concretely, they define  pre     post  conditions that must hold before   after any action the DAO takes.\nThey are meant to be  Universal (i.e. only one deployed instance), but do not strictly need to be.  When an action is about to happen, the  Controller  consults the  Global Constraint  and runs it's  pre     post  methods to see if the conditions hold.\nIt passes the following parameters to  pre     post :\n1.  address scheme  - the scheme that performs the action.\n2.  bytes32 hash  - a hash of the parameters to be used.\n3.  bytes32 method  - what kind of event occurred, available  method s:\n    -  mintReputation \n    -  mintTokens \n    -  registerScheme \n    -  unregisterScheme \n    -  sendEther \n    -  externalTokenTransfer \n    -  externalTokenTransferFrom \n    -  externalTokenIncreaseApproval \n    -  externalTokenDecreaseApproval \n    -  genericAction  - all other actions.", 
            "title": "contract GlobalConstraintInterface (source)"
        }, 
        {
            "location": "/ref/globalConstraints/GlobalConstraintInterface/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/ref/globalConstraints/GlobalConstraintInterface/#a-simple-time-lock-constraint-for-registering-schemes", 
            "text": "", 
            "title": "A simple time-lock constraint for registering schemes"
        }, 
        {
            "location": "/ref/globalConstraints/GlobalConstraintInterface/#defining-it", 
            "text": "We are going to define a simple global constraint that disallows registering new  Scheme s during a certain time period.  import 'daostack-arc/contracts/globalConstraints/GlobalConstraintInterface.sol';\n\ncontract SchemeRegisterTimeLock is GlobalConstraintInterface{\n\n    /* Define how our parameters look like*/\n    struct Params{\n        uint start;\n        uint end;\n    }\n\n    mapping(bytes32= Params) public params;\n\n    function setParams(uint start, uint end) returns(bytes32){\n        bytes32 hash = keccak256(start,end);\n        params[hash].start = start;\n        params[hash].end = end;\n        return hash;\n    }\n\n    function pre(address scheme, bytes32 hash, bytes32 method){\n        /* This runs *before* an action is taken */\n\n        /* make sure no registerations occur between `start` and `end`*/\n        if(method ==  registerScheme  \n              params[hash].start  = now \n              now  = params[hash].end)\n                return false;\n\n        return true;\n    }\n\n    function post(address scheme, bytes32 hash, bytes32 method){\n        /* This runs *after* an action is taken */\n        return true;\n    }\n}", 
            "title": "Defining it"
        }, 
        {
            "location": "/ref/globalConstraints/GlobalConstraintInterface/#registering-it-with-the-controller", 
            "text": "Registering a global constraint is done inside a method of a  Scheme  which is permitted to add/remove global constraints.   SchemeRegisterTimeLock gc = new SchemeRegisterTimeLock();\n\n/* Somewhere inside a scheme with permission to add global constraints */\nbytes32 hash = gc.setParameters(now,now + 2 days)\ncontoller.addGlobalConstraint(address(myGlobalConstraint),hash)", 
            "title": "Registering it with the controller"
        }, 
        {
            "location": "/ref/globalConstraints/GlobalConstraintInterface/#reference", 
            "text": "Constructors    Events    Fallback   Functions  pre  post", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/globalConstraints/GlobalConstraintInterface/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/globalConstraints/GlobalConstraintInterface/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/globalConstraints/GlobalConstraintInterface/#fallback", 
            "text": "Nothing", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/globalConstraints/GlobalConstraintInterface/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/globalConstraints/GlobalConstraintInterface/#function-pre", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _scheme   of type address \n2.  _params   of type bytes32 \n3.  _method   of type bytes32  Returns: \n1.  unnamed   of type bool", 
            "title": "function pre"
        }, 
        {
            "location": "/ref/globalConstraints/GlobalConstraintInterface/#function-post", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _scheme   of type address \n2.  _params   of type bytes32 \n3.  _method   of type bytes32  Returns: \n1.  unnamed   of type bool", 
            "title": "function post"
        }, 
        {
            "location": "/ref/globalConstraints/TokenCapGC/", 
            "text": "contract\n TokenCapGC (\nsource\n)\n\n\nCode deposit cost: \nless than 183400 gas.\n\n\nExecution cost: \nless than 221 gas.\n\n\nTotal deploy cost(deposit + execution): \nless than 183621 gas.\n\n\n\n\nToken Cap Global Constraint\n\n\n\n\nTokenCapGC\n is a simple global constraint that limits the number of tokens that can be issued.\n\n\nUsage\n\n\nTokenCapGC gc = new TokenCapGC();\n\n/* some where inside a scheme with relevent permissions */\nbytes32 hash = gc.setParameters(contoller.nativeToken,100) /*limit DAO token issuance to 100*/\ncontroller.addGlobalConstraint(gc,hash)\n\n\n\n\nReference\n\n\n\n\n\n\nConstructors\n\n\n\n\n\n\nEvents\n\n\n\n\n\n\nFallback\n\n\n\n\nFunctions\n\n\nsetParameters\n\n\npre\n\n\npost\n\n\nparams\n\n\ngetParametersHash\n\n\n\n\n\n\n\n\nConstructors\n\n\nEvents\n\n\nFallback\n\n\nNothing\n\n\nFunctions\n\n\nfunction\n setParameters\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_token\n \nof type address\n\n2. \n_cap\n \nof type uint256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n pre\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | pure\n\n\nInputs:\n\n1. \nunnamed\n \nof type address\n\n2. \nunnamed\n \nof type bytes32\n\n3. \nunnamed\n \nof type bytes\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n post\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type address\n\n2. \n_paramsHash\n \nof type bytes32\n\n3. \nunnamed\n \nof type bytes\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n params\n\n\nExecution cost: \nless than 934 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type bytes32\n\n\nReturns:\n\n1. \ntoken\n \nof type address\n\n2. \ncap\n \nof type uint256\n\n\nfunction\n getParametersHash\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | pure\n\n\nInputs:\n\n1. \n_token\n \nof type address\n\n2. \n_cap\n \nof type uint256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32", 
            "title": "*contract* TokenCapGC ([source](https://github.com/daostack/daostack/tree/master/./contracts/globalConstraints/TokenCapGC.sol))"
        }, 
        {
            "location": "/ref/globalConstraints/TokenCapGC/#contract-tokencapgc-source", 
            "text": "Code deposit cost:  less than 183400 gas.  Execution cost:  less than 221 gas.  Total deploy cost(deposit + execution):  less than 183621 gas.   Token Cap Global Constraint   TokenCapGC  is a simple global constraint that limits the number of tokens that can be issued.", 
            "title": "contract TokenCapGC (source)"
        }, 
        {
            "location": "/ref/globalConstraints/TokenCapGC/#usage", 
            "text": "TokenCapGC gc = new TokenCapGC();\n\n/* some where inside a scheme with relevent permissions */\nbytes32 hash = gc.setParameters(contoller.nativeToken,100) /*limit DAO token issuance to 100*/\ncontroller.addGlobalConstraint(gc,hash)", 
            "title": "Usage"
        }, 
        {
            "location": "/ref/globalConstraints/TokenCapGC/#reference", 
            "text": "Constructors    Events    Fallback   Functions  setParameters  pre  post  params  getParametersHash", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/globalConstraints/TokenCapGC/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/globalConstraints/TokenCapGC/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/globalConstraints/TokenCapGC/#fallback", 
            "text": "Nothing", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/globalConstraints/TokenCapGC/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/globalConstraints/TokenCapGC/#function-setparameters", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _token   of type address \n2.  _cap   of type uint256  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function setParameters"
        }, 
        {
            "location": "/ref/globalConstraints/TokenCapGC/#function-pre", 
            "text": "Execution cost:  No bound available.  constant | pure  Inputs: \n1.  unnamed   of type address \n2.  unnamed   of type bytes32 \n3.  unnamed   of type bytes  Returns: \n1.  unnamed   of type bool", 
            "title": "function pre"
        }, 
        {
            "location": "/ref/globalConstraints/TokenCapGC/#function-post", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs: \n1.  unnamed   of type address \n2.  _paramsHash   of type bytes32 \n3.  unnamed   of type bytes  Returns: \n1.  unnamed   of type bool", 
            "title": "function post"
        }, 
        {
            "location": "/ref/globalConstraints/TokenCapGC/#function-params", 
            "text": "Execution cost:  less than 934 gas.  constant | view  Inputs: \n1.  unnamed   of type bytes32  Returns: \n1.  token   of type address \n2.  cap   of type uint256", 
            "title": "function params"
        }, 
        {
            "location": "/ref/globalConstraints/TokenCapGC/#function-getparametershash", 
            "text": "Execution cost:  No bound available.  constant | pure  Inputs: \n1.  _token   of type address \n2.  _cap   of type uint256  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function getParametersHash"
        }, 
        {
            "location": "/ref/test/ActionMock/", 
            "text": "contract\n ActionMock (\nsource\n)\n\n\nCode deposit cost: \nless than 142000 gas.\n\n\nExecution cost: \nless than 185 gas.\n\n\nTotal deploy cost(deposit + execution): \nless than 142185 gas.\n\n\n\n\nReference\n\n\n\n\n\n\nConstructors\n\n\n\n\n\n\nEvents\n\n\n\n\nAction\n\n\n\n\n\n\nFallback\n\n\nFunctions\n\n\ngenericAction\n\n\naction\n\n\n\n\n\n\n\n\nConstructors\n\n\nEvents\n\n\nevent\n Action\n\n\nParams:\n\n1. \n_sender\n \nof type address\n\n2. \n_param\n \nof type bytes32\n\n\nFallback\n\n\nNothing\n\n\nFunctions\n\n\nfunction\n genericAction\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \navatar\n \nof type address\n\n2. \nparams\n \nof type bytes32[]\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n action\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \nparams\n \nof type bytes32[]\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool", 
            "title": "*contract* ActionMock ([source](https://github.com/daostack/daostack/tree/master/./contracts/test/ActionMock.sol))"
        }, 
        {
            "location": "/ref/test/ActionMock/#contract-actionmock-source", 
            "text": "Code deposit cost:  less than 142000 gas.  Execution cost:  less than 185 gas.  Total deploy cost(deposit + execution):  less than 142185 gas.", 
            "title": "contract ActionMock (source)"
        }, 
        {
            "location": "/ref/test/ActionMock/#reference", 
            "text": "Constructors    Events   Action    Fallback  Functions  genericAction  action", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/test/ActionMock/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/test/ActionMock/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/test/ActionMock/#event-action", 
            "text": "Params: \n1.  _sender   of type address \n2.  _param   of type bytes32", 
            "title": "event Action"
        }, 
        {
            "location": "/ref/test/ActionMock/#fallback", 
            "text": "Nothing", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/test/ActionMock/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/test/ActionMock/#function-genericaction", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  avatar   of type address \n2.  params   of type bytes32[]  Returns: \n1.  unnamed   of type bool", 
            "title": "function genericAction"
        }, 
        {
            "location": "/ref/test/ActionMock/#function-action", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  params   of type bytes32[]  Returns: \n1.  unnamed   of type bool", 
            "title": "function action"
        }, 
        {
            "location": "/ref/test/Debug/", 
            "text": "contract\n Debug (\nsource\n)\n\n\nCode deposit cost: \nless than 10600 gas.\n\n\nExecution cost: \nless than 61 gas.\n\n\nTotal deploy cost(deposit + execution): \nless than 10661 gas.\n\n\n\n\nReference\n\n\n\n\n\n\nConstructors\n\n\n\n\n\n\nEvents\n\n\n\n\nLogUint\n\n\nLogString\n\n\nLogInt\n\n\nLogBytes32\n\n\nLogBytes\n\n\nLogBool\n\n\nLogAddress\n\n\n\n\n\n\nFallback\n\n\nFunctions\n\n\n\n\nConstructors\n\n\nEvents\n\n\nevent\n LogUint\n\n\nParams:\n\n1. \n_msg\n \nof type uint256\n\n\nevent\n LogString\n\n\nParams:\n\n1. \n_msg\n \nof type string\n\n\nevent\n LogInt\n\n\nParams:\n\n1. \n_msg\n \nof type int256\n\n\nevent\n LogBytes32\n\n\nParams:\n\n1. \n_msg\n \nof type bytes32\n\n\nevent\n LogBytes\n\n\nParams:\n\n1. \n_msg\n \nof type bytes\n\n\nevent\n LogBool\n\n\nParams:\n\n1. \n_msg\n \nof type bool\n\n\nevent\n LogAddress\n\n\nParams:\n\n1. \n_msg\n \nof type address\n\n\nFallback\n\n\nNothing\n\n\nFunctions", 
            "title": "*contract* Debug ([source](https://github.com/daostack/daostack/tree/master/./contracts/test/Debug.sol))"
        }, 
        {
            "location": "/ref/test/Debug/#contract-debug-source", 
            "text": "Code deposit cost:  less than 10600 gas.  Execution cost:  less than 61 gas.  Total deploy cost(deposit + execution):  less than 10661 gas.", 
            "title": "contract Debug (source)"
        }, 
        {
            "location": "/ref/test/Debug/#reference", 
            "text": "Constructors    Events   LogUint  LogString  LogInt  LogBytes32  LogBytes  LogBool  LogAddress    Fallback  Functions", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/test/Debug/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/test/Debug/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/test/Debug/#event-loguint", 
            "text": "Params: \n1.  _msg   of type uint256", 
            "title": "event LogUint"
        }, 
        {
            "location": "/ref/test/Debug/#event-logstring", 
            "text": "Params: \n1.  _msg   of type string", 
            "title": "event LogString"
        }, 
        {
            "location": "/ref/test/Debug/#event-logint", 
            "text": "Params: \n1.  _msg   of type int256", 
            "title": "event LogInt"
        }, 
        {
            "location": "/ref/test/Debug/#event-logbytes32", 
            "text": "Params: \n1.  _msg   of type bytes32", 
            "title": "event LogBytes32"
        }, 
        {
            "location": "/ref/test/Debug/#event-logbytes", 
            "text": "Params: \n1.  _msg   of type bytes", 
            "title": "event LogBytes"
        }, 
        {
            "location": "/ref/test/Debug/#event-logbool", 
            "text": "Params: \n1.  _msg   of type bool", 
            "title": "event LogBool"
        }, 
        {
            "location": "/ref/test/Debug/#event-logaddress", 
            "text": "Params: \n1.  _msg   of type address", 
            "title": "event LogAddress"
        }, 
        {
            "location": "/ref/test/Debug/#fallback", 
            "text": "Nothing", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/test/Debug/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/test/ExecutableTest/", 
            "text": "contract\n ExecutableTest (\nsource\n)\n\n\nCode deposit cost: \nless than 74000 gas.\n\n\nExecution cost: \nless than 118 gas.\n\n\nTotal deploy cost(deposit + execution): \nless than 74118 gas.\n\n\n\n\nReference\n\n\n\n\n\n\nConstructors\n\n\n\n\n\n\nEvents\n\n\n\n\nLogUint\n\n\nLogString\n\n\nLogInt\n\n\nLogBytes32\n\n\nLogBytes\n\n\nLogBool\n\n\nLogAddress\n\n\n\n\n\n\nFallback\n\n\nFunctions\n\n\nexecute\n\n\n\n\n\n\n\n\nConstructors\n\n\nEvents\n\n\nevent\n LogUint\n\n\nParams:\n\n1. \n_msg\n \nof type uint256\n\n\nevent\n LogString\n\n\nParams:\n\n1. \n_msg\n \nof type string\n\n\nevent\n LogInt\n\n\nParams:\n\n1. \n_msg\n \nof type int256\n\n\nevent\n LogBytes32\n\n\nParams:\n\n1. \n_msg\n \nof type bytes32\n\n\nevent\n LogBytes\n\n\nParams:\n\n1. \n_msg\n \nof type bytes\n\n\nevent\n LogBool\n\n\nParams:\n\n1. \n_msg\n \nof type bool\n\n\nevent\n LogAddress\n\n\nParams:\n\n1. \n_msg\n \nof type address\n\n\nFallback\n\n\nNothing\n\n\nFunctions\n\n\nfunction\n execute\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_avatar\n \nof type address\n\n3. \n_param\n \nof type int256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool", 
            "title": "*contract* ExecutableTest ([source](https://github.com/daostack/daostack/tree/master/./contracts/test/ExecutableTest.sol))"
        }, 
        {
            "location": "/ref/test/ExecutableTest/#contract-executabletest-source", 
            "text": "Code deposit cost:  less than 74000 gas.  Execution cost:  less than 118 gas.  Total deploy cost(deposit + execution):  less than 74118 gas.", 
            "title": "contract ExecutableTest (source)"
        }, 
        {
            "location": "/ref/test/ExecutableTest/#reference", 
            "text": "Constructors    Events   LogUint  LogString  LogInt  LogBytes32  LogBytes  LogBool  LogAddress    Fallback  Functions  execute", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/test/ExecutableTest/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/test/ExecutableTest/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/test/ExecutableTest/#event-loguint", 
            "text": "Params: \n1.  _msg   of type uint256", 
            "title": "event LogUint"
        }, 
        {
            "location": "/ref/test/ExecutableTest/#event-logstring", 
            "text": "Params: \n1.  _msg   of type string", 
            "title": "event LogString"
        }, 
        {
            "location": "/ref/test/ExecutableTest/#event-logint", 
            "text": "Params: \n1.  _msg   of type int256", 
            "title": "event LogInt"
        }, 
        {
            "location": "/ref/test/ExecutableTest/#event-logbytes32", 
            "text": "Params: \n1.  _msg   of type bytes32", 
            "title": "event LogBytes32"
        }, 
        {
            "location": "/ref/test/ExecutableTest/#event-logbytes", 
            "text": "Params: \n1.  _msg   of type bytes", 
            "title": "event LogBytes"
        }, 
        {
            "location": "/ref/test/ExecutableTest/#event-logbool", 
            "text": "Params: \n1.  _msg   of type bool", 
            "title": "event LogBool"
        }, 
        {
            "location": "/ref/test/ExecutableTest/#event-logaddress", 
            "text": "Params: \n1.  _msg   of type address", 
            "title": "event LogAddress"
        }, 
        {
            "location": "/ref/test/ExecutableTest/#fallback", 
            "text": "Nothing", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/test/ExecutableTest/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/test/ExecutableTest/#function-execute", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32 \n2.  _avatar   of type address \n3.  _param   of type int256  Returns: \n1.  unnamed   of type bool", 
            "title": "function execute"
        }, 
        {
            "location": "/ref/test/GlobalConstraintMock/", 
            "text": "contract\n GlobalConstraintMock (\nsource\n)\n\n\nCode deposit cost: \nless than 192400 gas.\n\n\nExecution cost: \nless than 233 gas.\n\n\nTotal deploy cost(deposit + execution): \nless than 192633 gas.\n\n\n\n\nReference\n\n\n\n\n\n\nConstructors\n\n\n\n\n\n\nEvents\n\n\n\n\n\n\nFallback\n\n\n\n\nFunctions\n\n\nsetConstraint\n\n\npre\n\n\npost\n\n\n\n\n\n\n\n\nConstructors\n\n\nEvents\n\n\nFallback\n\n\nNothing\n\n\nFunctions\n\n\nfunction\n setConstraint\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \nmethod\n \nof type bytes\n\n2. \npre\n \nof type bool\n\n3. \npost\n \nof type bool\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n pre\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type address\n\n2. \nunnamed\n \nof type bytes32\n\n3. \nmethod\n \nof type bytes\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n post\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type address\n\n2. \nunnamed\n \nof type bytes32\n\n3. \nmethod\n \nof type bytes\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool", 
            "title": "*contract* GlobalConstraintMock ([source](https://github.com/daostack/daostack/tree/master/./contracts/test/GlobalConstraintMock.sol))"
        }, 
        {
            "location": "/ref/test/GlobalConstraintMock/#contract-globalconstraintmock-source", 
            "text": "Code deposit cost:  less than 192400 gas.  Execution cost:  less than 233 gas.  Total deploy cost(deposit + execution):  less than 192633 gas.", 
            "title": "contract GlobalConstraintMock (source)"
        }, 
        {
            "location": "/ref/test/GlobalConstraintMock/#reference", 
            "text": "Constructors    Events    Fallback   Functions  setConstraint  pre  post", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/test/GlobalConstraintMock/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/test/GlobalConstraintMock/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/test/GlobalConstraintMock/#fallback", 
            "text": "Nothing", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/test/GlobalConstraintMock/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/test/GlobalConstraintMock/#function-setconstraint", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  method   of type bytes \n2.  pre   of type bool \n3.  post   of type bool  Returns: \n1.  unnamed   of type bool", 
            "title": "function setConstraint"
        }, 
        {
            "location": "/ref/test/GlobalConstraintMock/#function-pre", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs: \n1.  unnamed   of type address \n2.  unnamed   of type bytes32 \n3.  method   of type bytes  Returns: \n1.  unnamed   of type bool", 
            "title": "function pre"
        }, 
        {
            "location": "/ref/test/GlobalConstraintMock/#function-post", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs: \n1.  unnamed   of type address \n2.  unnamed   of type bytes32 \n3.  method   of type bytes  Returns: \n1.  unnamed   of type bool", 
            "title": "function post"
        }, 
        {
            "location": "/ref/test/UniversalSchemeMock/", 
            "text": "contract\n UniversalSchemeMock (\nsource\n)\n\n\nCode deposit cost: \nless than 98600 gas.\n\n\nExecution cost: \nless than 20515 gas.\n\n\nTotal deploy cost(deposit + execution): \nless than 119115 gas.\n\n\n\n\nReference\n\n\n\n\nConstructors\n\n\nUniversalSchemeMock()\n\n\n\n\n\n\nEvents\n\n\nOwnershipTransferred\n\n\nLogNewProposal\n\n\n\n\n\n\nFallback\n\n\nFunctions\n\n\nupdateParameters\n\n\ntransferOwnership\n\n\nowner\n\n\nhashedParameters\n\n\n\n\n\n\n\n\nConstructors\n\n\nconstructor\n UniversalSchemeMock()\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nParams:\n\n\nNothing\n\n\nEvents\n\n\nevent\n OwnershipTransferred\n\n\nParams:\n\n1. \npreviousOwner\n \nof type address\n\n2. \nnewOwner\n \nof type address\n\n\nevent\n LogNewProposal\n\n\nParams:\n\n1. \nproposalId\n \nof type bytes32\n\n\nFallback\n\n\nNothing\n\n\nFunctions\n\n\nfunction\n updateParameters\n\n\nExecution cost: \nless than 20443 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_hashedParameters\n \nof type bytes32\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n transferOwnership\n\n\n\n\nAllows the current owner to transfer control of the contract to a newOwner.\n\n\n\n\nExecution cost: \nless than 22788 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \nnewOwner\n \nof type address- The address to transfer ownership to.\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n owner\n\n\nExecution cost: \nless than 548 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type address\n\n\nfunction\n hashedParameters\n\n\nExecution cost: \nless than 439 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32", 
            "title": "*contract* UniversalSchemeMock ([source](https://github.com/daostack/daostack/tree/master/./contracts/test/UniversalSchemeMock.sol))"
        }, 
        {
            "location": "/ref/test/UniversalSchemeMock/#contract-universalschememock-source", 
            "text": "Code deposit cost:  less than 98600 gas.  Execution cost:  less than 20515 gas.  Total deploy cost(deposit + execution):  less than 119115 gas.", 
            "title": "contract UniversalSchemeMock (source)"
        }, 
        {
            "location": "/ref/test/UniversalSchemeMock/#reference", 
            "text": "Constructors  UniversalSchemeMock()    Events  OwnershipTransferred  LogNewProposal    Fallback  Functions  updateParameters  transferOwnership  owner  hashedParameters", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/test/UniversalSchemeMock/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/test/UniversalSchemeMock/#constructor-universalschememock", 
            "text": "Execution cost:  No bound available.  nonpayable  Params:  Nothing", 
            "title": "constructor UniversalSchemeMock()"
        }, 
        {
            "location": "/ref/test/UniversalSchemeMock/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/test/UniversalSchemeMock/#event-ownershiptransferred", 
            "text": "Params: \n1.  previousOwner   of type address \n2.  newOwner   of type address", 
            "title": "event OwnershipTransferred"
        }, 
        {
            "location": "/ref/test/UniversalSchemeMock/#event-lognewproposal", 
            "text": "Params: \n1.  proposalId   of type bytes32", 
            "title": "event LogNewProposal"
        }, 
        {
            "location": "/ref/test/UniversalSchemeMock/#fallback", 
            "text": "Nothing", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/test/UniversalSchemeMock/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/test/UniversalSchemeMock/#function-updateparameters", 
            "text": "Execution cost:  less than 20443 gas.  nonpayable  Inputs: \n1.  _hashedParameters   of type bytes32  Returns:  Nothing", 
            "title": "function updateParameters"
        }, 
        {
            "location": "/ref/test/UniversalSchemeMock/#function-transferownership", 
            "text": "Allows the current owner to transfer control of the contract to a newOwner.   Execution cost:  less than 22788 gas.  nonpayable  Inputs: \n1.  newOwner   of type address- The address to transfer ownership to.  Returns:  Nothing", 
            "title": "function transferOwnership"
        }, 
        {
            "location": "/ref/test/UniversalSchemeMock/#function-owner", 
            "text": "Execution cost:  less than 548 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type address", 
            "title": "function owner"
        }, 
        {
            "location": "/ref/test/UniversalSchemeMock/#function-hashedparameters", 
            "text": "Execution cost:  less than 439 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function hashedParameters"
        }, 
        {
            "location": "/ref/universalSchemes/ContributionReward/", 
            "text": "contract\n ContributionReward (\nsource\n)\n\n\nCode deposit cost: \nless than 755000 gas.\n\n\nExecution cost: \nless than 21154 gas.\n\n\nTotal deploy cost(deposit + execution): \nless than 776154 gas.\n\n\n\n\nA scheme for proposing and rewarding contributions to an organization\n\n\n\n\nReference\n\n\n\n\nConstructors\n\n\nContributionReward()\n\n\n\n\n\n\nEvents\n\n\nOwnershipTransferred\n\n\nLogProposalExecuted\n\n\nLogProposalDeleted\n\n\nLogNewProposal\n\n\nLogNewContributionProposal\n\n\n\n\n\n\nFallback\n\n\nFunctions\n\n\nupdateParameters\n\n\ntransferOwnership\n\n\nsetParameters\n\n\nproposeContributionReward\n\n\nparameters\n\n\nowner\n\n\norganizationsProposals\n\n\nhashedParameters\n\n\ngetParametersHash\n\n\nexecute\n\n\n\n\n\n\n\n\nConstructors\n\n\nconstructor\n ContributionReward()\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nParams:\n\n\nNothing\n\n\nEvents\n\n\nevent\n OwnershipTransferred\n\n\nParams:\n\n1. \npreviousOwner\n \nof type address\n\n2. \nnewOwner\n \nof type address\n\n\nevent\n LogProposalExecuted\n\n\nParams:\n\n1. \n_avatar\n \nof type address\n\n2. \n_proposalId\n \nof type bytes32\n\n\nevent\n LogProposalDeleted\n\n\nParams:\n\n1. \n_avatar\n \nof type address\n\n2. \n_proposalId\n \nof type bytes32\n\n\nevent\n LogNewProposal\n\n\nParams:\n\n1. \nproposalId\n \nof type bytes32\n\n\nevent\n LogNewContributionProposal\n\n\nParams:\n\n1. \n_avatar\n \nof type address\n\n2. \n_proposalId\n \nof type bytes32\n\n3. \n_intVoteInterface\n \nof type address\n\n4. \n_contributionDesciption\n \nof type bytes32\n\n5. \n_rewards\n \nof type uint256[4]\n\n6. \n_externalToken\n \nof type address\n\n7. \n_beneficiary\n \nof type address\n\n\nFallback\n\n\nNothing\n\n\nFunctions\n\n\nfunction\n updateParameters\n\n\nExecution cost: \nless than 20550 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_hashedParameters\n \nof type bytes32\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n transferOwnership\n\n\n\n\nAllows the current owner to transfer control of the contract to a newOwner.\n\n\n\n\nExecution cost: \nless than 22983 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \nnewOwner\n \nof type address- The address to transfer ownership to.\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n setParameters\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_orgNativeTokenFee\n \nof type uint256\n\n2. \n_voteApproveParams\n \nof type bytes32\n\n3. \n_intVote\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n proposeContributionReward\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_avatar\n \nof type address\n\n2. \n_contributionDesciptionHash\n \nof type bytes32\n\n3. \n_rewards\n \nof type uint256[4]\n\n4. \n_externalToken\n \nof type address\n\n5. \n_beneficiary\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n parameters\n\n\nExecution cost: \nless than 1148 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type bytes32\n\n\nReturns:\n\n1. \norgNativeTokenFee\n \nof type uint256\n\n2. \nvoteApproveParams\n \nof type bytes32\n\n3. \nintVote\n \nof type address\n\n\nfunction\n owner\n\n\nExecution cost: \nless than 721 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type address\n\n\nfunction\n organizationsProposals\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type address\n\n2. \nunnamed\n \nof type bytes32\n\n\nReturns:\n\n1. \ncontributionDescriptionHash\n \nof type bytes32\n\n2. \nnativeTokenReward\n \nof type uint256\n\n3. \nreputationReward\n \nof type uint256\n\n4. \nethReward\n \nof type uint256\n\n5. \nexternalToken\n \nof type address\n\n6. \nexternalTokenReward\n \nof type uint256\n\n7. \nbeneficiary\n \nof type address\n\n\nfunction\n hashedParameters\n\n\nExecution cost: \nless than 634 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n getParametersHash\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | pure\n\n\nInputs:\n\n1. \n_orgNativeTokenFee\n \nof type uint256\n\n2. \n_voteApproveParams\n \nof type bytes32\n\n3. \n_intVote\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n execute\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_avatar\n \nof type address\n\n3. \n_param\n \nof type int256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool", 
            "title": "*contract* ContributionReward ([source](https://github.com/daostack/daostack/tree/master/./contracts/universalSchemes/ContributionReward.sol))"
        }, 
        {
            "location": "/ref/universalSchemes/ContributionReward/#contract-contributionreward-source", 
            "text": "Code deposit cost:  less than 755000 gas.  Execution cost:  less than 21154 gas.  Total deploy cost(deposit + execution):  less than 776154 gas.   A scheme for proposing and rewarding contributions to an organization", 
            "title": "contract ContributionReward (source)"
        }, 
        {
            "location": "/ref/universalSchemes/ContributionReward/#reference", 
            "text": "Constructors  ContributionReward()    Events  OwnershipTransferred  LogProposalExecuted  LogProposalDeleted  LogNewProposal  LogNewContributionProposal    Fallback  Functions  updateParameters  transferOwnership  setParameters  proposeContributionReward  parameters  owner  organizationsProposals  hashedParameters  getParametersHash  execute", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/universalSchemes/ContributionReward/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/universalSchemes/ContributionReward/#constructor-contributionreward", 
            "text": "Execution cost:  No bound available.  nonpayable  Params:  Nothing", 
            "title": "constructor ContributionReward()"
        }, 
        {
            "location": "/ref/universalSchemes/ContributionReward/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/universalSchemes/ContributionReward/#event-ownershiptransferred", 
            "text": "Params: \n1.  previousOwner   of type address \n2.  newOwner   of type address", 
            "title": "event OwnershipTransferred"
        }, 
        {
            "location": "/ref/universalSchemes/ContributionReward/#event-logproposalexecuted", 
            "text": "Params: \n1.  _avatar   of type address \n2.  _proposalId   of type bytes32", 
            "title": "event LogProposalExecuted"
        }, 
        {
            "location": "/ref/universalSchemes/ContributionReward/#event-logproposaldeleted", 
            "text": "Params: \n1.  _avatar   of type address \n2.  _proposalId   of type bytes32", 
            "title": "event LogProposalDeleted"
        }, 
        {
            "location": "/ref/universalSchemes/ContributionReward/#event-lognewproposal", 
            "text": "Params: \n1.  proposalId   of type bytes32", 
            "title": "event LogNewProposal"
        }, 
        {
            "location": "/ref/universalSchemes/ContributionReward/#event-lognewcontributionproposal", 
            "text": "Params: \n1.  _avatar   of type address \n2.  _proposalId   of type bytes32 \n3.  _intVoteInterface   of type address \n4.  _contributionDesciption   of type bytes32 \n5.  _rewards   of type uint256[4] \n6.  _externalToken   of type address \n7.  _beneficiary   of type address", 
            "title": "event LogNewContributionProposal"
        }, 
        {
            "location": "/ref/universalSchemes/ContributionReward/#fallback", 
            "text": "Nothing", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/universalSchemes/ContributionReward/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/universalSchemes/ContributionReward/#function-updateparameters", 
            "text": "Execution cost:  less than 20550 gas.  nonpayable  Inputs: \n1.  _hashedParameters   of type bytes32  Returns:  Nothing", 
            "title": "function updateParameters"
        }, 
        {
            "location": "/ref/universalSchemes/ContributionReward/#function-transferownership", 
            "text": "Allows the current owner to transfer control of the contract to a newOwner.   Execution cost:  less than 22983 gas.  nonpayable  Inputs: \n1.  newOwner   of type address- The address to transfer ownership to.  Returns:  Nothing", 
            "title": "function transferOwnership"
        }, 
        {
            "location": "/ref/universalSchemes/ContributionReward/#function-setparameters", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _orgNativeTokenFee   of type uint256 \n2.  _voteApproveParams   of type bytes32 \n3.  _intVote   of type address  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function setParameters"
        }, 
        {
            "location": "/ref/universalSchemes/ContributionReward/#function-proposecontributionreward", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _avatar   of type address \n2.  _contributionDesciptionHash   of type bytes32 \n3.  _rewards   of type uint256[4] \n4.  _externalToken   of type address \n5.  _beneficiary   of type address  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function proposeContributionReward"
        }, 
        {
            "location": "/ref/universalSchemes/ContributionReward/#function-parameters", 
            "text": "Execution cost:  less than 1148 gas.  constant | view  Inputs: \n1.  unnamed   of type bytes32  Returns: \n1.  orgNativeTokenFee   of type uint256 \n2.  voteApproveParams   of type bytes32 \n3.  intVote   of type address", 
            "title": "function parameters"
        }, 
        {
            "location": "/ref/universalSchemes/ContributionReward/#function-owner", 
            "text": "Execution cost:  less than 721 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type address", 
            "title": "function owner"
        }, 
        {
            "location": "/ref/universalSchemes/ContributionReward/#function-organizationsproposals", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs: \n1.  unnamed   of type address \n2.  unnamed   of type bytes32  Returns: \n1.  contributionDescriptionHash   of type bytes32 \n2.  nativeTokenReward   of type uint256 \n3.  reputationReward   of type uint256 \n4.  ethReward   of type uint256 \n5.  externalToken   of type address \n6.  externalTokenReward   of type uint256 \n7.  beneficiary   of type address", 
            "title": "function organizationsProposals"
        }, 
        {
            "location": "/ref/universalSchemes/ContributionReward/#function-hashedparameters", 
            "text": "Execution cost:  less than 634 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function hashedParameters"
        }, 
        {
            "location": "/ref/universalSchemes/ContributionReward/#function-getparametershash", 
            "text": "Execution cost:  No bound available.  constant | pure  Inputs: \n1.  _orgNativeTokenFee   of type uint256 \n2.  _voteApproveParams   of type bytes32 \n3.  _intVote   of type address  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function getParametersHash"
        }, 
        {
            "location": "/ref/universalSchemes/ContributionReward/#function-execute", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32 \n2.  _avatar   of type address \n3.  _param   of type int256  Returns: \n1.  unnamed   of type bool", 
            "title": "function execute"
        }, 
        {
            "location": "/ref/universalSchemes/ExecutableInterface/", 
            "text": "contract\n ExecutableInterface (\nsource\n)\n\n\nCode deposit cost: \nNo bound available.\n\n\nExecution cost: \nNo bound available.\n\n\nTotal deploy cost(deposit + execution): \nNo bound available.\n\n\n\n\nReference\n\n\n\n\n\n\nConstructors\n\n\n\n\n\n\nEvents\n\n\n\n\n\n\nFallback\n\n\n\n\nFunctions\n\n\nexecute\n\n\n\n\n\n\n\n\nConstructors\n\n\nEvents\n\n\nFallback\n\n\nNothing\n\n\nFunctions\n\n\nfunction\n execute\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_avatar\n \nof type address\n\n3. \n_param\n \nof type int256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool", 
            "title": "*contract* ExecutableInterface ([source](https://github.com/daostack/daostack/tree/master/./contracts/universalSchemes/ExecutableInterface.sol))"
        }, 
        {
            "location": "/ref/universalSchemes/ExecutableInterface/#contract-executableinterface-source", 
            "text": "Code deposit cost:  No bound available.  Execution cost:  No bound available.  Total deploy cost(deposit + execution):  No bound available.", 
            "title": "contract ExecutableInterface (source)"
        }, 
        {
            "location": "/ref/universalSchemes/ExecutableInterface/#reference", 
            "text": "Constructors    Events    Fallback   Functions  execute", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/universalSchemes/ExecutableInterface/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/universalSchemes/ExecutableInterface/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/universalSchemes/ExecutableInterface/#fallback", 
            "text": "Nothing", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/universalSchemes/ExecutableInterface/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/universalSchemes/ExecutableInterface/#function-execute", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32 \n2.  _avatar   of type address \n3.  _param   of type int256  Returns: \n1.  unnamed   of type bool", 
            "title": "function execute"
        }, 
        {
            "location": "/ref/universalSchemes/GenesisScheme/", 
            "text": "contract\n GenesisScheme (\nsource\n)\n\n\nCode deposit cost: \nless than 4440000 gas.\n\n\nExecution cost: \nless than 5150 gas.\n\n\nTotal deploy cost(deposit + execution): \nless than 4445150 gas.\n\n\n\n\nGenesis Scheme that creates organizations\n\n\n\n\nThe \nGenesis Scheme\n is a special scheme that creates a brand new DAO and initializes it with a set of default \nSchemes\n.\nIt is the main way to create new DAOs on the DAOStack.\n\n\nUsage\n\n\nStep 1: Create the organization\n\n\nGenesisScheme gs = new GenesisScheme();\naddress avatar = \n    gs.forgeOrg(\n        \nOrganization name\n,\n        \nToken name\n,\n        \nTKN\n, /*Token symbol*/\n        [me,you], /*founders addresses*/\n        [5,7], /*founders initial token allocation*/\n        [10,12], /*founders initial reputation allocation*/\n    );\n\n\n\n\nStep 2: Configure some schemes\n\n\nContributionReward crScheme = new ContributionReward();\nbytes32 paramsHash = crScheme.setParameters(...);\n\nbytes4 permission = 0; /* set to zero = no special permissions */\n    /* permission is a 4 bit number indicating what kind of operations can the scheme do in this organization:\n        1st bit - irrelevent to us.\n        2nd bit - can register other schemes.\n        3rd bit - can add/remove global constraints.\n        4th bit - can upgrade controller. \n    */\n\n\n\n\nStep 3: Register schemes with the organization\n\n\ngs.setSchemes(\n    Avatar(avatar),\n    [address(crSchemes)], /* schemes to regsiter*/\n    [paramsHash], /* params hash */\n    [true], /* is the scheme a universal scheme */\n    [permission] \n);\n\n\n\n\nReference\n\n\n\n\nConstructors\n\n\nGenesisScheme()\n\n\n\n\n\n\nEvents\n\n\nNewOrg\n\n\nInitialSchemesSet\n\n\n\n\n\n\nFallback\n\n\nFunctions\n\n\nsetSchemes\n\n\nforgeOrg\n\n\n\n\n\n\n\n\nConstructors\n\n\nconstructor\n GenesisScheme()\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nParams:\n\n\nNothing\n\n\nEvents\n\n\nevent\n NewOrg\n\n\nParams:\n\n1. \n_avatar\n \nof type address\n\n\nevent\n InitialSchemesSet\n\n\nParams:\n\n1. \n_avatar\n \nof type address\n\n\nFallback\n\n\nNothing\n\n\nFunctions\n\n\nfunction\n setSchemes\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_avatar\n \nof type address\n\n2. \n_schemes\n \nof type address[]\n\n3. \n_params\n \nof type bytes32[]\n\n4. \n_permissions\n \nof type bytes4[]\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n forgeOrg\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_orgName\n \nof type bytes32\n\n2. \n_tokenName\n \nof type string\n\n3. \n_tokenSymbol\n \nof type string\n\n4. \n_founders\n \nof type address[]\n\n5. \n_foundersTokenAmount\n \nof type uint256[]\n\n6. \n_foundersReputationAmount\n \nof type int256[]\n\n7. \n_uController\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type address", 
            "title": "*contract* GenesisScheme ([source](https://github.com/daostack/daostack/tree/master/./contracts/universalSchemes/GenesisScheme.sol))"
        }, 
        {
            "location": "/ref/universalSchemes/GenesisScheme/#contract-genesisscheme-source", 
            "text": "Code deposit cost:  less than 4440000 gas.  Execution cost:  less than 5150 gas.  Total deploy cost(deposit + execution):  less than 4445150 gas.   Genesis Scheme that creates organizations   The  Genesis Scheme  is a special scheme that creates a brand new DAO and initializes it with a set of default  Schemes .\nIt is the main way to create new DAOs on the DAOStack.", 
            "title": "contract GenesisScheme (source)"
        }, 
        {
            "location": "/ref/universalSchemes/GenesisScheme/#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/ref/universalSchemes/GenesisScheme/#step-1-create-the-organization", 
            "text": "GenesisScheme gs = new GenesisScheme();\naddress avatar = \n    gs.forgeOrg(\n         Organization name ,\n         Token name ,\n         TKN , /*Token symbol*/\n        [me,you], /*founders addresses*/\n        [5,7], /*founders initial token allocation*/\n        [10,12], /*founders initial reputation allocation*/\n    );", 
            "title": "Step 1: Create the organization"
        }, 
        {
            "location": "/ref/universalSchemes/GenesisScheme/#step-2-configure-some-schemes", 
            "text": "ContributionReward crScheme = new ContributionReward();\nbytes32 paramsHash = crScheme.setParameters(...);\n\nbytes4 permission = 0; /* set to zero = no special permissions */\n    /* permission is a 4 bit number indicating what kind of operations can the scheme do in this organization:\n        1st bit - irrelevent to us.\n        2nd bit - can register other schemes.\n        3rd bit - can add/remove global constraints.\n        4th bit - can upgrade controller. \n    */", 
            "title": "Step 2: Configure some schemes"
        }, 
        {
            "location": "/ref/universalSchemes/GenesisScheme/#step-3-register-schemes-with-the-organization", 
            "text": "gs.setSchemes(\n    Avatar(avatar),\n    [address(crSchemes)], /* schemes to regsiter*/\n    [paramsHash], /* params hash */\n    [true], /* is the scheme a universal scheme */\n    [permission] \n);", 
            "title": "Step 3: Register schemes with the organization"
        }, 
        {
            "location": "/ref/universalSchemes/GenesisScheme/#reference", 
            "text": "Constructors  GenesisScheme()    Events  NewOrg  InitialSchemesSet    Fallback  Functions  setSchemes  forgeOrg", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/universalSchemes/GenesisScheme/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/universalSchemes/GenesisScheme/#constructor-genesisscheme", 
            "text": "Execution cost:  No bound available.  nonpayable  Params:  Nothing", 
            "title": "constructor GenesisScheme()"
        }, 
        {
            "location": "/ref/universalSchemes/GenesisScheme/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/universalSchemes/GenesisScheme/#event-neworg", 
            "text": "Params: \n1.  _avatar   of type address", 
            "title": "event NewOrg"
        }, 
        {
            "location": "/ref/universalSchemes/GenesisScheme/#event-initialschemesset", 
            "text": "Params: \n1.  _avatar   of type address", 
            "title": "event InitialSchemesSet"
        }, 
        {
            "location": "/ref/universalSchemes/GenesisScheme/#fallback", 
            "text": "Nothing", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/universalSchemes/GenesisScheme/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/universalSchemes/GenesisScheme/#function-setschemes", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _avatar   of type address \n2.  _schemes   of type address[] \n3.  _params   of type bytes32[] \n4.  _permissions   of type bytes4[]  Returns:  Nothing", 
            "title": "function setSchemes"
        }, 
        {
            "location": "/ref/universalSchemes/GenesisScheme/#function-forgeorg", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _orgName   of type bytes32 \n2.  _tokenName   of type string \n3.  _tokenSymbol   of type string \n4.  _founders   of type address[] \n5.  _foundersTokenAmount   of type uint256[] \n6.  _foundersReputationAmount   of type int256[] \n7.  _uController   of type address  Returns: \n1.  unnamed   of type address", 
            "title": "function forgeOrg"
        }, 
        {
            "location": "/ref/universalSchemes/GlobalConstraintRegistrar/", 
            "text": "contract\n GlobalConstraintRegistrar (\nsource\n)\n\n\nCode deposit cost: \nless than 718800 gas.\n\n\nExecution cost: \nless than 21121 gas.\n\n\nTotal deploy cost(deposit + execution): \nless than 739921 gas.\n\n\n\n\nA scheme to manage global constraint for organizations\n\n\n\n\nReference\n\n\n\n\nConstructors\n\n\nGlobalConstraintRegistrar()\n\n\n\n\n\n\nEvents\n\n\nRemoveGlobalConstraintsProposal\n\n\nProposalExecuted\n\n\nOwnershipTransferred\n\n\nNewGlobalConstraintsProposal\n\n\nLogProposalDeleted\n\n\nLogNewProposal\n\n\n\n\n\n\nFallback\n\n\nFunctions\n\n\nexecute\n\n\nparameters\n\n\nproposeToRemoveGC\n\n\ntransferOwnership\n\n\nupdateParameters\n\n\nproposeGlobalConstraint\n\n\nsetParameters\n\n\nowner\n\n\norganizationsData\n\n\nhashedParameters\n\n\ngetParametersHash\n\n\n\n\n\n\n\n\nConstructors\n\n\nconstructor\n GlobalConstraintRegistrar()\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nParams:\n\n\nNothing\n\n\nEvents\n\n\nevent\n RemoveGlobalConstraintsProposal\n\n\nParams:\n\n1. \n_avatar\n \nof type address\n\n2. \n_proposalId\n \nof type bytes32\n\n3. \n_intVoteInterface\n \nof type address\n\n4. \n_gc\n \nof type address\n\n\nevent\n ProposalExecuted\n\n\nParams:\n\n1. \n_avatar\n \nof type address\n\n2. \n_proposalId\n \nof type bytes32\n\n\nevent\n OwnershipTransferred\n\n\nParams:\n\n1. \npreviousOwner\n \nof type address\n\n2. \nnewOwner\n \nof type address\n\n\nevent\n NewGlobalConstraintsProposal\n\n\nParams:\n\n1. \n_avatar\n \nof type address\n\n2. \n_proposalId\n \nof type bytes32\n\n3. \n_intVoteInterface\n \nof type address\n\n4. \n_gc\n \nof type address\n\n5. \n_params\n \nof type bytes32\n\n6. \n_voteToRemoveParams\n \nof type bytes32\n\n\nevent\n LogProposalDeleted\n\n\nParams:\n\n1. \n_avatar\n \nof type address\n\n2. \n_proposalId\n \nof type bytes32\n\n\nevent\n LogNewProposal\n\n\nParams:\n\n1. \nproposalId\n \nof type bytes32\n\n\nFallback\n\n\nNothing\n\n\nFunctions\n\n\nfunction\n execute\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_avatar\n \nof type address\n\n3. \n_param\n \nof type int256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n parameters\n\n\nExecution cost: \nless than 894 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type bytes32\n\n\nReturns:\n\n1. \nvoteRegisterParams\n \nof type bytes32\n\n2. \nintVote\n \nof type address\n\n\nfunction\n proposeToRemoveGC\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_avatar\n \nof type address\n\n2. \n_gc\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n transferOwnership\n\n\n\n\nAllows the current owner to transfer control of the contract to a newOwner.\n\n\n\n\nExecution cost: \nless than 22983 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \nnewOwner\n \nof type address- The address to transfer ownership to.\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n updateParameters\n\n\nExecution cost: \nless than 20594 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_hashedParameters\n \nof type bytes32\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n proposeGlobalConstraint\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_avatar\n \nof type address\n\n2. \n_gc\n \nof type address\n\n3. \n_params\n \nof type bytes32\n\n4. \n_voteToRemoveParams\n \nof type bytes32\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n setParameters\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_voteRegisterParams\n \nof type bytes32\n\n2. \n_intVote\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n owner\n\n\nExecution cost: \nless than 743 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type address\n\n\nfunction\n organizationsData\n\n\nExecution cost: \nless than 1013 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type address\n\n\nReturns:\n\n1. \nvoteRegisterParams\n \nof type bytes32\n\n2. \nintVote\n \nof type address\n\n\nfunction\n hashedParameters\n\n\nExecution cost: \nless than 656 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n getParametersHash\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | pure\n\n\nInputs:\n\n1. \n_voteRegisterParams\n \nof type bytes32\n\n2. \n_intVote\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32", 
            "title": "*contract* GlobalConstraintRegistrar ([source](https://github.com/daostack/daostack/tree/master/./contracts/universalSchemes/GlobalConstraintRegistrar.sol))"
        }, 
        {
            "location": "/ref/universalSchemes/GlobalConstraintRegistrar/#contract-globalconstraintregistrar-source", 
            "text": "Code deposit cost:  less than 718800 gas.  Execution cost:  less than 21121 gas.  Total deploy cost(deposit + execution):  less than 739921 gas.   A scheme to manage global constraint for organizations", 
            "title": "contract GlobalConstraintRegistrar (source)"
        }, 
        {
            "location": "/ref/universalSchemes/GlobalConstraintRegistrar/#reference", 
            "text": "Constructors  GlobalConstraintRegistrar()    Events  RemoveGlobalConstraintsProposal  ProposalExecuted  OwnershipTransferred  NewGlobalConstraintsProposal  LogProposalDeleted  LogNewProposal    Fallback  Functions  execute  parameters  proposeToRemoveGC  transferOwnership  updateParameters  proposeGlobalConstraint  setParameters  owner  organizationsData  hashedParameters  getParametersHash", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/universalSchemes/GlobalConstraintRegistrar/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/universalSchemes/GlobalConstraintRegistrar/#constructor-globalconstraintregistrar", 
            "text": "Execution cost:  No bound available.  nonpayable  Params:  Nothing", 
            "title": "constructor GlobalConstraintRegistrar()"
        }, 
        {
            "location": "/ref/universalSchemes/GlobalConstraintRegistrar/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/universalSchemes/GlobalConstraintRegistrar/#event-removeglobalconstraintsproposal", 
            "text": "Params: \n1.  _avatar   of type address \n2.  _proposalId   of type bytes32 \n3.  _intVoteInterface   of type address \n4.  _gc   of type address", 
            "title": "event RemoveGlobalConstraintsProposal"
        }, 
        {
            "location": "/ref/universalSchemes/GlobalConstraintRegistrar/#event-proposalexecuted", 
            "text": "Params: \n1.  _avatar   of type address \n2.  _proposalId   of type bytes32", 
            "title": "event ProposalExecuted"
        }, 
        {
            "location": "/ref/universalSchemes/GlobalConstraintRegistrar/#event-ownershiptransferred", 
            "text": "Params: \n1.  previousOwner   of type address \n2.  newOwner   of type address", 
            "title": "event OwnershipTransferred"
        }, 
        {
            "location": "/ref/universalSchemes/GlobalConstraintRegistrar/#event-newglobalconstraintsproposal", 
            "text": "Params: \n1.  _avatar   of type address \n2.  _proposalId   of type bytes32 \n3.  _intVoteInterface   of type address \n4.  _gc   of type address \n5.  _params   of type bytes32 \n6.  _voteToRemoveParams   of type bytes32", 
            "title": "event NewGlobalConstraintsProposal"
        }, 
        {
            "location": "/ref/universalSchemes/GlobalConstraintRegistrar/#event-logproposaldeleted", 
            "text": "Params: \n1.  _avatar   of type address \n2.  _proposalId   of type bytes32", 
            "title": "event LogProposalDeleted"
        }, 
        {
            "location": "/ref/universalSchemes/GlobalConstraintRegistrar/#event-lognewproposal", 
            "text": "Params: \n1.  proposalId   of type bytes32", 
            "title": "event LogNewProposal"
        }, 
        {
            "location": "/ref/universalSchemes/GlobalConstraintRegistrar/#fallback", 
            "text": "Nothing", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/universalSchemes/GlobalConstraintRegistrar/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/universalSchemes/GlobalConstraintRegistrar/#function-execute", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32 \n2.  _avatar   of type address \n3.  _param   of type int256  Returns: \n1.  unnamed   of type bool", 
            "title": "function execute"
        }, 
        {
            "location": "/ref/universalSchemes/GlobalConstraintRegistrar/#function-parameters", 
            "text": "Execution cost:  less than 894 gas.  constant | view  Inputs: \n1.  unnamed   of type bytes32  Returns: \n1.  voteRegisterParams   of type bytes32 \n2.  intVote   of type address", 
            "title": "function parameters"
        }, 
        {
            "location": "/ref/universalSchemes/GlobalConstraintRegistrar/#function-proposetoremovegc", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _avatar   of type address \n2.  _gc   of type address  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function proposeToRemoveGC"
        }, 
        {
            "location": "/ref/universalSchemes/GlobalConstraintRegistrar/#function-transferownership", 
            "text": "Allows the current owner to transfer control of the contract to a newOwner.   Execution cost:  less than 22983 gas.  nonpayable  Inputs: \n1.  newOwner   of type address- The address to transfer ownership to.  Returns:  Nothing", 
            "title": "function transferOwnership"
        }, 
        {
            "location": "/ref/universalSchemes/GlobalConstraintRegistrar/#function-updateparameters", 
            "text": "Execution cost:  less than 20594 gas.  nonpayable  Inputs: \n1.  _hashedParameters   of type bytes32  Returns:  Nothing", 
            "title": "function updateParameters"
        }, 
        {
            "location": "/ref/universalSchemes/GlobalConstraintRegistrar/#function-proposeglobalconstraint", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _avatar   of type address \n2.  _gc   of type address \n3.  _params   of type bytes32 \n4.  _voteToRemoveParams   of type bytes32  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function proposeGlobalConstraint"
        }, 
        {
            "location": "/ref/universalSchemes/GlobalConstraintRegistrar/#function-setparameters", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _voteRegisterParams   of type bytes32 \n2.  _intVote   of type address  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function setParameters"
        }, 
        {
            "location": "/ref/universalSchemes/GlobalConstraintRegistrar/#function-owner", 
            "text": "Execution cost:  less than 743 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type address", 
            "title": "function owner"
        }, 
        {
            "location": "/ref/universalSchemes/GlobalConstraintRegistrar/#function-organizationsdata", 
            "text": "Execution cost:  less than 1013 gas.  constant | view  Inputs: \n1.  unnamed   of type address  Returns: \n1.  voteRegisterParams   of type bytes32 \n2.  intVote   of type address", 
            "title": "function organizationsData"
        }, 
        {
            "location": "/ref/universalSchemes/GlobalConstraintRegistrar/#function-hashedparameters", 
            "text": "Execution cost:  less than 656 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function hashedParameters"
        }, 
        {
            "location": "/ref/universalSchemes/GlobalConstraintRegistrar/#function-getparametershash", 
            "text": "Execution cost:  No bound available.  constant | pure  Inputs: \n1.  _voteRegisterParams   of type bytes32 \n2.  _intVote   of type address  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function getParametersHash"
        }, 
        {
            "location": "/ref/universalSchemes/MirrorContractICO/", 
            "text": "contract\n MirrorContractICO (\nsource\n)\n\n\nCode deposit cost: \nless than 158400 gas.\n\n\nExecution cost: \nless than 61130 gas.\n\n\nTotal deploy cost(deposit + execution): \nless than 219530 gas.\n\n\n\n\nAn avatar contract for ICO.\n\n\n\n\nReference\n\n\n\n\nConstructors\n\n\nMirrorContractICO(address, address)\n\n\n\n\n\n\nEvents\n\n\nOwnershipTransferred\n\n\n\n\n\n\nFallback\n\n\nFunctions\n\n\ntransferOwnership\n\n\nsimpleICO\n\n\nowner\n\n\norganization\n\n\ndestroyAndSend\n\n\ndestroy\n\n\n\n\n\n\n\n\nConstructors\n\n\nconstructor\n MirrorContractICO(address, address)\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nParams:\n\n1. \n_organization\n \nof type address\n\n2. \n_simpleICO\n \nof type address\n\n\nEvents\n\n\nevent\n OwnershipTransferred\n\n\nParams:\n\n1. \npreviousOwner\n \nof type address\n\n2. \nnewOwner\n \nof type address\n\n\nFallback\n\n\nExecution cost: \nNo bound available.\n\n\npayable\n\n\nFunctions\n\n\nfunction\n transferOwnership\n\n\n\n\nAllows the current owner to transfer control of the contract to a newOwner.\n\n\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \nnewOwner\n \nof type address- The address to transfer ownership to.\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n simpleICO\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type address\n\n\nfunction\n owner\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type address\n\n\nfunction\n organization\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type address\n\n\nfunction\n destroyAndSend\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_recipient\n \nof type address\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n destroy\n\n\n\n\nTransfers the current balance to the owner and terminates the contract.\n\n\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n\nNothing", 
            "title": "*contract* MirrorContractICO ([source](https://github.com/daostack/daostack/tree/master/./contracts/universalSchemes/SimpleICO.sol))"
        }, 
        {
            "location": "/ref/universalSchemes/MirrorContractICO/#contract-mirrorcontractico-source", 
            "text": "Code deposit cost:  less than 158400 gas.  Execution cost:  less than 61130 gas.  Total deploy cost(deposit + execution):  less than 219530 gas.   An avatar contract for ICO.", 
            "title": "contract MirrorContractICO (source)"
        }, 
        {
            "location": "/ref/universalSchemes/MirrorContractICO/#reference", 
            "text": "Constructors  MirrorContractICO(address, address)    Events  OwnershipTransferred    Fallback  Functions  transferOwnership  simpleICO  owner  organization  destroyAndSend  destroy", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/universalSchemes/MirrorContractICO/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/universalSchemes/MirrorContractICO/#constructor-mirrorcontracticoaddress-address", 
            "text": "Execution cost:  No bound available.  nonpayable  Params: \n1.  _organization   of type address \n2.  _simpleICO   of type address", 
            "title": "constructor MirrorContractICO(address, address)"
        }, 
        {
            "location": "/ref/universalSchemes/MirrorContractICO/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/universalSchemes/MirrorContractICO/#event-ownershiptransferred", 
            "text": "Params: \n1.  previousOwner   of type address \n2.  newOwner   of type address", 
            "title": "event OwnershipTransferred"
        }, 
        {
            "location": "/ref/universalSchemes/MirrorContractICO/#fallback", 
            "text": "Execution cost:  No bound available.  payable", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/universalSchemes/MirrorContractICO/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/universalSchemes/MirrorContractICO/#function-transferownership", 
            "text": "Allows the current owner to transfer control of the contract to a newOwner.   Execution cost:  No bound available.  nonpayable  Inputs: \n1.  newOwner   of type address- The address to transfer ownership to.  Returns:  Nothing", 
            "title": "function transferOwnership"
        }, 
        {
            "location": "/ref/universalSchemes/MirrorContractICO/#function-simpleico", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type address", 
            "title": "function simpleICO"
        }, 
        {
            "location": "/ref/universalSchemes/MirrorContractICO/#function-owner", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type address", 
            "title": "function owner"
        }, 
        {
            "location": "/ref/universalSchemes/MirrorContractICO/#function-organization", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type address", 
            "title": "function organization"
        }, 
        {
            "location": "/ref/universalSchemes/MirrorContractICO/#function-destroyandsend", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _recipient   of type address  Returns:  Nothing", 
            "title": "function destroyAndSend"
        }, 
        {
            "location": "/ref/universalSchemes/MirrorContractICO/#function-destroy", 
            "text": "Transfers the current balance to the owner and terminates the contract.   Execution cost:  No bound available.  nonpayable  Inputs:  Nothing  Returns:  Nothing", 
            "title": "function destroy"
        }, 
        {
            "location": "/ref/universalSchemes/OrganizationRegister/", 
            "text": "contract\n OrganizationRegister (\nsource\n)\n\n\nCode deposit cost: \nless than 358000 gas.\n\n\nExecution cost: \nless than 20761 gas.\n\n\nTotal deploy cost(deposit + execution): \nless than 378761 gas.\n\n\n\n\nA universal organization registry.\n\n\n\n\nReference\n\n\n\n\nConstructors\n\n\nOrganizationRegister()\n\n\n\n\n\n\nEvents\n\n\nPromotion\n\n\nOwnershipTransferred\n\n\nOrgAdded\n\n\nLogNewProposal\n\n\n\n\n\n\nFallback\n\n\nFunctions\n\n\nupdateParameters\n\n\ntransferOwnership\n\n\nsetParameters\n\n\nparameters\n\n\nowner\n\n\norganizationsRegistery\n\n\nhashedParameters\n\n\ngetParametersHash\n\n\naddOrPromoteAddress\n\n\n\n\n\n\n\n\nConstructors\n\n\nconstructor\n OrganizationRegister()\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nParams:\n\n\nNothing\n\n\nEvents\n\n\nevent\n Promotion\n\n\nParams:\n\n1. \n_registry\n \nof type address\n\n2. \n_org\n \nof type address\n\n3. \n_amount\n \nof type uint256\n\n\nevent\n OwnershipTransferred\n\n\nParams:\n\n1. \npreviousOwner\n \nof type address\n\n2. \nnewOwner\n \nof type address\n\n\nevent\n OrgAdded\n\n\nParams:\n\n1. \n_registry\n \nof type address\n\n2. \n_org\n \nof type address\n\n\nevent\n LogNewProposal\n\n\nParams:\n\n1. \nproposalId\n \nof type bytes32\n\n\nFallback\n\n\nNothing\n\n\nFunctions\n\n\nfunction\n updateParameters\n\n\nExecution cost: \nless than 20550 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_hashedParameters\n \nof type bytes32\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n transferOwnership\n\n\n\n\nAllows the current owner to transfer control of the contract to a newOwner.\n\n\n\n\nExecution cost: \nless than 22961 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \nnewOwner\n \nof type address- The address to transfer ownership to.\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n setParameters\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_token\n \nof type address\n\n2. \n_fee\n \nof type uint256\n\n3. \n_beneficiary\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n parameters\n\n\nExecution cost: \nless than 1157 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type bytes32\n\n\nReturns:\n\n1. \nfee\n \nof type uint256\n\n2. \ntoken\n \nof type address\n\n3. \nbeneficiary\n \nof type address\n\n\nfunction\n owner\n\n\nExecution cost: \nless than 677 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type address\n\n\nfunction\n organizationsRegistery\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type address\n\n2. \nunnamed\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type uint256\n\n\nfunction\n hashedParameters\n\n\nExecution cost: \nless than 612 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n getParametersHash\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | pure\n\n\nInputs:\n\n1. \n_token\n \nof type address\n\n2. \n_fee\n \nof type uint256\n\n3. \n_beneficiary\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n addOrPromoteAddress\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_avatar\n \nof type address\n\n2. \n_record\n \nof type address\n\n3. \n_amount\n \nof type uint256\n\n\nReturns:\n\n\nNothing", 
            "title": "*contract* OrganizationRegister ([source](https://github.com/daostack/daostack/tree/master/./contracts/universalSchemes/OrganizationRegister.sol))"
        }, 
        {
            "location": "/ref/universalSchemes/OrganizationRegister/#contract-organizationregister-source", 
            "text": "Code deposit cost:  less than 358000 gas.  Execution cost:  less than 20761 gas.  Total deploy cost(deposit + execution):  less than 378761 gas.   A universal organization registry.", 
            "title": "contract OrganizationRegister (source)"
        }, 
        {
            "location": "/ref/universalSchemes/OrganizationRegister/#reference", 
            "text": "Constructors  OrganizationRegister()    Events  Promotion  OwnershipTransferred  OrgAdded  LogNewProposal    Fallback  Functions  updateParameters  transferOwnership  setParameters  parameters  owner  organizationsRegistery  hashedParameters  getParametersHash  addOrPromoteAddress", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/universalSchemes/OrganizationRegister/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/universalSchemes/OrganizationRegister/#constructor-organizationregister", 
            "text": "Execution cost:  No bound available.  nonpayable  Params:  Nothing", 
            "title": "constructor OrganizationRegister()"
        }, 
        {
            "location": "/ref/universalSchemes/OrganizationRegister/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/universalSchemes/OrganizationRegister/#event-promotion", 
            "text": "Params: \n1.  _registry   of type address \n2.  _org   of type address \n3.  _amount   of type uint256", 
            "title": "event Promotion"
        }, 
        {
            "location": "/ref/universalSchemes/OrganizationRegister/#event-ownershiptransferred", 
            "text": "Params: \n1.  previousOwner   of type address \n2.  newOwner   of type address", 
            "title": "event OwnershipTransferred"
        }, 
        {
            "location": "/ref/universalSchemes/OrganizationRegister/#event-orgadded", 
            "text": "Params: \n1.  _registry   of type address \n2.  _org   of type address", 
            "title": "event OrgAdded"
        }, 
        {
            "location": "/ref/universalSchemes/OrganizationRegister/#event-lognewproposal", 
            "text": "Params: \n1.  proposalId   of type bytes32", 
            "title": "event LogNewProposal"
        }, 
        {
            "location": "/ref/universalSchemes/OrganizationRegister/#fallback", 
            "text": "Nothing", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/universalSchemes/OrganizationRegister/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/universalSchemes/OrganizationRegister/#function-updateparameters", 
            "text": "Execution cost:  less than 20550 gas.  nonpayable  Inputs: \n1.  _hashedParameters   of type bytes32  Returns:  Nothing", 
            "title": "function updateParameters"
        }, 
        {
            "location": "/ref/universalSchemes/OrganizationRegister/#function-transferownership", 
            "text": "Allows the current owner to transfer control of the contract to a newOwner.   Execution cost:  less than 22961 gas.  nonpayable  Inputs: \n1.  newOwner   of type address- The address to transfer ownership to.  Returns:  Nothing", 
            "title": "function transferOwnership"
        }, 
        {
            "location": "/ref/universalSchemes/OrganizationRegister/#function-setparameters", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _token   of type address \n2.  _fee   of type uint256 \n3.  _beneficiary   of type address  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function setParameters"
        }, 
        {
            "location": "/ref/universalSchemes/OrganizationRegister/#function-parameters", 
            "text": "Execution cost:  less than 1157 gas.  constant | view  Inputs: \n1.  unnamed   of type bytes32  Returns: \n1.  fee   of type uint256 \n2.  token   of type address \n3.  beneficiary   of type address", 
            "title": "function parameters"
        }, 
        {
            "location": "/ref/universalSchemes/OrganizationRegister/#function-owner", 
            "text": "Execution cost:  less than 677 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type address", 
            "title": "function owner"
        }, 
        {
            "location": "/ref/universalSchemes/OrganizationRegister/#function-organizationsregistery", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs: \n1.  unnamed   of type address \n2.  unnamed   of type address  Returns: \n1.  unnamed   of type uint256", 
            "title": "function organizationsRegistery"
        }, 
        {
            "location": "/ref/universalSchemes/OrganizationRegister/#function-hashedparameters", 
            "text": "Execution cost:  less than 612 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function hashedParameters"
        }, 
        {
            "location": "/ref/universalSchemes/OrganizationRegister/#function-getparametershash", 
            "text": "Execution cost:  No bound available.  constant | pure  Inputs: \n1.  _token   of type address \n2.  _fee   of type uint256 \n3.  _beneficiary   of type address  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function getParametersHash"
        }, 
        {
            "location": "/ref/universalSchemes/OrganizationRegister/#function-addorpromoteaddress", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _avatar   of type address \n2.  _record   of type address \n3.  _amount   of type uint256  Returns:  Nothing", 
            "title": "function addOrPromoteAddress"
        }, 
        {
            "location": "/ref/universalSchemes/SchemeRegistrar/", 
            "text": "contract\n SchemeRegistrar (\nsource\n)\n\n\nCode deposit cost: \nless than 737800 gas.\n\n\nExecution cost: \nless than 21141 gas.\n\n\nTotal deploy cost(deposit + execution): \nless than 758941 gas.\n\n\n\n\nA registrar for Schemes for organizations\n\n\n\n\nReference\n\n\n\n\nConstructors\n\n\nSchemeRegistrar()\n\n\n\n\n\n\nEvents\n\n\nOwnershipTransferred\n\n\nLogRemoveSchemeProposal\n\n\nLogProposalExecuted\n\n\nLogProposalDeleted\n\n\nLogNewSchemeProposal\n\n\nLogNewProposal\n\n\n\n\n\n\nFallback\n\n\nFunctions\n\n\nproposeToRemoveScheme\n\n\nparameters\n\n\nsetParameters\n\n\nupdateParameters\n\n\ntransferOwnership\n\n\nproposeScheme\n\n\nowner\n\n\norganizationsProposals\n\n\nhashedParameters\n\n\ngetParametersHash\n\n\nexecute\n\n\n\n\n\n\n\n\nConstructors\n\n\nconstructor\n SchemeRegistrar()\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nParams:\n\n\nNothing\n\n\nEvents\n\n\nevent\n OwnershipTransferred\n\n\nParams:\n\n1. \npreviousOwner\n \nof type address\n\n2. \nnewOwner\n \nof type address\n\n\nevent\n LogRemoveSchemeProposal\n\n\nParams:\n\n1. \n_avatar\n \nof type address\n\n2. \n_proposalId\n \nof type bytes32\n\n3. \n_intVoteInterface\n \nof type address\n\n4. \n_scheme\n \nof type address\n\n\nevent\n LogProposalExecuted\n\n\nParams:\n\n1. \n_avatar\n \nof type address\n\n2. \n_proposalId\n \nof type bytes32\n\n\nevent\n LogProposalDeleted\n\n\nParams:\n\n1. \n_avatar\n \nof type address\n\n2. \n_proposalId\n \nof type bytes32\n\n\nevent\n LogNewSchemeProposal\n\n\nParams:\n\n1. \n_avatar\n \nof type address\n\n2. \n_proposalId\n \nof type bytes32\n\n3. \n_intVoteInterface\n \nof type address\n\n4. \n_scheme\n \nof type address\n\n5. \n_parametersHash\n \nof type bytes32\n\n6. \n_isRegistering\n \nof type bool\n\n\nevent\n LogNewProposal\n\n\nParams:\n\n1. \nproposalId\n \nof type bytes32\n\n\nFallback\n\n\nNothing\n\n\nFunctions\n\n\nfunction\n proposeToRemoveScheme\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_avatar\n \nof type address\n\n2. \n_scheme\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n parameters\n\n\nExecution cost: \nless than 1148 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type bytes32\n\n\nReturns:\n\n1. \nvoteRegisterParams\n \nof type bytes32\n\n2. \nvoteRemoveParams\n \nof type bytes32\n\n3. \nintVote\n \nof type address\n\n\nfunction\n setParameters\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_voteRegisterParams\n \nof type bytes32\n\n2. \n_voteRemoveParams\n \nof type bytes32\n\n3. \n_intVote\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n updateParameters\n\n\nExecution cost: \nless than 20572 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_hashedParameters\n \nof type bytes32\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n transferOwnership\n\n\n\n\nAllows the current owner to transfer control of the contract to a newOwner.\n\n\n\n\nExecution cost: \nless than 23005 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \nnewOwner\n \nof type address- The address to transfer ownership to.\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n proposeScheme\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_avatar\n \nof type address\n\n2. \n_scheme\n \nof type address\n\n3. \n_parametersHash\n \nof type bytes32\n\n4. \n_isRegistering\n \nof type bool\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n owner\n\n\nExecution cost: \nless than 765 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type address\n\n\nfunction\n organizationsProposals\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type address\n\n2. \nunnamed\n \nof type bytes32\n\n\nReturns:\n\n1. \nscheme\n \nof type address\n\n2. \nparametersHash\n \nof type bytes32\n\n3. \nproposalType\n \nof type uint256\n\n4. \nisRegistering\n \nof type bool\n\n\nfunction\n hashedParameters\n\n\nExecution cost: \nless than 656 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n getParametersHash\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | pure\n\n\nInputs:\n\n1. \n_voteRegisterParams\n \nof type bytes32\n\n2. \n_voteRemoveParams\n \nof type bytes32\n\n3. \n_intVote\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n execute\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_avatar\n \nof type address\n\n3. \n_param\n \nof type int256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool", 
            "title": "*contract* SchemeRegistrar ([source](https://github.com/daostack/daostack/tree/master/./contracts/universalSchemes/SchemeRegistrar.sol))"
        }, 
        {
            "location": "/ref/universalSchemes/SchemeRegistrar/#contract-schemeregistrar-source", 
            "text": "Code deposit cost:  less than 737800 gas.  Execution cost:  less than 21141 gas.  Total deploy cost(deposit + execution):  less than 758941 gas.   A registrar for Schemes for organizations", 
            "title": "contract SchemeRegistrar (source)"
        }, 
        {
            "location": "/ref/universalSchemes/SchemeRegistrar/#reference", 
            "text": "Constructors  SchemeRegistrar()    Events  OwnershipTransferred  LogRemoveSchemeProposal  LogProposalExecuted  LogProposalDeleted  LogNewSchemeProposal  LogNewProposal    Fallback  Functions  proposeToRemoveScheme  parameters  setParameters  updateParameters  transferOwnership  proposeScheme  owner  organizationsProposals  hashedParameters  getParametersHash  execute", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/universalSchemes/SchemeRegistrar/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/universalSchemes/SchemeRegistrar/#constructor-schemeregistrar", 
            "text": "Execution cost:  No bound available.  nonpayable  Params:  Nothing", 
            "title": "constructor SchemeRegistrar()"
        }, 
        {
            "location": "/ref/universalSchemes/SchemeRegistrar/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/universalSchemes/SchemeRegistrar/#event-ownershiptransferred", 
            "text": "Params: \n1.  previousOwner   of type address \n2.  newOwner   of type address", 
            "title": "event OwnershipTransferred"
        }, 
        {
            "location": "/ref/universalSchemes/SchemeRegistrar/#event-logremoveschemeproposal", 
            "text": "Params: \n1.  _avatar   of type address \n2.  _proposalId   of type bytes32 \n3.  _intVoteInterface   of type address \n4.  _scheme   of type address", 
            "title": "event LogRemoveSchemeProposal"
        }, 
        {
            "location": "/ref/universalSchemes/SchemeRegistrar/#event-logproposalexecuted", 
            "text": "Params: \n1.  _avatar   of type address \n2.  _proposalId   of type bytes32", 
            "title": "event LogProposalExecuted"
        }, 
        {
            "location": "/ref/universalSchemes/SchemeRegistrar/#event-logproposaldeleted", 
            "text": "Params: \n1.  _avatar   of type address \n2.  _proposalId   of type bytes32", 
            "title": "event LogProposalDeleted"
        }, 
        {
            "location": "/ref/universalSchemes/SchemeRegistrar/#event-lognewschemeproposal", 
            "text": "Params: \n1.  _avatar   of type address \n2.  _proposalId   of type bytes32 \n3.  _intVoteInterface   of type address \n4.  _scheme   of type address \n5.  _parametersHash   of type bytes32 \n6.  _isRegistering   of type bool", 
            "title": "event LogNewSchemeProposal"
        }, 
        {
            "location": "/ref/universalSchemes/SchemeRegistrar/#event-lognewproposal", 
            "text": "Params: \n1.  proposalId   of type bytes32", 
            "title": "event LogNewProposal"
        }, 
        {
            "location": "/ref/universalSchemes/SchemeRegistrar/#fallback", 
            "text": "Nothing", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/universalSchemes/SchemeRegistrar/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/universalSchemes/SchemeRegistrar/#function-proposetoremovescheme", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _avatar   of type address \n2.  _scheme   of type address  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function proposeToRemoveScheme"
        }, 
        {
            "location": "/ref/universalSchemes/SchemeRegistrar/#function-parameters", 
            "text": "Execution cost:  less than 1148 gas.  constant | view  Inputs: \n1.  unnamed   of type bytes32  Returns: \n1.  voteRegisterParams   of type bytes32 \n2.  voteRemoveParams   of type bytes32 \n3.  intVote   of type address", 
            "title": "function parameters"
        }, 
        {
            "location": "/ref/universalSchemes/SchemeRegistrar/#function-setparameters", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _voteRegisterParams   of type bytes32 \n2.  _voteRemoveParams   of type bytes32 \n3.  _intVote   of type address  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function setParameters"
        }, 
        {
            "location": "/ref/universalSchemes/SchemeRegistrar/#function-updateparameters", 
            "text": "Execution cost:  less than 20572 gas.  nonpayable  Inputs: \n1.  _hashedParameters   of type bytes32  Returns:  Nothing", 
            "title": "function updateParameters"
        }, 
        {
            "location": "/ref/universalSchemes/SchemeRegistrar/#function-transferownership", 
            "text": "Allows the current owner to transfer control of the contract to a newOwner.   Execution cost:  less than 23005 gas.  nonpayable  Inputs: \n1.  newOwner   of type address- The address to transfer ownership to.  Returns:  Nothing", 
            "title": "function transferOwnership"
        }, 
        {
            "location": "/ref/universalSchemes/SchemeRegistrar/#function-proposescheme", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _avatar   of type address \n2.  _scheme   of type address \n3.  _parametersHash   of type bytes32 \n4.  _isRegistering   of type bool  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function proposeScheme"
        }, 
        {
            "location": "/ref/universalSchemes/SchemeRegistrar/#function-owner", 
            "text": "Execution cost:  less than 765 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type address", 
            "title": "function owner"
        }, 
        {
            "location": "/ref/universalSchemes/SchemeRegistrar/#function-organizationsproposals", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs: \n1.  unnamed   of type address \n2.  unnamed   of type bytes32  Returns: \n1.  scheme   of type address \n2.  parametersHash   of type bytes32 \n3.  proposalType   of type uint256 \n4.  isRegistering   of type bool", 
            "title": "function organizationsProposals"
        }, 
        {
            "location": "/ref/universalSchemes/SchemeRegistrar/#function-hashedparameters", 
            "text": "Execution cost:  less than 656 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function hashedParameters"
        }, 
        {
            "location": "/ref/universalSchemes/SchemeRegistrar/#function-getparametershash", 
            "text": "Execution cost:  No bound available.  constant | pure  Inputs: \n1.  _voteRegisterParams   of type bytes32 \n2.  _voteRemoveParams   of type bytes32 \n3.  _intVote   of type address  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function getParametersHash"
        }, 
        {
            "location": "/ref/universalSchemes/SchemeRegistrar/#function-execute", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32 \n2.  _avatar   of type address \n3.  _param   of type int256  Returns: \n1.  unnamed   of type bool", 
            "title": "function execute"
        }, 
        {
            "location": "/ref/universalSchemes/SimpleICO/", 
            "text": "contract\n SimpleICO (\nsource\n)\n\n\nCode deposit cost: \nless than 876400 gas.\n\n\nExecution cost: \nless than 21277 gas.\n\n\nTotal deploy cost(deposit + execution): \nless than 897677 gas.\n\n\n\n\nSimpleICO scheme.\n\n\n\n\nReference\n\n\n\n\nConstructors\n\n\nSimpleICO()\n\n\n\n\n\n\nEvents\n\n\nOwnershipTransferred\n\n\nLogNewProposal\n\n\nDonationReceived\n\n\n\n\n\n\nFallback\n\n\nFunctions\n\n\nowner\n\n\nparameters\n\n\ntransferOwnership\n\n\nupdateParameters\n\n\nresumeICO\n\n\nstart\n\n\nsetParameters\n\n\norganizationsICOInfo\n\n\nisActive\n\n\nhashedParameters\n\n\nhaltICO\n\n\ngetParametersHash\n\n\ndonate\n\n\n\n\n\n\n\n\nConstructors\n\n\nconstructor\n SimpleICO()\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nParams:\n\n\nNothing\n\n\nEvents\n\n\nevent\n OwnershipTransferred\n\n\nParams:\n\n1. \npreviousOwner\n \nof type address\n\n2. \nnewOwner\n \nof type address\n\n\nevent\n LogNewProposal\n\n\nParams:\n\n1. \nproposalId\n \nof type bytes32\n\n\nevent\n DonationReceived\n\n\nParams:\n\n1. \norganization\n \nof type address\n\n2. \n_beneficiary\n \nof type address\n\n3. \n_incomingEther\n \nof type uint256\n\n4. \n_tokensAmount\n \nof type uint256\n\n\nFallback\n\n\nNothing\n\n\nFunctions\n\n\nfunction\n owner\n\n\nExecution cost: \nless than 721 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type address\n\n\nfunction\n parameters\n\n\nExecution cost: \nless than 1880 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type bytes32\n\n\nReturns:\n\n1. \ncap\n \nof type uint256\n\n2. \nprice\n \nof type uint256\n\n3. \nstartBlock\n \nof type uint256\n\n4. \nendBlock\n \nof type uint256\n\n5. \nbeneficiary\n \nof type address\n\n6. \nadmin\n \nof type address\n\n\nfunction\n transferOwnership\n\n\n\n\nAllows the current owner to transfer control of the contract to a newOwner.\n\n\n\n\nExecution cost: \nless than 23049 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \nnewOwner\n \nof type address- The address to transfer ownership to.\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n updateParameters\n\n\nExecution cost: \nless than 20572 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_hashedParameters\n \nof type bytes32\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n resumeICO\n\n\n\n\nAllowing admin to reopen an ICO.\n\n\n\n\nExecution cost: \nless than 21513 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_avatar\n \nof type address- The Avatar's of the organization\n\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n start\n\n\n\n\nstart an ICO\n\n\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_avatar\n \nof type address- The Avatar's of the organization\n\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n setParameters\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_cap\n \nof type uint256\n\n2. \n_price\n \nof type uint256\n\n3. \n_startBlock\n \nof type uint256\n\n4. \n_endBlock\n \nof type uint256\n\n5. \n_beneficiary\n \nof type address\n\n6. \n_admin\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n organizationsICOInfo\n\n\nExecution cost: \nless than 1559 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type address\n\n\nReturns:\n\n1. \nparamsHash\n \nof type bytes32\n\n2. \navatarContractICO\n \nof type address\n\n3. \ntotalEthRaised\n \nof type uint256\n\n4. \nisHalted\n \nof type bool\n\n\nfunction\n isActive\n\n\n\n\nCheck is an ICO is active (halted is still considered active). Active ICO:\n 1. The organization is registered.\n 2. The ICO didn't reach it's cap yet.\n 3. The current block isn't bigger than the \"endBlock\" \n Smaller then the \"startBlock\"\n\n\n\n\nExecution cost: \nless than 3761 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \n_avatar\n \nof type address- The Avatar's of the organization\n\n\n\nbool which represents a successful of the function\n\n\nfunction\n hashedParameters\n\n\nExecution cost: \nless than 700 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n haltICO\n\n\n\n\nAllowing admin to halt an ICO.\n\n\n\n\nExecution cost: \nless than 21475 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_avatar\n \nof type address- The Avatar's of the organization\n\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n getParametersHash\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | pure\n\n\nInputs:\n\n1. \n_cap\n \nof type uint256\n\n2. \n_price\n \nof type uint256\n\n3. \n_startBlock\n \nof type uint256\n\n4. \n_endBlock\n \nof type uint256\n\n5. \n_beneficiary\n \nof type address\n\n6. \n_admin\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n donate\n\n\nExecution cost: \nNo bound available.\n\n\npayable\n\n\nInputs:\n\n1. \n_avatar\n \nof type address\n\n2. \n_beneficiary\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type uint256", 
            "title": "*contract* SimpleICO ([source](https://github.com/daostack/daostack/tree/master/./contracts/universalSchemes/SimpleICO.sol))"
        }, 
        {
            "location": "/ref/universalSchemes/SimpleICO/#contract-simpleico-source", 
            "text": "Code deposit cost:  less than 876400 gas.  Execution cost:  less than 21277 gas.  Total deploy cost(deposit + execution):  less than 897677 gas.   SimpleICO scheme.", 
            "title": "contract SimpleICO (source)"
        }, 
        {
            "location": "/ref/universalSchemes/SimpleICO/#reference", 
            "text": "Constructors  SimpleICO()    Events  OwnershipTransferred  LogNewProposal  DonationReceived    Fallback  Functions  owner  parameters  transferOwnership  updateParameters  resumeICO  start  setParameters  organizationsICOInfo  isActive  hashedParameters  haltICO  getParametersHash  donate", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/universalSchemes/SimpleICO/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/universalSchemes/SimpleICO/#constructor-simpleico", 
            "text": "Execution cost:  No bound available.  nonpayable  Params:  Nothing", 
            "title": "constructor SimpleICO()"
        }, 
        {
            "location": "/ref/universalSchemes/SimpleICO/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/universalSchemes/SimpleICO/#event-ownershiptransferred", 
            "text": "Params: \n1.  previousOwner   of type address \n2.  newOwner   of type address", 
            "title": "event OwnershipTransferred"
        }, 
        {
            "location": "/ref/universalSchemes/SimpleICO/#event-lognewproposal", 
            "text": "Params: \n1.  proposalId   of type bytes32", 
            "title": "event LogNewProposal"
        }, 
        {
            "location": "/ref/universalSchemes/SimpleICO/#event-donationreceived", 
            "text": "Params: \n1.  organization   of type address \n2.  _beneficiary   of type address \n3.  _incomingEther   of type uint256 \n4.  _tokensAmount   of type uint256", 
            "title": "event DonationReceived"
        }, 
        {
            "location": "/ref/universalSchemes/SimpleICO/#fallback", 
            "text": "Nothing", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/universalSchemes/SimpleICO/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/universalSchemes/SimpleICO/#function-owner", 
            "text": "Execution cost:  less than 721 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type address", 
            "title": "function owner"
        }, 
        {
            "location": "/ref/universalSchemes/SimpleICO/#function-parameters", 
            "text": "Execution cost:  less than 1880 gas.  constant | view  Inputs: \n1.  unnamed   of type bytes32  Returns: \n1.  cap   of type uint256 \n2.  price   of type uint256 \n3.  startBlock   of type uint256 \n4.  endBlock   of type uint256 \n5.  beneficiary   of type address \n6.  admin   of type address", 
            "title": "function parameters"
        }, 
        {
            "location": "/ref/universalSchemes/SimpleICO/#function-transferownership", 
            "text": "Allows the current owner to transfer control of the contract to a newOwner.   Execution cost:  less than 23049 gas.  nonpayable  Inputs: \n1.  newOwner   of type address- The address to transfer ownership to.  Returns:  Nothing", 
            "title": "function transferOwnership"
        }, 
        {
            "location": "/ref/universalSchemes/SimpleICO/#function-updateparameters", 
            "text": "Execution cost:  less than 20572 gas.  nonpayable  Inputs: \n1.  _hashedParameters   of type bytes32  Returns:  Nothing", 
            "title": "function updateParameters"
        }, 
        {
            "location": "/ref/universalSchemes/SimpleICO/#function-resumeico", 
            "text": "Allowing admin to reopen an ICO.   Execution cost:  less than 21513 gas.  nonpayable  Inputs: \n1.  _avatar   of type address- The Avatar's of the organization  Returns:  Nothing", 
            "title": "function resumeICO"
        }, 
        {
            "location": "/ref/universalSchemes/SimpleICO/#function-start", 
            "text": "start an ICO   Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _avatar   of type address- The Avatar's of the organization  Returns:  Nothing", 
            "title": "function start"
        }, 
        {
            "location": "/ref/universalSchemes/SimpleICO/#function-setparameters", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _cap   of type uint256 \n2.  _price   of type uint256 \n3.  _startBlock   of type uint256 \n4.  _endBlock   of type uint256 \n5.  _beneficiary   of type address \n6.  _admin   of type address  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function setParameters"
        }, 
        {
            "location": "/ref/universalSchemes/SimpleICO/#function-organizationsicoinfo", 
            "text": "Execution cost:  less than 1559 gas.  constant | view  Inputs: \n1.  unnamed   of type address  Returns: \n1.  paramsHash   of type bytes32 \n2.  avatarContractICO   of type address \n3.  totalEthRaised   of type uint256 \n4.  isHalted   of type bool", 
            "title": "function organizationsICOInfo"
        }, 
        {
            "location": "/ref/universalSchemes/SimpleICO/#function-isactive", 
            "text": "Check is an ICO is active (halted is still considered active). Active ICO:\n 1. The organization is registered.\n 2. The ICO didn't reach it's cap yet.\n 3. The current block isn't bigger than the \"endBlock\"   Smaller then the \"startBlock\"   Execution cost:  less than 3761 gas.  constant | view  Inputs: \n1.  _avatar   of type address- The Avatar's of the organization  bool which represents a successful of the function", 
            "title": "function isActive"
        }, 
        {
            "location": "/ref/universalSchemes/SimpleICO/#function-hashedparameters", 
            "text": "Execution cost:  less than 700 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function hashedParameters"
        }, 
        {
            "location": "/ref/universalSchemes/SimpleICO/#function-haltico", 
            "text": "Allowing admin to halt an ICO.   Execution cost:  less than 21475 gas.  nonpayable  Inputs: \n1.  _avatar   of type address- The Avatar's of the organization  Returns:  Nothing", 
            "title": "function haltICO"
        }, 
        {
            "location": "/ref/universalSchemes/SimpleICO/#function-getparametershash", 
            "text": "Execution cost:  No bound available.  constant | pure  Inputs: \n1.  _cap   of type uint256 \n2.  _price   of type uint256 \n3.  _startBlock   of type uint256 \n4.  _endBlock   of type uint256 \n5.  _beneficiary   of type address \n6.  _admin   of type address  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function getParametersHash"
        }, 
        {
            "location": "/ref/universalSchemes/SimpleICO/#function-donate", 
            "text": "Execution cost:  No bound available.  payable  Inputs: \n1.  _avatar   of type address \n2.  _beneficiary   of type address  Returns: \n1.  unnamed   of type uint256", 
            "title": "function donate"
        }, 
        {
            "location": "/ref/universalSchemes/UniversalScheme/", 
            "text": "contract\n UniversalScheme (\nsource\n)\n\n\nCode deposit cost: \nless than 98600 gas.\n\n\nExecution cost: \nless than 20496 gas.\n\n\nTotal deploy cost(deposit + execution): \nless than 119096 gas.\n\n\n\n\nReference\n\n\n\n\n\n\nConstructors\n\n\n\n\n\n\nEvents\n\n\n\n\nOwnershipTransferred\n\n\nLogNewProposal\n\n\n\n\n\n\nFallback\n\n\nFunctions\n\n\nupdateParameters\n\n\ntransferOwnership\n\n\nowner\n\n\nhashedParameters\n\n\n\n\n\n\n\n\nConstructors\n\n\nEvents\n\n\nevent\n OwnershipTransferred\n\n\nParams:\n\n1. \npreviousOwner\n \nof type address\n\n2. \nnewOwner\n \nof type address\n\n\nevent\n LogNewProposal\n\n\nParams:\n\n1. \nproposalId\n \nof type bytes32\n\n\nFallback\n\n\nNothing\n\n\nFunctions\n\n\nfunction\n updateParameters\n\n\nExecution cost: \nless than 20443 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_hashedParameters\n \nof type bytes32\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n transferOwnership\n\n\n\n\nAllows the current owner to transfer control of the contract to a newOwner.\n\n\n\n\nExecution cost: \nless than 22788 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \nnewOwner\n \nof type address- The address to transfer ownership to.\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n owner\n\n\nExecution cost: \nless than 548 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type address\n\n\nfunction\n hashedParameters\n\n\nExecution cost: \nless than 439 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32", 
            "title": "*contract* UniversalScheme ([source](https://github.com/daostack/daostack/tree/master/./contracts/universalSchemes/UniversalScheme.sol))"
        }, 
        {
            "location": "/ref/universalSchemes/UniversalScheme/#contract-universalscheme-source", 
            "text": "Code deposit cost:  less than 98600 gas.  Execution cost:  less than 20496 gas.  Total deploy cost(deposit + execution):  less than 119096 gas.", 
            "title": "contract UniversalScheme (source)"
        }, 
        {
            "location": "/ref/universalSchemes/UniversalScheme/#reference", 
            "text": "Constructors    Events   OwnershipTransferred  LogNewProposal    Fallback  Functions  updateParameters  transferOwnership  owner  hashedParameters", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/universalSchemes/UniversalScheme/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/universalSchemes/UniversalScheme/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/universalSchemes/UniversalScheme/#event-ownershiptransferred", 
            "text": "Params: \n1.  previousOwner   of type address \n2.  newOwner   of type address", 
            "title": "event OwnershipTransferred"
        }, 
        {
            "location": "/ref/universalSchemes/UniversalScheme/#event-lognewproposal", 
            "text": "Params: \n1.  proposalId   of type bytes32", 
            "title": "event LogNewProposal"
        }, 
        {
            "location": "/ref/universalSchemes/UniversalScheme/#fallback", 
            "text": "Nothing", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/universalSchemes/UniversalScheme/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/universalSchemes/UniversalScheme/#function-updateparameters", 
            "text": "Execution cost:  less than 20443 gas.  nonpayable  Inputs: \n1.  _hashedParameters   of type bytes32  Returns:  Nothing", 
            "title": "function updateParameters"
        }, 
        {
            "location": "/ref/universalSchemes/UniversalScheme/#function-transferownership", 
            "text": "Allows the current owner to transfer control of the contract to a newOwner.   Execution cost:  less than 22788 gas.  nonpayable  Inputs: \n1.  newOwner   of type address- The address to transfer ownership to.  Returns:  Nothing", 
            "title": "function transferOwnership"
        }, 
        {
            "location": "/ref/universalSchemes/UniversalScheme/#function-owner", 
            "text": "Execution cost:  less than 548 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type address", 
            "title": "function owner"
        }, 
        {
            "location": "/ref/universalSchemes/UniversalScheme/#function-hashedparameters", 
            "text": "Execution cost:  less than 439 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function hashedParameters"
        }, 
        {
            "location": "/ref/universalSchemes/UniversalSchemeInterface/", 
            "text": "contract\n UniversalSchemeInterface (\nsource\n)\n\n\nCode deposit cost: \nNo bound available.\n\n\nExecution cost: \nNo bound available.\n\n\nTotal deploy cost(deposit + execution): \nNo bound available.\n\n\n\n\nA Scheme defines rules the DAO follows.\nA special \nScheme\n called the \nGenesis Scheme\n takes care of creating a brand new DAO.\n\n\n\n\nUniversal Scheme\n\n\nUniversal Schemes\n are schemes that inherit from \nUniversalSchemeInterface\n and are supposed to be deployed once.\n\n\nNon-universal Scheme\n\n\nNon-Universal Schemes\n are schemes that do not follow any standard and do not inherit from \nUniversalSchemeInterface\n\n\nReference\n\n\n\n\n\n\nConstructors\n\n\n\n\n\n\nEvents\n\n\n\n\n\n\nFallback\n\n\n\n\nFunctions\n\n\nupdateParameters\n\n\n\n\n\n\n\n\nConstructors\n\n\nEvents\n\n\nFallback\n\n\nNothing\n\n\nFunctions\n\n\nfunction\n updateParameters\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_hashedParameters\n \nof type bytes32\n\n\nReturns:\n\n\nNothing", 
            "title": "*contract* UniversalSchemeInterface ([source](https://github.com/daostack/daostack/tree/master/./contracts/universalSchemes/UniversalSchemeInterface.sol))"
        }, 
        {
            "location": "/ref/universalSchemes/UniversalSchemeInterface/#contract-universalschemeinterface-source", 
            "text": "Code deposit cost:  No bound available.  Execution cost:  No bound available.  Total deploy cost(deposit + execution):  No bound available.   A Scheme defines rules the DAO follows.\nA special  Scheme  called the  Genesis Scheme  takes care of creating a brand new DAO.", 
            "title": "contract UniversalSchemeInterface (source)"
        }, 
        {
            "location": "/ref/universalSchemes/UniversalSchemeInterface/#universal-scheme", 
            "text": "Universal Schemes  are schemes that inherit from  UniversalSchemeInterface  and are supposed to be deployed once.", 
            "title": "Universal Scheme"
        }, 
        {
            "location": "/ref/universalSchemes/UniversalSchemeInterface/#non-universal-scheme", 
            "text": "Non-Universal Schemes  are schemes that do not follow any standard and do not inherit from  UniversalSchemeInterface", 
            "title": "Non-universal Scheme"
        }, 
        {
            "location": "/ref/universalSchemes/UniversalSchemeInterface/#reference", 
            "text": "Constructors    Events    Fallback   Functions  updateParameters", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/universalSchemes/UniversalSchemeInterface/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/universalSchemes/UniversalSchemeInterface/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/universalSchemes/UniversalSchemeInterface/#fallback", 
            "text": "Nothing", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/universalSchemes/UniversalSchemeInterface/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/universalSchemes/UniversalSchemeInterface/#function-updateparameters", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _hashedParameters   of type bytes32  Returns:  Nothing", 
            "title": "function updateParameters"
        }, 
        {
            "location": "/ref/universalSchemes/UpgradeScheme/", 
            "text": "contract\n UpgradeScheme (\nsource\n)\n\n\nCode deposit cost: \nless than 711800 gas.\n\n\nExecution cost: \nless than 21115 gas.\n\n\nTotal deploy cost(deposit + execution): \nless than 732915 gas.\n\n\n\n\nA scheme to manage the upgrade of an organization.\n\n\n\n\nReference\n\n\n\n\nConstructors\n\n\nUpgradeScheme()\n\n\n\n\n\n\nEvents\n\n\nOwnershipTransferred\n\n\nLogProposalExecuted\n\n\nLogProposalDeleted\n\n\nLogNewUpgradeProposal\n\n\nLogNewProposal\n\n\nLogChangeUpgradeSchemeProposal\n\n\n\n\n\n\nFallback\n\n\nFunctions\n\n\nexecute\n\n\nparameters\n\n\ntransferOwnership\n\n\nproposeUpgrade\n\n\nupdateParameters\n\n\nproposeChangeUpgradingScheme\n\n\nsetParameters\n\n\nowner\n\n\norganizationsProposals\n\n\nhashedParameters\n\n\ngetParametersHash\n\n\n\n\n\n\n\n\nConstructors\n\n\nconstructor\n UpgradeScheme()\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nParams:\n\n\nNothing\n\n\nEvents\n\n\nevent\n OwnershipTransferred\n\n\nParams:\n\n1. \npreviousOwner\n \nof type address\n\n2. \nnewOwner\n \nof type address\n\n\nevent\n LogProposalExecuted\n\n\nParams:\n\n1. \n_avatar\n \nof type address\n\n2. \n_proposalId\n \nof type bytes32\n\n\nevent\n LogProposalDeleted\n\n\nParams:\n\n1. \n_avatar\n \nof type address\n\n2. \n_proposalId\n \nof type bytes32\n\n\nevent\n LogNewUpgradeProposal\n\n\nParams:\n\n1. \n_avatar\n \nof type address\n\n2. \n_proposalId\n \nof type bytes32\n\n3. \n_intVoteInterface\n \nof type address\n\n4. \n_newController\n \nof type address\n\n\nevent\n LogNewProposal\n\n\nParams:\n\n1. \nproposalId\n \nof type bytes32\n\n\nevent\n LogChangeUpgradeSchemeProposal\n\n\nParams:\n\n1. \n_avatar\n \nof type address\n\n2. \n_proposalId\n \nof type bytes32\n\n3. \n_intVoteInterface\n \nof type address\n\n4. \nnewUpgradeScheme\n \nof type address\n\n5. \n_params\n \nof type bytes32\n\n\nFallback\n\n\nNothing\n\n\nFunctions\n\n\nfunction\n execute\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_avatar\n \nof type address\n\n3. \n_param\n \nof type int256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n parameters\n\n\nExecution cost: \nless than 894 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type bytes32\n\n\nReturns:\n\n1. \nvoteParams\n \nof type bytes32\n\n2. \nintVote\n \nof type address\n\n\nfunction\n transferOwnership\n\n\n\n\nAllows the current owner to transfer control of the contract to a newOwner.\n\n\n\n\nExecution cost: \nless than 23005 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \nnewOwner\n \nof type address- The address to transfer ownership to.\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n proposeUpgrade\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_avatar\n \nof type address\n\n2. \n_newController\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n updateParameters\n\n\nExecution cost: \nless than 20594 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_hashedParameters\n \nof type bytes32\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n proposeChangeUpgradingScheme\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_avatar\n \nof type address\n\n2. \n_scheme\n \nof type address\n\n3. \n_params\n \nof type bytes32\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n setParameters\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_voteParams\n \nof type bytes32\n\n2. \n_intVote\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n owner\n\n\nExecution cost: \nless than 765 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type address\n\n\nfunction\n organizationsProposals\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type address\n\n2. \nunnamed\n \nof type bytes32\n\n\nReturns:\n\n1. \nupgradeContract\n \nof type address\n\n2. \nparams\n \nof type bytes32\n\n3. \nproposalType\n \nof type uint256\n\n\nfunction\n hashedParameters\n\n\nExecution cost: \nless than 656 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n getParametersHash\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | pure\n\n\nInputs:\n\n1. \n_voteParams\n \nof type bytes32\n\n2. \n_intVote\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32", 
            "title": "*contract* UpgradeScheme ([source](https://github.com/daostack/daostack/tree/master/./contracts/universalSchemes/UpgradeScheme.sol))"
        }, 
        {
            "location": "/ref/universalSchemes/UpgradeScheme/#contract-upgradescheme-source", 
            "text": "Code deposit cost:  less than 711800 gas.  Execution cost:  less than 21115 gas.  Total deploy cost(deposit + execution):  less than 732915 gas.   A scheme to manage the upgrade of an organization.", 
            "title": "contract UpgradeScheme (source)"
        }, 
        {
            "location": "/ref/universalSchemes/UpgradeScheme/#reference", 
            "text": "Constructors  UpgradeScheme()    Events  OwnershipTransferred  LogProposalExecuted  LogProposalDeleted  LogNewUpgradeProposal  LogNewProposal  LogChangeUpgradeSchemeProposal    Fallback  Functions  execute  parameters  transferOwnership  proposeUpgrade  updateParameters  proposeChangeUpgradingScheme  setParameters  owner  organizationsProposals  hashedParameters  getParametersHash", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/universalSchemes/UpgradeScheme/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/universalSchemes/UpgradeScheme/#constructor-upgradescheme", 
            "text": "Execution cost:  No bound available.  nonpayable  Params:  Nothing", 
            "title": "constructor UpgradeScheme()"
        }, 
        {
            "location": "/ref/universalSchemes/UpgradeScheme/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/universalSchemes/UpgradeScheme/#event-ownershiptransferred", 
            "text": "Params: \n1.  previousOwner   of type address \n2.  newOwner   of type address", 
            "title": "event OwnershipTransferred"
        }, 
        {
            "location": "/ref/universalSchemes/UpgradeScheme/#event-logproposalexecuted", 
            "text": "Params: \n1.  _avatar   of type address \n2.  _proposalId   of type bytes32", 
            "title": "event LogProposalExecuted"
        }, 
        {
            "location": "/ref/universalSchemes/UpgradeScheme/#event-logproposaldeleted", 
            "text": "Params: \n1.  _avatar   of type address \n2.  _proposalId   of type bytes32", 
            "title": "event LogProposalDeleted"
        }, 
        {
            "location": "/ref/universalSchemes/UpgradeScheme/#event-lognewupgradeproposal", 
            "text": "Params: \n1.  _avatar   of type address \n2.  _proposalId   of type bytes32 \n3.  _intVoteInterface   of type address \n4.  _newController   of type address", 
            "title": "event LogNewUpgradeProposal"
        }, 
        {
            "location": "/ref/universalSchemes/UpgradeScheme/#event-lognewproposal", 
            "text": "Params: \n1.  proposalId   of type bytes32", 
            "title": "event LogNewProposal"
        }, 
        {
            "location": "/ref/universalSchemes/UpgradeScheme/#event-logchangeupgradeschemeproposal", 
            "text": "Params: \n1.  _avatar   of type address \n2.  _proposalId   of type bytes32 \n3.  _intVoteInterface   of type address \n4.  newUpgradeScheme   of type address \n5.  _params   of type bytes32", 
            "title": "event LogChangeUpgradeSchemeProposal"
        }, 
        {
            "location": "/ref/universalSchemes/UpgradeScheme/#fallback", 
            "text": "Nothing", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/universalSchemes/UpgradeScheme/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/universalSchemes/UpgradeScheme/#function-execute", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32 \n2.  _avatar   of type address \n3.  _param   of type int256  Returns: \n1.  unnamed   of type bool", 
            "title": "function execute"
        }, 
        {
            "location": "/ref/universalSchemes/UpgradeScheme/#function-parameters", 
            "text": "Execution cost:  less than 894 gas.  constant | view  Inputs: \n1.  unnamed   of type bytes32  Returns: \n1.  voteParams   of type bytes32 \n2.  intVote   of type address", 
            "title": "function parameters"
        }, 
        {
            "location": "/ref/universalSchemes/UpgradeScheme/#function-transferownership", 
            "text": "Allows the current owner to transfer control of the contract to a newOwner.   Execution cost:  less than 23005 gas.  nonpayable  Inputs: \n1.  newOwner   of type address- The address to transfer ownership to.  Returns:  Nothing", 
            "title": "function transferOwnership"
        }, 
        {
            "location": "/ref/universalSchemes/UpgradeScheme/#function-proposeupgrade", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _avatar   of type address \n2.  _newController   of type address  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function proposeUpgrade"
        }, 
        {
            "location": "/ref/universalSchemes/UpgradeScheme/#function-updateparameters", 
            "text": "Execution cost:  less than 20594 gas.  nonpayable  Inputs: \n1.  _hashedParameters   of type bytes32  Returns:  Nothing", 
            "title": "function updateParameters"
        }, 
        {
            "location": "/ref/universalSchemes/UpgradeScheme/#function-proposechangeupgradingscheme", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _avatar   of type address \n2.  _scheme   of type address \n3.  _params   of type bytes32  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function proposeChangeUpgradingScheme"
        }, 
        {
            "location": "/ref/universalSchemes/UpgradeScheme/#function-setparameters", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _voteParams   of type bytes32 \n2.  _intVote   of type address  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function setParameters"
        }, 
        {
            "location": "/ref/universalSchemes/UpgradeScheme/#function-owner", 
            "text": "Execution cost:  less than 765 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type address", 
            "title": "function owner"
        }, 
        {
            "location": "/ref/universalSchemes/UpgradeScheme/#function-organizationsproposals", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs: \n1.  unnamed   of type address \n2.  unnamed   of type bytes32  Returns: \n1.  upgradeContract   of type address \n2.  params   of type bytes32 \n3.  proposalType   of type uint256", 
            "title": "function organizationsProposals"
        }, 
        {
            "location": "/ref/universalSchemes/UpgradeScheme/#function-hashedparameters", 
            "text": "Execution cost:  less than 656 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function hashedParameters"
        }, 
        {
            "location": "/ref/universalSchemes/UpgradeScheme/#function-getparametershash", 
            "text": "Execution cost:  No bound available.  constant | pure  Inputs: \n1.  _voteParams   of type bytes32 \n2.  _intVote   of type address  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function getParametersHash"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/", 
            "text": "contract\n VestingScheme (\nsource\n)\n\n\nCode deposit cost: \nless than 1408400 gas.\n\n\nExecution cost: \nless than 21840 gas.\n\n\nTotal deploy cost(deposit + execution): \nless than 1430240 gas.\n\n\n\n\nA schme for vesting.\n\n\n\n\nReference\n\n\n\n\nConstructors\n\n\nVestingScheme()\n\n\n\n\n\n\nEvents\n\n\nSignToCancelAgreement\n\n\nRevokeSignToCancelAgreement\n\n\nOwnershipTransferred\n\n\nNewVestedAgreement\n\n\nLogRegisterOrg\n\n\nLogNewProposal\n\n\nLogExecutaion\n\n\nLogCollect\n\n\nLogAgreementProposal\n\n\nLogAgreementCancel\n\n\n\n\n\n\nFallback\n\n\nFunctions\n\n\nrevokeSignToCancelAgreement\n\n\nparameters\n\n\ntransferOwnership\n\n\nupdateParameters\n\n\nsignToCancelAgreement\n\n\nproposeVestingAgreement\n\n\nsetParameters\n\n\nowner\n\n\norganizationsData\n\n\nhashedParameters\n\n\ngetParametersHash\n\n\nexecute\n\n\ncreateVestedAgreement\n\n\ncollect\n\n\nagreements\n\n\n\n\n\n\n\n\nConstructors\n\n\nconstructor\n VestingScheme()\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nParams:\n\n\nNothing\n\n\nEvents\n\n\nevent\n SignToCancelAgreement\n\n\nParams:\n\n1. \n_agreementId\n \nof type uint256\n\n2. \n_signer\n \nof type address\n\n\nevent\n RevokeSignToCancelAgreement\n\n\nParams:\n\n1. \n_agreementId\n \nof type uint256\n\n2. \n_signer\n \nof type address\n\n\nevent\n OwnershipTransferred\n\n\nParams:\n\n1. \npreviousOwner\n \nof type address\n\n2. \nnewOwner\n \nof type address\n\n\nevent\n NewVestedAgreement\n\n\nParams:\n\n1. \n_agreementId\n \nof type uint256\n\n\nevent\n LogRegisterOrg\n\n\nParams:\n\n1. \n_avatar\n \nof type address\n\n\nevent\n LogNewProposal\n\n\nParams:\n\n1. \nproposalId\n \nof type bytes32\n\n\nevent\n LogExecutaion\n\n\nParams:\n\n1. \n_avatar\n \nof type address\n\n2. \n_proposalId\n \nof type bytes32\n\n3. \n_result\n \nof type int256\n\n\nevent\n LogCollect\n\n\nParams:\n\n1. \n_agreementId\n \nof type uint256\n\n\nevent\n LogAgreementProposal\n\n\nParams:\n\n1. \n_avatar\n \nof type address\n\n2. \n_proposalId\n \nof type bytes32\n\n\nevent\n LogAgreementCancel\n\n\nParams:\n\n1. \n_agreementId\n \nof type uint256\n\n\nFallback\n\n\nNothing\n\n\nFunctions\n\n\nfunction\n revokeSignToCancelAgreement\n\n\n\n\nFunction to revoke vote for canceling agreement.\n\n\n\n\nExecution cost: \nless than 43398 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_agreementId\n \nof type uint256- the relevant agreement.\n\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n parameters\n\n\nExecution cost: \nless than 894 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type bytes32\n\n\nReturns:\n\n1. \nvoteParams\n \nof type bytes32\n\n2. \nintVote\n \nof type address\n\n\nfunction\n transferOwnership\n\n\n\n\nAllows the current owner to transfer control of the contract to a newOwner.\n\n\n\n\nExecution cost: \nless than 23071 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \nnewOwner\n \nof type address- The address to transfer ownership to.\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n updateParameters\n\n\nExecution cost: \nless than 20572 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_hashedParameters\n \nof type bytes32\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n signToCancelAgreement\n\n\n\n\nFunction to sign to cancel an agreement.\n\n\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_agreementId\n \nof type uint256- the relevant agreement.\n\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n proposeVestingAgreement\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_beneficiary\n \nof type address\n\n2. \n_returnOnCancelAddress\n \nof type address\n\n3. \n_startingBlock\n \nof type uint256\n\n4. \n_amountPerPeriod\n \nof type uint256\n\n5. \n_periodLength\n \nof type uint256\n\n6. \n_numOfAgreedPeriods\n \nof type uint256\n\n7. \n_cliffInPeriods\n \nof type uint256\n\n8. \n_signaturesReqToCancel\n \nof type uint256\n\n9. \n_signersArray\n \nof type address[]\n\n10. \n_avatar\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n setParameters\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_voteParams\n \nof type bytes32\n\n2. \n_intVote\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n owner\n\n\nExecution cost: \nless than 787 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type address\n\n\nfunction\n organizationsData\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type address\n\n2. \nunnamed\n \nof type bytes32\n\n\nReturns:\n\n1. \ntoken\n \nof type address\n\n2. \nbeneficiary\n \nof type address\n\n3. \nreturnOnCancelAddress\n \nof type address\n\n4. \nstartingBlock\n \nof type uint256\n\n5. \namountPerPeriod\n \nof type uint256\n\n6. \nperiodLength\n \nof type uint256\n\n7. \nnumOfAgreedPeriods\n \nof type uint256\n\n8. \ncliffInPeriods\n \nof type uint256\n\n9. \nsignaturesReqToCancel\n \nof type uint256\n\n10. \ncollectedPeriods\n \nof type uint256\n\n11. \nsignaturesReceivedCounter\n \nof type uint256\n\n\nfunction\n hashedParameters\n\n\nExecution cost: \nless than 744 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n getParametersHash\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | pure\n\n\nInputs:\n\n1. \n_voteParams\n \nof type bytes32\n\n2. \n_intVote\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n execute\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_avatar\n \nof type address\n\n3. \n_param\n \nof type int256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n createVestedAgreement\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_token\n \nof type address\n\n2. \n_beneficiary\n \nof type address\n\n3. \n_returnOnCancelAddress\n \nof type address\n\n4. \n_startingBlock\n \nof type uint256\n\n5. \n_amountPerPeriod\n \nof type uint256\n\n6. \n_periodLength\n \nof type uint256\n\n7. \n_numOfAgreedPeriods\n \nof type uint256\n\n8. \n_cliffInPeriods\n \nof type uint256\n\n9. \n_signaturesReqToCancel\n \nof type uint256\n\n10. \n_signersArray\n \nof type address[]\n\n\nReturns:\n\n1. \nunnamed\n \nof type uint256\n\n\nfunction\n collect\n\n\n\n\nFunction for a beneficiary to collect.\n\n\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_agreementId\n \nof type uint256- the relevant agreement.\n\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n agreements\n\n\nExecution cost: \nless than 3271 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type uint256\n\n\nReturns:\n\n1. \ntoken\n \nof type address\n\n2. \nbeneficiary\n \nof type address\n\n3. \nreturnOnCancelAddress\n \nof type address\n\n4. \nstartingBlock\n \nof type uint256\n\n5. \namountPerPeriod\n \nof type uint256\n\n6. \nperiodLength\n \nof type uint256\n\n7. \nnumOfAgreedPeriods\n \nof type uint256\n\n8. \ncliffInPeriods\n \nof type uint256\n\n9. \nsignaturesReqToCancel\n \nof type uint256\n\n10. \ncollectedPeriods\n \nof type uint256\n\n11. \nsignaturesReceivedCounter\n \nof type uint256", 
            "title": "*contract* VestingScheme ([source](https://github.com/daostack/daostack/tree/master/./contracts/universalSchemes/VestingScheme.sol))"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#contract-vestingscheme-source", 
            "text": "Code deposit cost:  less than 1408400 gas.  Execution cost:  less than 21840 gas.  Total deploy cost(deposit + execution):  less than 1430240 gas.   A schme for vesting.", 
            "title": "contract VestingScheme (source)"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#reference", 
            "text": "Constructors  VestingScheme()    Events  SignToCancelAgreement  RevokeSignToCancelAgreement  OwnershipTransferred  NewVestedAgreement  LogRegisterOrg  LogNewProposal  LogExecutaion  LogCollect  LogAgreementProposal  LogAgreementCancel    Fallback  Functions  revokeSignToCancelAgreement  parameters  transferOwnership  updateParameters  signToCancelAgreement  proposeVestingAgreement  setParameters  owner  organizationsData  hashedParameters  getParametersHash  execute  createVestedAgreement  collect  agreements", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#constructor-vestingscheme", 
            "text": "Execution cost:  No bound available.  nonpayable  Params:  Nothing", 
            "title": "constructor VestingScheme()"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#event-signtocancelagreement", 
            "text": "Params: \n1.  _agreementId   of type uint256 \n2.  _signer   of type address", 
            "title": "event SignToCancelAgreement"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#event-revokesigntocancelagreement", 
            "text": "Params: \n1.  _agreementId   of type uint256 \n2.  _signer   of type address", 
            "title": "event RevokeSignToCancelAgreement"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#event-ownershiptransferred", 
            "text": "Params: \n1.  previousOwner   of type address \n2.  newOwner   of type address", 
            "title": "event OwnershipTransferred"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#event-newvestedagreement", 
            "text": "Params: \n1.  _agreementId   of type uint256", 
            "title": "event NewVestedAgreement"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#event-logregisterorg", 
            "text": "Params: \n1.  _avatar   of type address", 
            "title": "event LogRegisterOrg"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#event-lognewproposal", 
            "text": "Params: \n1.  proposalId   of type bytes32", 
            "title": "event LogNewProposal"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#event-logexecutaion", 
            "text": "Params: \n1.  _avatar   of type address \n2.  _proposalId   of type bytes32 \n3.  _result   of type int256", 
            "title": "event LogExecutaion"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#event-logcollect", 
            "text": "Params: \n1.  _agreementId   of type uint256", 
            "title": "event LogCollect"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#event-logagreementproposal", 
            "text": "Params: \n1.  _avatar   of type address \n2.  _proposalId   of type bytes32", 
            "title": "event LogAgreementProposal"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#event-logagreementcancel", 
            "text": "Params: \n1.  _agreementId   of type uint256", 
            "title": "event LogAgreementCancel"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#fallback", 
            "text": "Nothing", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#function-revokesigntocancelagreement", 
            "text": "Function to revoke vote for canceling agreement.   Execution cost:  less than 43398 gas.  nonpayable  Inputs: \n1.  _agreementId   of type uint256- the relevant agreement.  Returns:  Nothing", 
            "title": "function revokeSignToCancelAgreement"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#function-parameters", 
            "text": "Execution cost:  less than 894 gas.  constant | view  Inputs: \n1.  unnamed   of type bytes32  Returns: \n1.  voteParams   of type bytes32 \n2.  intVote   of type address", 
            "title": "function parameters"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#function-transferownership", 
            "text": "Allows the current owner to transfer control of the contract to a newOwner.   Execution cost:  less than 23071 gas.  nonpayable  Inputs: \n1.  newOwner   of type address- The address to transfer ownership to.  Returns:  Nothing", 
            "title": "function transferOwnership"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#function-updateparameters", 
            "text": "Execution cost:  less than 20572 gas.  nonpayable  Inputs: \n1.  _hashedParameters   of type bytes32  Returns:  Nothing", 
            "title": "function updateParameters"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#function-signtocancelagreement", 
            "text": "Function to sign to cancel an agreement.   Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _agreementId   of type uint256- the relevant agreement.  Returns:  Nothing", 
            "title": "function signToCancelAgreement"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#function-proposevestingagreement", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _beneficiary   of type address \n2.  _returnOnCancelAddress   of type address \n3.  _startingBlock   of type uint256 \n4.  _amountPerPeriod   of type uint256 \n5.  _periodLength   of type uint256 \n6.  _numOfAgreedPeriods   of type uint256 \n7.  _cliffInPeriods   of type uint256 \n8.  _signaturesReqToCancel   of type uint256 \n9.  _signersArray   of type address[] \n10.  _avatar   of type address  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function proposeVestingAgreement"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#function-setparameters", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _voteParams   of type bytes32 \n2.  _intVote   of type address  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function setParameters"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#function-owner", 
            "text": "Execution cost:  less than 787 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type address", 
            "title": "function owner"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#function-organizationsdata", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs: \n1.  unnamed   of type address \n2.  unnamed   of type bytes32  Returns: \n1.  token   of type address \n2.  beneficiary   of type address \n3.  returnOnCancelAddress   of type address \n4.  startingBlock   of type uint256 \n5.  amountPerPeriod   of type uint256 \n6.  periodLength   of type uint256 \n7.  numOfAgreedPeriods   of type uint256 \n8.  cliffInPeriods   of type uint256 \n9.  signaturesReqToCancel   of type uint256 \n10.  collectedPeriods   of type uint256 \n11.  signaturesReceivedCounter   of type uint256", 
            "title": "function organizationsData"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#function-hashedparameters", 
            "text": "Execution cost:  less than 744 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function hashedParameters"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#function-getparametershash", 
            "text": "Execution cost:  No bound available.  constant | pure  Inputs: \n1.  _voteParams   of type bytes32 \n2.  _intVote   of type address  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function getParametersHash"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#function-execute", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32 \n2.  _avatar   of type address \n3.  _param   of type int256  Returns: \n1.  unnamed   of type bool", 
            "title": "function execute"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#function-createvestedagreement", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _token   of type address \n2.  _beneficiary   of type address \n3.  _returnOnCancelAddress   of type address \n4.  _startingBlock   of type uint256 \n5.  _amountPerPeriod   of type uint256 \n6.  _periodLength   of type uint256 \n7.  _numOfAgreedPeriods   of type uint256 \n8.  _cliffInPeriods   of type uint256 \n9.  _signaturesReqToCancel   of type uint256 \n10.  _signersArray   of type address[]  Returns: \n1.  unnamed   of type uint256", 
            "title": "function createVestedAgreement"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#function-collect", 
            "text": "Function for a beneficiary to collect.   Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _agreementId   of type uint256- the relevant agreement.  Returns:  Nothing", 
            "title": "function collect"
        }, 
        {
            "location": "/ref/universalSchemes/VestingScheme/#function-agreements", 
            "text": "Execution cost:  less than 3271 gas.  constant | view  Inputs: \n1.  unnamed   of type uint256  Returns: \n1.  token   of type address \n2.  beneficiary   of type address \n3.  returnOnCancelAddress   of type address \n4.  startingBlock   of type uint256 \n5.  amountPerPeriod   of type uint256 \n6.  periodLength   of type uint256 \n7.  numOfAgreedPeriods   of type uint256 \n8.  cliffInPeriods   of type uint256 \n9.  signaturesReqToCancel   of type uint256 \n10.  collectedPeriods   of type uint256 \n11.  signaturesReceivedCounter   of type uint256", 
            "title": "function agreements"
        }, 
        {
            "location": "/ref/universalSchemes/VoteInOrganizationScheme/", 
            "text": "contract\n VoteInOrganizationScheme (\nsource\n)\n\n\nCode deposit cost: \nless than 599200 gas.\n\n\nExecution cost: \nless than 21000 gas.\n\n\nTotal deploy cost(deposit + execution): \nless than 620200 gas.\n\n\n\n\nVoteInOrganizationScheme.\n\n\n\n\nReference\n\n\n\n\nConstructors\n\n\nVoteInOrganizationScheme()\n\n\n\n\n\n\nEvents\n\n\nProposalExecuted\n\n\nProposalDeleted\n\n\nOwnershipTransferred\n\n\nNewVoteProposal\n\n\nLogNewProposal\n\n\n\n\n\n\nFallback\n\n\nFunctions\n\n\nproposeVote\n\n\nparameters\n\n\ntransferOwnership\n\n\nupdateParameters\n\n\nsetParameters\n\n\nowner\n\n\norganizationsData\n\n\nhashedParameters\n\n\ngetParametersHash\n\n\nexecute\n\n\naction\n\n\n\n\n\n\n\n\nConstructors\n\n\nconstructor\n VoteInOrganizationScheme()\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nParams:\n\n\nNothing\n\n\nEvents\n\n\nevent\n ProposalExecuted\n\n\nParams:\n\n1. \n_avatar\n \nof type address\n\n2. \n_proposalId\n \nof type bytes32\n\n\nevent\n ProposalDeleted\n\n\nParams:\n\n1. \n_avatar\n \nof type address\n\n2. \n_proposalId\n \nof type bytes32\n\n\nevent\n OwnershipTransferred\n\n\nParams:\n\n1. \npreviousOwner\n \nof type address\n\n2. \nnewOwner\n \nof type address\n\n\nevent\n NewVoteProposal\n\n\nParams:\n\n1. \n_avatar\n \nof type address\n\n2. \n_proposalId\n \nof type bytes32\n\n3. \n_intVoteInterface\n \nof type address\n\n4. \n_originalIntVote\n \nof type address\n\n5. \n_originalProposalId\n \nof type bytes32\n\n6. \n_originalNumOfChoices\n \nof type uint256\n\n\nevent\n LogNewProposal\n\n\nParams:\n\n1. \nproposalId\n \nof type bytes32\n\n\nFallback\n\n\nNothing\n\n\nFunctions\n\n\nfunction\n proposeVote\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_avatar\n \nof type address\n\n2. \n_originalIntVote\n \nof type address\n\n3. \n_originalProposalId\n \nof type bytes32\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n parameters\n\n\nExecution cost: \nless than 906 gas.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type bytes32\n\n\nReturns:\n\n1. \nintVote\n \nof type address\n\n2. \nvoteParams\n \nof type bytes32\n\n\nfunction\n transferOwnership\n\n\n\n\nAllows the current owner to transfer control of the contract to a newOwner.\n\n\n\n\nExecution cost: \nless than 23005 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \nnewOwner\n \nof type address- The address to transfer ownership to.\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n updateParameters\n\n\nExecution cost: \nless than 20572 gas.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_hashedParameters\n \nof type bytes32\n\n\nReturns:\n\n\nNothing\n\n\nfunction\n setParameters\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_voteParams\n \nof type bytes32\n\n2. \n_intVote\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n owner\n\n\nExecution cost: \nless than 765 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type address\n\n\nfunction\n organizationsData\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | view\n\n\nInputs:\n\n1. \nunnamed\n \nof type address\n\n2. \nunnamed\n \nof type bytes32\n\n\nReturns:\n\n1. \noriginalIntVote\n \nof type address\n\n2. \noriginalProposalId\n \nof type bytes32\n\n3. \noriginalNumOfChoices\n \nof type uint256\n\n\nfunction\n hashedParameters\n\n\nExecution cost: \nless than 656 gas.\n\n\nconstant | view\n\n\nInputs:\n\n\nNothing\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n getParametersHash\n\n\nExecution cost: \nNo bound available.\n\n\nconstant | pure\n\n\nInputs:\n\n1. \n_voteParams\n \nof type bytes32\n\n2. \n_intVote\n \nof type address\n\n\nReturns:\n\n1. \nunnamed\n \nof type bytes32\n\n\nfunction\n execute\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_proposalId\n \nof type bytes32\n\n2. \n_avatar\n \nof type address\n\n3. \n_param\n \nof type int256\n\n\nReturns:\n\n1. \nunnamed\n \nof type bool\n\n\nfunction\n action\n\n\n\n\ndo the actual voting in the other organization in behalf of the organization's avatar.\n     This function is deleted called by the organization.\n\n\n\n\nExecution cost: \nNo bound available.\n\n\nnonpayable\n\n\nInputs:\n\n1. \n_params\n \nof type bytes32[]- array represent the voting .\n       _params[0] - the address of the voting machine.\n       _params[1] - the proposalId.\n       _params[2] - the voting machine params.\n\n\n\nbool which indicate success.", 
            "title": "*contract* VoteInOrganizationScheme ([source](https://github.com/daostack/daostack/tree/master/./contracts/universalSchemes/VoteInOrganizationScheme.sol))"
        }, 
        {
            "location": "/ref/universalSchemes/VoteInOrganizationScheme/#contract-voteinorganizationscheme-source", 
            "text": "Code deposit cost:  less than 599200 gas.  Execution cost:  less than 21000 gas.  Total deploy cost(deposit + execution):  less than 620200 gas.   VoteInOrganizationScheme.", 
            "title": "contract VoteInOrganizationScheme (source)"
        }, 
        {
            "location": "/ref/universalSchemes/VoteInOrganizationScheme/#reference", 
            "text": "Constructors  VoteInOrganizationScheme()    Events  ProposalExecuted  ProposalDeleted  OwnershipTransferred  NewVoteProposal  LogNewProposal    Fallback  Functions  proposeVote  parameters  transferOwnership  updateParameters  setParameters  owner  organizationsData  hashedParameters  getParametersHash  execute  action", 
            "title": "Reference"
        }, 
        {
            "location": "/ref/universalSchemes/VoteInOrganizationScheme/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ref/universalSchemes/VoteInOrganizationScheme/#constructor-voteinorganizationscheme", 
            "text": "Execution cost:  No bound available.  nonpayable  Params:  Nothing", 
            "title": "constructor VoteInOrganizationScheme()"
        }, 
        {
            "location": "/ref/universalSchemes/VoteInOrganizationScheme/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/ref/universalSchemes/VoteInOrganizationScheme/#event-proposalexecuted", 
            "text": "Params: \n1.  _avatar   of type address \n2.  _proposalId   of type bytes32", 
            "title": "event ProposalExecuted"
        }, 
        {
            "location": "/ref/universalSchemes/VoteInOrganizationScheme/#event-proposaldeleted", 
            "text": "Params: \n1.  _avatar   of type address \n2.  _proposalId   of type bytes32", 
            "title": "event ProposalDeleted"
        }, 
        {
            "location": "/ref/universalSchemes/VoteInOrganizationScheme/#event-ownershiptransferred", 
            "text": "Params: \n1.  previousOwner   of type address \n2.  newOwner   of type address", 
            "title": "event OwnershipTransferred"
        }, 
        {
            "location": "/ref/universalSchemes/VoteInOrganizationScheme/#event-newvoteproposal", 
            "text": "Params: \n1.  _avatar   of type address \n2.  _proposalId   of type bytes32 \n3.  _intVoteInterface   of type address \n4.  _originalIntVote   of type address \n5.  _originalProposalId   of type bytes32 \n6.  _originalNumOfChoices   of type uint256", 
            "title": "event NewVoteProposal"
        }, 
        {
            "location": "/ref/universalSchemes/VoteInOrganizationScheme/#event-lognewproposal", 
            "text": "Params: \n1.  proposalId   of type bytes32", 
            "title": "event LogNewProposal"
        }, 
        {
            "location": "/ref/universalSchemes/VoteInOrganizationScheme/#fallback", 
            "text": "Nothing", 
            "title": "Fallback"
        }, 
        {
            "location": "/ref/universalSchemes/VoteInOrganizationScheme/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/ref/universalSchemes/VoteInOrganizationScheme/#function-proposevote", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _avatar   of type address \n2.  _originalIntVote   of type address \n3.  _originalProposalId   of type bytes32  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function proposeVote"
        }, 
        {
            "location": "/ref/universalSchemes/VoteInOrganizationScheme/#function-parameters", 
            "text": "Execution cost:  less than 906 gas.  constant | view  Inputs: \n1.  unnamed   of type bytes32  Returns: \n1.  intVote   of type address \n2.  voteParams   of type bytes32", 
            "title": "function parameters"
        }, 
        {
            "location": "/ref/universalSchemes/VoteInOrganizationScheme/#function-transferownership", 
            "text": "Allows the current owner to transfer control of the contract to a newOwner.   Execution cost:  less than 23005 gas.  nonpayable  Inputs: \n1.  newOwner   of type address- The address to transfer ownership to.  Returns:  Nothing", 
            "title": "function transferOwnership"
        }, 
        {
            "location": "/ref/universalSchemes/VoteInOrganizationScheme/#function-updateparameters", 
            "text": "Execution cost:  less than 20572 gas.  nonpayable  Inputs: \n1.  _hashedParameters   of type bytes32  Returns:  Nothing", 
            "title": "function updateParameters"
        }, 
        {
            "location": "/ref/universalSchemes/VoteInOrganizationScheme/#function-setparameters", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _voteParams   of type bytes32 \n2.  _intVote   of type address  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function setParameters"
        }, 
        {
            "location": "/ref/universalSchemes/VoteInOrganizationScheme/#function-owner", 
            "text": "Execution cost:  less than 765 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type address", 
            "title": "function owner"
        }, 
        {
            "location": "/ref/universalSchemes/VoteInOrganizationScheme/#function-organizationsdata", 
            "text": "Execution cost:  No bound available.  constant | view  Inputs: \n1.  unnamed   of type address \n2.  unnamed   of type bytes32  Returns: \n1.  originalIntVote   of type address \n2.  originalProposalId   of type bytes32 \n3.  originalNumOfChoices   of type uint256", 
            "title": "function organizationsData"
        }, 
        {
            "location": "/ref/universalSchemes/VoteInOrganizationScheme/#function-hashedparameters", 
            "text": "Execution cost:  less than 656 gas.  constant | view  Inputs:  Nothing  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function hashedParameters"
        }, 
        {
            "location": "/ref/universalSchemes/VoteInOrganizationScheme/#function-getparametershash", 
            "text": "Execution cost:  No bound available.  constant | pure  Inputs: \n1.  _voteParams   of type bytes32 \n2.  _intVote   of type address  Returns: \n1.  unnamed   of type bytes32", 
            "title": "function getParametersHash"
        }, 
        {
            "location": "/ref/universalSchemes/VoteInOrganizationScheme/#function-execute", 
            "text": "Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _proposalId   of type bytes32 \n2.  _avatar   of type address \n3.  _param   of type int256  Returns: \n1.  unnamed   of type bool", 
            "title": "function execute"
        }, 
        {
            "location": "/ref/universalSchemes/VoteInOrganizationScheme/#function-action", 
            "text": "do the actual voting in the other organization in behalf of the organization's avatar.\n     This function is deleted called by the organization.   Execution cost:  No bound available.  nonpayable  Inputs: \n1.  _params   of type bytes32[]- array represent the voting .\n       _params[0] - the address of the voting machine.\n       _params[1] - the proposalId.\n       _params[2] - the voting machine params.  bool which indicate success.", 
            "title": "function action"
        }
    ]
}